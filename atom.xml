<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2014-07-31T10:44:45-04:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Code and Supply: Programming in Journalism]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/07/17/pittsburgh-code-and-supply-programming-in-journalism/"/>
    <updated>2014-07-17T21:21:19-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/07/17/pittsburgh-code-and-supply-programming-in-journalism</id>
    <content type="html"><![CDATA[<p><img src="http://static.squarespace.com/static/538f3cc8e4b00f52172b5560/t/53a4ec76e4b0488fb14c5a29/1403317372203/sign.png?format=500w"></p>

<p>I finally attended my first ever <a href="http://www.codeandsupply.co/">Pittsburgh Code and Supply</a> meeting! The group, which posts its <a href="http://www.meetup.com/Pittsburgh-Code-Supply/">events on Meetup</a>, was created by local Pittsburgh software developer <a href="https://twitter.com/justinxreese">Justin Reese</a> just a few months ago, in March 2014. His vision is to create a local community that, unlike conventional specific language/technology-based meetups, is much more universal and broad. If you haven&rsquo;t do so already, read more about the <a href="http://www.codeandsupply.co/about">goals of Pittsburgh Code and Supply</a>. I&rsquo;m very excited about this new group!</p>

<p>The Code and Supply meetup I just attended was about <a href="http://www.meetup.com/Pittsburgh-Code-Supply/events/186766512/">&ldquo;Programming in journalism&rdquo;</a>. This is a topic of huge importance, and I was excited to attend to hear more about what some local journalist/programmers are doing.</p>

<!--more-->


<h2>A bit about sponsors</h2>

<p>Justin opened by briefly saying a few words about the goals of Pittsburgh Code and Supply. He then noted that this month, the group did not have sponsors, unfortunately.</p>

<p><strong>Pittsburgh Code and Supply needs sponsors!</strong></p>

<p>If you like what Code and Supply is doing, please consider seeing if your employer would be willing to step up as a sponsor for the group.</p>

<h2>Contribute!</h2>

<p>Also, in any case, spread the word about the group.</p>

<p>This is my first meeting, and next Monday, I am actually going to give my first presentation for the group, on <a href="http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/">&ldquo;Type-Directed TDD in Rust&rdquo;</a>. The group is always looking for people to speak about something or facilitate other formats of meetings, so <a href="http://www.codeandsupply.co/speak/">sign up</a> if you have an idea! I personally have some ideas I&rsquo;d like to propose for future meetings, such as discussions about technology-related topics such as philosophy, history, and education.</p>

<h2>AmyJo Brown</h2>

<iframe width="560" height="315" src="//www.youtube.com/embed/DaOxhNkHvvw" frameborder="0" allowfullscreen></iframe>


<p><a href="http://amyjobrown.com/">AmyJo Brown</a>, an independent journalist, gave a great talk about the kind of work that she does, and why it is important. She gave an overview of how journalism has changed because of the availability of data and because of the complexity of the world, both of which lead to the necessity of telling stories differently, as evidenced by what <a href="http://www.propublica.org/">ProPublica</a>, the <a href="http://www.nytimes.com/">New York Times</a>, and the <a href="http://www.latimes.com/">Los Angeles Times</a> have been doing.</p>

<p>Her own work involves tracking political donations (&ldquo;follow the money&rdquo;).</p>

<p>She gave examples of software tools she uses to get data, clean it, analyze it, and archive the whole process. On the programming end, she programs in Python, for example (Django for Web development), and uses <a href="http://www.documentcloud.org/">DocumentCloud</a>.</p>

<p>She talked about many things to keep in mind while doing this kind of data journalism. First of all, you have to know the limitations of the data you&rsquo;re getting. She has to deal with handwritten documents, and data in different formats. Data that is clearly incomplete or entered wrong (whether accidentally or maliciously). It is necessary to know the domain, know the context in which data was collected or required or submitted, to not fall into the trap of just blindly treating data as a record of the full truth and just get into programmatically processing it. There&rsquo;s a lot that involves human judgment calls. And this is why it is so important to save all the original information and document each step of data &ldquo;cleaning&rdquo; and interpretation.</p>

<p>Near the end of her talk, AmyJo had her colleague Katrina speak a bit also. Katrina was not originally trained as a programmer, but was always interested in politics. She ended up getting into programming later.</p>

<p>(I&rsquo;m always very excited and impressed to hear of people with domain knowledge and passion who take up computer programming as a useful skill to apply to their domain. Sometimes I hear people saying &ldquo;please don&rsquo;t code&rdquo;; I totally disagree with this sentiment and believe that <a href="http://franklinchen.com/blog/2011/12/09/why-everyone-should-learn-computer-science/">everyone can benefit from learning the fundamentals of computer science and programming</a>.)</p>

<h2>Andrew McGill</h2>

<iframe width="560" height="315" src="//www.youtube.com/embed/0iT9rhwRXVs" frameborder="0" allowfullscreen></iframe>


<p><a href="http://www.andrewrmcgill.com/">Andrew McGill</a> bills himself as &ldquo;your friendly neighborhood journalist&rdquo;, and works for the <a href="http://www.post-gazette.com/">Pittsburgh Post-Gazette</a>.</p>

<p>He started by talking about his interesting career path, which involved being into computers before college, but then going to college and then finding other interests and abandoning programming, and then only later taking it back up, in the service of journalism, to enable him to find data and tell stories through visualization.</p>

<p>He showed us specific Web sites and articles he has created to provide better visualizations of data than what is available in raw form. For example, on the funny side, there is <a href="http://newsinteractive.post-gazette.com/wheresbill/">&ldquo;Where&rsquo;s Bill?&rdquo;</a>, which he created because he was not happy with the &ldquo;official&rdquo; boring text news feed of Mayor Bill Peduto&rsquo;s calendar. He scraped the official site with PHP. He also created a Bill Peduto Twitter bot using Python.</p>

<p>He also showed a D3-based visualization of <a href="http://newsinteractive.post-gazette.com/plugged-wells/">&ldquo;The Mystery of the Plugged Wells&rdquo;</a>. Again, the point was to take already available data but to tell a story better with it than just giving raw tables or a purely text-based narrative.</p>

<p>He showed some other projects, such as a visualization of school comparisons based on <a href="http://en.wikipedia.org/wiki/Pennsylvania_System_of_School_Assessment">PSSA</a> data.</p>

<h2>Questions and answers</h2>

<p>There were quite a lot of questions posed to the presenters throughout the evening, on the technologies used, on work with graphic designers, on the process of obtaining data, and political implications of the work. Great discussions.</p>

<h2>Technologies used</h2>

<p>Here&rsquo;s something resembling a summary of technologies mentioned that the presenters use:</p>

<ul>
<li>Python</li>
<li>Django</li>
<li>DocumentCloud</li>
<li>Bootstrap</li>
<li>Git</li>
<li>R</li>
<li>SQL</li>
<li>OpenRefine</li>
<li>D3</li>
</ul>


<h2>Interesting articles</h2>

<p>Before the meetup, I posted to the <a href="http://www.meetup.com/Pittsburgh-Code-Supply/events/186766512/">event page</a> a link to a provocative (perhaps too harsh and ranty) article warning about dangers in data journalism, <a href="http://www.niemanlab.org/2014/07/alberto-cairo-data-journalism-needs-to-up-its-own-standards/">by visualization expert Alberto Cairo</a>. It got no response.</p>

<p>Later, I also posted a link to a thoughtful examination of the question of <a href="http://source.opennews.org/en-US/learning/true-facts-maybe/">epistemology in data journalism</a>. I totally recommend reading that article.</p>

<p>AmyJo after the meetup posted some more links on the event page:</p>

<ul>
<li><a href="https://medium.com/@jeremybowers/why-im-a-newsroom-coder-860d9d49f684">&ldquo;Why I&rsquo;m a newsroom coder&rdquo;</a></li>
<li><a href="https://source.opennews.org/en-US/articles/planting-next-crop-newsroom-coders/">&ldquo;Planting the next crop of newsroom coders&rdquo;</a></li>
<li><a href="http://www.nytimes.com/2014/07/17/opinion/the-fec-lags-on-campaign-finance-disclosures.html">&ldquo;Data delayed is democracy denied&rdquo;</a></li>
</ul>


<h2>Conclusion</h2>

<p>I was very excited to attend my first Pittsburgh Code and Supply meetup, on the fascinating topic of programming in journalism. I felt I learned a lot about what is at stake and how programming is being used in journalism to better inform people of what is going on in the world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Exploring Type-directed, Test-driven Development Using FizzBuzz (My Practice Talk)]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed/"/>
    <updated>2014-05-15T22:49:48-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met, with me presenting a <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/">practice talk</a> for &ldquo;Exploring type-directed, test-driven development using FizzBuzz&rdquo;, which I am presenting at the upcoming local <a href="http://pghtechfest.com/">Pittsburgh TechFest</a> conference.</p>

<!--more-->


<h2>Presentation</h2>

<p>I have only recently completed the slides and code for my talk, and had not actually given the talk yet, so this was a practice talk that did not go so well, unfortunately.</p>

<p>I spoke too quickly and had too much material to cover, and also got lost in some of my own slides. Oops. I think reaction to my talk was mixed. Some enjoyed it, while others seemed lost at places.</p>

<p>After going home, I frankly felt that I had <em>failed</em>.</p>

<p>But I believe I can do much better. I have plenty of time to do a thorough revision before Pittsburgh TechFest in three weeks. I need to cut out material that is not needed for the core of what I am trying to achieve and make some things clearer (especially for the intended Pittsburgh TechFest audience, which I do not expect to even know Scala).</p>

<h2>Supporting material</h2>

<p>Here is the <a href="https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz">GitHub repository</a>.</p>

<p>I don&rsquo;t recommend looking at them, but for historical purposes, here are slides of the presentation <a href="https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/meetup/doc/presentation.pdf">as it was given in the first draft</a>.</p>

<h2>(Update of 2014-05-16)</h2>

<p>One day makes a difference in my confidence and determination! I noticed that the new <a href="http://www.meetup.com/Pittsburgh-Code-Supply/">Pittsburgh Code and Supply</a> group (which I have not yet attended) is soon having its inaugural <a href="http://www.rust-lang.org/">Rust</a> <a href="http://www.meetup.com/Pittsburgh-Code-Supply/events/181773312/">soon</a>.</p>

<p>So I decided to offer to do a version of my talk for Pittsburgh Code and Supply using Rust as the programming language (rather than Scala). I want to spread the news about how to effectively use a sufficiently typed programming language, whether it&rsquo;s Scala or Rust or anything else sufficiently derived from the ML family of type systems.</p>

<p>Justin will schedule it for some time in July. That should give me enough time, after Pittsburgh TechFest in early June, to learn enough Rust to convert my Scala code over properly!</p>

<h2>(Update of 2014-06-07)</h2>

<p>I much improved the presentation for Pittsburgh TechFest.</p>

<p>I recommend reading the <a href="https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/master/doc/article.pdf">article version of the presentation</a>, rather than the slides. This is the first time I&rsquo;ve created both an article version of a presentation and slides for use during the live presentation. I will do this in the future as well. Slides are not meant to stand alone or even be read alone.</p>

<h2>(Update of 2014-07-17)</h2>

<p>It&rsquo;s crunch time. My Rust version of the talk, <a href="http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/">&ldquo;Type-Directed TDD in Rust&rdquo;</a> is coming next week.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Implicits]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits/"/>
    <updated>2014-02-13T21:45:59-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met with Justin presenting on <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/">&ldquo;Implicits&rdquo;</a>.</p>

<!--more-->


<h2>Implicits</h2>

<p>Implicits are a novel and fantastically important feature of Scala. I wish there were a comprehensive and concise single resource about them out there, but I don&rsquo;t actually know of one.</p>

<p>I&rsquo;ve been doing stuff with implicits lately. Not long ago, I wrote a blog post that involved <a href="http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2/">using Scala implicits to avoid relying on the inherited Java <code>toString</code> method</a>. More recently, for this meetup I posted some code that I hoped someone would comment on, in which <a href="https://github.com/franklinchen/test-specs2-matchers">I used implicits to try to simplify a DSL</a>. I&rsquo;m not sure this is the right design choice, but it was an experiment.</p>

<h2>Presentation</h2>

<p>Around 7 of us showed up.</p>

<p>Justin did some live coding using the Scala Worksheet to demonstrate various uses of implicits.</p>

<p>One use is to define an &ldquo;implicit function&rdquo; that can convert of a value of one type to another. This can be overused badly, unfortunately.</p>

<p>Another is to define an &ldquo;implicit parameter&rdquo; for a function so that you don&rsquo;t have to explicitly pass a parameter to the function, if there is an implicit value in scope.</p>

<p>Scala 2.10 greatly improved implicits by encapsulating the &ldquo;conversion&rdquo; pattern by means of an &ldquo;implicit class&rdquo;. Strangely, Scala Worksheet seemed to get confused when we played around and defined an implicit class that also had an implicit parameter. This led to some interesting detective work as we examined the generated JVM byte code to figure out what was going on! I thought it was useful for us to dig into this level; often it is useful to understand what something compiles to in order to better understand and appreciate a high-level language construct.</p>

<p>Finally, we briefly discussed the type class pattern, which is arguably the most important use of implicits. This was too big a topic to get into here though.</p>

<h2>Resources</h2>

<p>I posted some good resources that have popped up on my radar on Scala implicits:</p>

<ul>
<li>A fine <a href="http://like-a-boss.net/2013/03/29/polymorphism-and-typeclasses-in-scala.html">tutorial on type classes in Scala</a>.</li>
<li><a href="http://typelevel.org/blog/2014/01/18/implicitly_existential.html">Scary stuff with implicits</a> that I don&rsquo;t understand (yet).</li>
</ul>


<h2>Conclusion</h2>

<p>Justin gave a nice introduction to implicits. I think the live coding and experimentation is a great way to involve people in code suggestions and discussion of what things mean and do. It was a fun time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Introduction to Reactive]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/01/09/pittsburgh-scala-meetup-introduction-to-reactive/"/>
    <updated>2014-01-09T21:29:20-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/01/09/pittsburgh-scala-meetup-introduction-to-reactive</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met with Josh presenting an <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581352/">&ldquo;Introduction to Reactive&rdquo;</a>.</p>

<p>It was great.</p>

<!--more-->


<h2>Pre-meetup dinner</h2>

<p>A couple of us (Justin, Josh, Chris, me) had an early dinner at Everyday Noodles before the meetup. Very filling!</p>

<h2>Turnout</h2>

<p>Ten of us showed up for this meeting.</p>

<h2>Presentation</h2>

<h3>What is &ldquo;reactive&rdquo; anyway?</h3>

<p>In case you didn&rsquo;t hear about it in the media, the term &ldquo;reactive&rdquo; has been popularized in recent months, and I <a href="http://ConscientiousProgrammer.com/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming/">reviewed the free Coursera course &ldquo;Principles of Reactive Programming&rdquo;</a> that some of us in the Pittsburgh Scala group just completed, so check out my post for more on &ldquo;reactive&rdquo;.</p>

<h3>Futures</h3>

<p>Josh did a live SBT session reviewing futures and promises.</p>

<p>He noted that futures have limitations as a component of reactive systems. (This had become apparent when <a href="http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/">I started using futures last year in my personal projects</a> and then <a href="http://ConscientiousProgrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social/">for work</a>.) By themselves, futures do not support cancellation or <a href="http://en.wikipedia.org/wiki/Back_pressure">back pressure</a>. Futures are a low-level, limited mechanism that are the right tool only if you have a pipeline all the way through forward, no back channel.</p>

<p>An alternative to futures, of course, is to go all out and use Akka actors. But the drawback I&rsquo;ve found with that is that this is a heavyweight mechanism for problems that don&rsquo;t need the full power of actors. I&rsquo;ve wanted something more structured and lightweight than using actors directly. I find it tricky to program using actors, because it is very easy to start writing spaghetti code that is spread out everywhere (which is what happened to me in the final project for the Coursera course).</p>

<p>It turns out, according to Josh, that Typesafe is working on precisely this problem! Nice. He&rsquo;ll tell us more when it comes out.</p>

<h4>(Update of 2014-07-10)</h4>

<p>Half a year later, the promise was realized, as the Pittsburgh Scala Meetup had Josh <a href="http://ConscientiousProgrammer.com/blog/2014/07/10/pittsburgh-scala-meetup-reactive-streams/">gave a talk on the new API called Reactive Streams</a>!</p>

<h3>Play</h3>

<p>Josh demonstrated <a href="http://typesafe.com/activator">Typesafe Activator</a>, the cool new Web browser-based platform for using Scala. He showed an app using Play that looks at blogs simultaneously and uses <code>recoverWith</code>.</p>

<h2>Random other questions and discussions</h2>

<p>What I like about the Pittsburgh Scala Meetup is that even when we have a presentation, discussion often wanders off to related topics (or unrelated topics). Anything goes, and I usually learn a lot.</p>

<p>Someone asked about support for channels as in Go or Clojure&rsquo;s <a href="https://github.com/clojure/core.async"><code>core.async</code></a>. Josh said they&rsquo;re working on this sort of thing with support for back pressure.</p>

<p>Someone asked about how to connect <a href="http://www.playframework.com/documentation/2.0/Iteratees">iteratees</a> with actors. Josh said, you can feed from an iteratee to an actor, and then just let the actor do stuff. However, there is some controversy about the whole iteratee thing in Play.</p>

<h2>Conclusion</h2>

<p>This was a great Pittsburgh Scala Meetup session. I felt that a lot of questions that had built up in my mind after having gotten into reactive programming are being addressed with continuing work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of the Free Coursera Course "Principles of Reactive Programming"]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming/"/>
    <updated>2013-12-31T21:29:39-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming</id>
    <content type="html"><![CDATA[<p>At long last, I have officially completed the free Coursera course <a href="http://www.coursera.org/course/reactive">&ldquo;Principles of Reactive Programming&rdquo;</a>, receiving my &ldquo;Statement of Accomplishment&rdquo;.</p>

<p>This was an intense course, a lot of work, actually, and made the last two month s of my life (November and December) challenging as I juggled many activities. But it was worth the effort. I would definitely recommend this course to anyone who has completed the introductory course <a href="http://www.coursera.org/course/progfun">&ldquo;Principles of Functional Programming in Scala&rdquo;</a> (or has the equivalent background). (See my <a href="http://franklinchen.com/blog/2012-11-15-review-of-courseras-fall-2012-functional-programming-principles-in-scala/">review of that course as offered in fall of 2012</a>.)</p>

<p>I took this course along with a bunch of local friends who are also members of the <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a>.</p>

<!--more-->


<h2>What is &ldquo;Reactive&rdquo;?</h2>

<p>&ldquo;Reactive&rdquo; is a fairly new buzzword, popularized recently by the <a href="http://www.reactivemanifesto.org/">Reactive Manifesto</a> to urge consideration of four traits modern applications may need to have:</p>

<ul>
<li>responsive</li>
<li>scalable</li>
<li>resilient</li>
<li>event-driven</li>
</ul>


<h2>Instructors and topics</h2>

<p>Each instructor was responsible for covering a key technology.</p>

<h3>Martin Odersky</h3>

<p>Martin Oderksy, the inventor of Scala and instructor for the previously mentioned &ldquo;Principles of Functional Programming in Scala&rdquo; course, focused on covering more advanced usage of Scala.</p>

<p>He immediately introduced monads, which are key to many of the concepts and libraries used throughout this course. Scala&rsquo;s support for monads through the syntax of for-comprehensions is very helpful. He introduced the property-based testing framework <a href="http://www.scalacheck.org/">ScalaCheck</a> (which uses monads for generation of data), and the first assignment involved working with the framework. (By the way, I gave a <a href="http://franklinchen.com/blog/2013/04/11/my-pittsburgh-scala-meetup-talk-on-property-based-testing-using-scalacheck/">talk on property-based testing using ScalaCheck</a> eight months ago.)</p>

<p>Then he discussed modeling event simulation in Scala using mutable objects. I felt that this unit was not in the spirit of the others, because there was so much uncontrolled mutable state running around. My friends and I agreed that the assignment for this unit was burdensome and not really useful. I thought to myself, in fact, that I would never solve the problems in this way.</p>

<h3>Erik Meijer</h3>

<p>Erik Meijer is a very energetic and humorous speaker. I really enjoyed his lectures.</p>

<p>In his first unit, he introduced asynchronous programming using Scala&rsquo;s <a href="http://docs.scala-lang.org/overviews/core/futures.html"><code>Future</code> monad (backed by a <code>Promise</code>)</a>, as well as the cool new <a href="https://github.com/scala/async">macro-based <code>async</code>/<code>await</code> library</a>, which greatly simplifies writing code. Our assignment, which was instructive and interesting, was to implement a baby version of Node.js in Scala, ha!</p>

<p>Then he introduced <a href="https://rxscala.github.io/"><code>RxScala</code></a>, a Scala adaptor for <a href="https://github.com/Netflix/RxJava"><code>RxJava</code></a>, which is a Java port of Microsoft&rsquo;s &ldquo;reactive extensions&rdquo; <code>Rx</code> framework. I enjoyed this unit a lot, and appreciated the great documentation available (the &ldquo;marble diagrams&rdquo; are particularly useful). One nitpick I suppose I must have with his presentation is that I&rsquo;m not sure that, for a non-theory-oriented audience, the discussions of &ldquo;duality&rdquo; were necessary. The assignment was very practically-oriented, gathering data asynchronously and displaying it and allowing user interaction. It was enjoyable and showcased the power of using a framework like Rx.</p>

<h3>Roland Kuhn</h3>

<p>Roland Kuhn covered the most complex section of the course, introducing actors by means of the <a href="http://akka.io/">Akka</a> framework.</p>

<p>The first assignment was fairly straightforward, on implemented a distributed binary tree with actors.</p>

<p>The second assignment I found quite difficult, and not only because it was crunch time at the end of December before holiday season! It was a distributed key-value store with multiple levels of possible failure. There is no way I would have successfully and correctly completed this assignment without the helpful discussions I found on the online Coursera forums. To really figure out what was going on required (for me) turning on logging in various places and writing a lot of tests using Akka&rsquo;s <a href="http://doc.akka.io/docs/akka/snapshot/scala/testing.html"><code>TestKit</code></a>. I realized eventually that my code was ugly and not entirely clean and idiomatic, but it was definitely a worthwhile learning experience on a realistic problem to solve.</p>

<h2>Conclusion</h2>

<p>I learned quite a lot from this course. It is a very practical course on &ldquo;reactive&rdquo; programming. I felt after completing this course that I was ready to use the concepts and technologies covered in real problems. I am grateful to the instructors (who were active on the forums, by the way) for sharing their theoretical and practical knowledge as a free Coursera course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toString Considered Harmful, Part 3]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/27/tostring-considered-harmful-part-3/"/>
    <updated>2013-12-27T22:03:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/27/tostring-considered-harmful-part-3</id>
    <content type="html"><![CDATA[<p>This is part 3 of a series of articles, &ldquo;<code>toString</code> considered harmful&rdquo;.</p>

<!--more-->


<h2>Languages without the <code>toString</code> problem</h2>

<p>There actually are quite a few languages that don&rsquo;t have the <code>toString</code> problem, or at least have it to a lesser degree.</p>

<h3>C</h3>

<p>There is no friendly generic conversion to a string (uh, really just a pointer to a null-terminated chunk of <code>char</code>) in C. The closest thing is using the type-unsafe <code>printf</code> family of functions, but you have to do almost all the work if you have some complicated <code>struct</code> and want to turn it into a C string.</p>

<h3>C++</h3>

<p>C++ introduced iostreams, where f you follow certain conventions and overload <code>operator&lt;&lt;</code> for every domain class of interest, you can build up decent looking strings, without using inheritance.</p>

<p>Or you could do the object-oriented thing and set up a hierarchy with a <code>ToString</code> abstract base class. But C++ does not come with everything already inheriting from an <code>Object</code>.</p>

<h3>Haskell</h3>

<p>Haskell does not force a <code>toString</code> on everything, but provides a <a href="http://www.haskell.org/tutorial/stdclasses.html"><code>Show</code> type class</a> for convenience in the standard prelude. It is easy (and convenient for debugging) to just tack on <code>deriving Show</code> and then call <code>show</code> to convert stuff to a string. This means that one can get lazy and fall into the same design traps as mentioned in the very first code example above. Again, the solution is to refuse to abuse <code>show</code>, and to use a different name instead for converting something to a string for a particular purpose.</p>

<h3>Go</h3>

<p>Go was invented at Google as a modernized C. It does not have classes, but does have <a href="http://research.swtch.com/interfaces">dynamic interfaces</a>. All that is required for a user-defined type to satisfy an interface is to implement the method <code>String()</code> returning a <code>string</code>. Basically, this makes the type implement the interface <a href="http://golang.org/pkg/fmt/#Stringer">fmt.Stringer</a>. Again, if you don&rsquo;t implement <code>String() string</code> for your type, then you will get a compile-time error when trying to treat it as a string.</p>

<p>Superficially, this sounds like Haskell type classes, but it&rsquo;s much more limited, because Go does not have generics and Go is only single dispatch. Go&rsquo;s interfaces really implement a kind of structural subtyping.</p>

<h3>Standard ML</h3>

<p><a href="http://www.standardml.org/">Standard ML</a> does not have the <code>toString</code> problem. It does, by convention, supply a <code>toString</code> function in many modules in the <a href="http://www.standardml.org/Basis/">Standard ML Basis Library</a>, such as <a href="http://www.standardml.org/Basis/integer.html">Int</a> and <a href="http://www.standardml.org/Basis/real.html">Real</a> and <a href="http://www.standardml.org/Basis/bool.html">Bool</a>, but these are just conventions and do not participate in any kind of unified conversion to string. If you want to convert anything besides a primitive type to a string, you have to write the conversion function yourself.</p>

<p>Furthermore, Standard ML, as a rather opinionated and <a href="http://mitpress.mit.edu/books/definition-standard-ml">&ldquo;purist&rdquo; language</a>, designed specifically for static simplicity, semantic minimalism, and <a href="http://mlton.org/">runtime efficiency</a>, does not believe in type classes, so there is no way to write a function that at runtime is generic over what can be turned into a string.</p>

<p>The best you can do is write something that is functorized, but then you have to apply it in a statically known context:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">signature</span> <span class="nn">TO_STRING</span> <span class="p">=</span>
</span><span class='line'>  <span class="kr">sig</span>
</span><span class='line'>    <span class="kr">type</span> <span class="kt">t</span>
</span><span class='line'>    <span class="kr">val</span> <span class="nv">toString</span> <span class="p">:</span> <span class="n">t</span> <span class="p">-&gt;</span> <span class="n">string</span>
</span><span class='line'>  <span class="kr">end</span>
</span><span class='line'>
</span><span class='line'><span class="kr">functor</span> <span class="nn">DoStuff</span><span class="p">(</span><span class="n">ToString</span> <span class="p">:</span> <span class="n">TO_STRING</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>  <span class="kr">struct</span>
</span><span class='line'>    <span class="kr">fun</span> <span class="nf">doubleString</span> <span class="p">(</span><span class="n">stuff</span><span class="p">:</span> <span class="nn">ToString</span><span class="p">.</span><span class="n">t</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>      <span class="kr">let</span>
</span><span class='line'>        <span class="kr">val</span> <span class="nv">s</span> <span class="p">=</span> <span class="nn">ToString</span><span class="p">.</span><span class="n">toString</span> <span class="n">stuff</span>
</span><span class='line'>      <span class="kr">in</span>
</span><span class='line'>        <span class="n">s</span> <span class="n">^</span> <span class="n">s</span>
</span><span class='line'>      <span class="kr">end</span>
</span><span class='line'>  <span class="kr">end</span>
</span><span class='line'>
</span><span class='line'><span class="kr">structure</span> <span class="nn">MyStuff</span> <span class="p">:</span> <span class="n">TO_STRING</span> <span class="p">=</span>
</span><span class='line'>  <span class="kr">struct</span>
</span><span class='line'>    <span class="kr">type</span> <span class="kt">t</span> <span class="p">=</span> <span class="n">int</span> <span class="n">*</span> <span class="n">bool</span>
</span><span class='line'>    <span class="kr">fun</span> <span class="nf">toString</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>      <span class="s2">&quot;(&quot;</span> <span class="n">^</span> <span class="nn">Int</span><span class="p">.</span><span class="n">toString</span> <span class="n">i</span> <span class="n">^</span> <span class="s2">&quot;, &quot;</span> <span class="n">^</span> <span class="nn">Bool</span><span class="p">.</span><span class="n">toString</span> <span class="n">b</span> <span class="n">^</span> <span class="s2">&quot;)&quot;</span>
</span><span class='line'>  <span class="kr">end</span>
</span><span class='line'>
</span><span class='line'><span class="kr">structure</span> <span class="nn">DoMyStuff</span> <span class="p">=</span> <span class="n">DoStuff</span><span class="p">(</span><span class="n">MyStuff</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="nn">DoMyStuff</span><span class="p">.</span><span class="n">doubleString</span> <span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="n">true</span><span class="p">)</span>
</span><span class='line'><span class="cm">(* result is the string &quot;(42, true)(42, true)&quot; *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the Standard ML ecosystem is so minimalist, it&rsquo;s hard to fall into the <code>toString</code> trap, because you would have to set it all up yourself.</p>

<h3>OCaml</h3>

<p>OCaml, like Standard ML, does not provide a generic <code>toString</code> out of the box, but the OCaml ecosystem is much more practically oriented.</p>

<p>There is a <a href="http://en.wikipedia.org/wiki/Camlp4">pre-processor for OCaml</a> that can be used to generate convenient printers for types, <a href="https://github.com/ocsigen/deriving"><code>deriving</code></a>. There is also an S-expression based generator, <a href="http://realworldocaml.org/v1/en/html/data-serialization-with-s-expressions.html">Sexplib</a>. But these are mechanically generated, rather than part of something generic at runtime.</p>

<p>Of course, one could also use the <a href="http://caml.inria.fr/pub/docs/manual-ocaml-4.01/objectexamples.html">object-oriented part of OCaml</a> to make a generic &ldquo;to string&rdquo; hierarchy starting with a suitable interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">class</span> <span class="k">type</span> <span class="n">convert_to_string</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">object</span>
</span><span class='line'>    <span class="k">method</span> <span class="n">to_string</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I don&rsquo;t actually know many people who use the object-oriented features of OCaml!</p>

<h2>Conclusion</h2>

<p>An annoying bug I temporarily created in my code led me to take stock of the state of <code>toString</code> design choices in various programming languages, and also consider how we can better escape fragility in our code, independent of whatever language we are using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toString Considered Harmful, Part 2]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2/"/>
    <updated>2013-12-26T22:03:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2</id>
    <content type="html"><![CDATA[<p>This is part 2 of a series of articles, &ldquo;<code>toString</code> considered harmful&rdquo;. [Part 1] introduced the problem in the context of a common design flaw present in object-oriented languages, and proposed a simple workaround.</p>

<p>In part 2, we look at advanced ways to organize &ldquo;stringable&rdquo; data, using either an object-oriented or functional style. Examples are in Scala because it equally supports either style.</p>

<!--more-->


<h2>Object-oriented vs. functional</h2>

<p>The fix presented was in <em>object-oriented</em> style, adding a method <code>toUrlString</code> to a class. The other solution is the <em>functional</em> style, leaving the <code>Id</code> class alone, and writing an external function instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">toUrlString</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Id</span><span class="o">)</span> <span class="k">=</span> <span class="n">id</span><span class="o">.</span><span class="n">toString</span>
</span></code></pre></td></tr></table></div></figure>


<p>with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">id</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;No id found!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">toUrlString</span><span class="o">(</span><span class="n">n</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are advantages and disadvantages to either solution.</p>

<h2>More advanced OO</h2>

<p>It would be very natural, given a whole set of domain classes in addition to <code>Id</code>, to want all of them to have a <code>toUrlString</code>. Then the natural thing to do is to create a mini-universe (parallel to the <code>toString</code> universe) by creating a hierarchy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">trait</span> <span class="nc">UrlString</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toUrlString</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">UrlString</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">toUrlString</span> <span class="k">=</span> <span class="n">id</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="err">...</span><span class="o">(...)</span> <span class="k">extends</span> <span class="nc">UrlString</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">toUrlString</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Advanced string interpolation with OO</h2>

<p>In fact, Scala and other languages with advanced string interpolation facilities allow yet another refactoring by making sure that what gets into a URL isn&rsquo;t just an arbitrary string in the first place!</p>

<p>Below we define a string interpolator that only operates on objects of classes that implement the trait <code>UrlString</code>, and therefore does away with an explicit call to <code>toUrlString</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">UrlHelper</span><span class="o">(</span><span class="k">val</span> <span class="n">sc</span><span class="k">:</span> <span class="kt">StringContext</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">AnyVal</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">url</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">UrlString*</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">strings</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">expressions</span> <span class="k">=</span> <span class="n">args</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">buf</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="n">next</span><span class="o">)</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">buf</span> <span class="n">append</span> <span class="n">expressions</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">toUrlString</span>
</span><span class='line'>        <span class="n">buf</span> <span class="n">append</span> <span class="n">strings</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Only ever use UrlString to create a URL. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">UrlString</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">url</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">id</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;No id found!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may or may not be overengineering.</p>

<h2>Advanced string interpolation with FP</h2>

<p>The functional approach doesn&rsquo;t like inheritance in the domain classes. We can implement it with <a href="http://en.wikipedia.org/wiki/Type_class">type classes</a> (a concept first pioneered in Haskell in the late 1980s) by means of implicits in Scala, in order to implement <code>toUrlString</code> outside of a class hierarchy but also allow it to be used in a constrained generic way. A full discussion of this is outside the scope of this post, but the basic point is that with type classes, one can write code that does <em>not</em> depend on an inheritance hierarchy. If you&rsquo;re used to monkey-patching in dynamic languages, think of it as compile-time monkey-patching.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="c1">// A type class</span>
</span><span class='line'>  <span class="k">trait</span> <span class="nc">UrlString</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toUrlString</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Wrapper class</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Implement the type class UrlString for Id</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">object</span> <span class="nc">IdToUrlString</span> <span class="k">extends</span> <span class="nc">UrlString</span><span class="o">[</span><span class="kt">Id</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">toUrlString</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Id</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">UrlHelper</span><span class="o">(</span><span class="k">val</span> <span class="n">sc</span><span class="k">:</span> <span class="kt">StringContext</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">AnyVal</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">url</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">UrlString</span><span class="o">](</span><span class="n">args</span><span class="k">:</span> <span class="kt">A*</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">strings</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">expressions</span> <span class="k">=</span> <span class="n">args</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">buf</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="n">next</span><span class="o">)</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">buf</span> <span class="n">append</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">UrlString</span><span class="o">[</span><span class="kt">A</span><span class="o">]].</span><span class="n">toUrlString</span><span class="o">(</span><span class="n">expressions</span><span class="o">.</span><span class="n">next</span><span class="o">)</span>
</span><span class='line'>        <span class="n">buf</span> <span class="n">append</span> <span class="n">strings</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Anything &quot;viewable&quot; as UrlString can be used to create a URL. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">UrlString</span><span class="o">](</span><span class="n">id</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">url</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The final string gotcha</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicity. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries such as <a href="http://spray.io/">Spray</a>.</p>

<h2>Conclusion</h2>

<p>I thought it would useful to compare an object-oriented and a functional approach to unifying data that share a domain-consistent notion of conversion to a string. Scala is a language that allows easy expression of both.</p>

<p>In part 3, we will look at languages that just don&rsquo;t have the <code>toString</code> problem at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toString Considered Harmful, Part 1]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful-part-1/"/>
    <updated>2013-12-23T23:54:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful-part-1</id>
    <content type="html"><![CDATA[<p>It is easy to rant about the problems or unexpected subtleties involving the use of <a href="http://en.wikipedia.org/wiki/String_%28computer_science%29">strings</a> in programming languages. This post, however, is not so much a rant about strings as about design and meaning, with <code>toString</code> only as an obvious example.</p>

<p>I&rsquo;ll describe a pitfall that came up in my code, and a solution, and make observations about how different programming languages address or avoid this problem.</p>

<p>This is part one of a series.</p>

<!--more-->


<h2>A bug when evolving my code</h2>

<p>My example code is in Scala, but the problem illustrated actually extends to many (most?) other currently popular object-oriented languages as well, including Java (which Scala inherited <code>Object.toString</code> from), C# (<code>Object.ToString</code> stolen from Java), Ruby (<code>Object#to_s</code>), Python (<code>str</code>, which uses <code>object.__str__</code> in case of an object). (Later in the post, I discuss languages without this specific feature.)</p>

<h3>First working code</h3>

<p>Here&rsquo;s the first version of the code, which is a simplification of logic in a real application. A name is looked up to find an ID, then the ID is used to construct a URL to submit to a Web service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Id</span> <span class="o">=</span> <span class="nc">Int</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @param name User name to look up</span>
</span><span class='line'><span class="cm">    @return ID of user</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findId</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Id</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="mi">42</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Id</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">s</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Simulate making the Web request. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">url</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">println</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">findId</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="o">))</span>
</span><span class='line'>    <span class="c1">// output: http://service.com?id=42</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, everything seems fine. This was the situation in my application when it was certain that finding an ID would succeed.</p>

<p>If you don&rsquo;t know Scala, just note that <code>s"...$id"</code> is just Scala&rsquo;s string interpolation syntax that behind the scenes calls <code>id.toString</code>.</p>

<h3>Non-working code</h3>

<p>It turned out that finding an ID could fail, so I changed <code>findId</code> to return the type <code>Option[Id]</code> instead of <code>Id</code>. To get the code to compile, I had to change the type of the parameter to <code>makeUrl</code> also:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @param name User name to look up</span>
</span><span class='line'><span class="cm">    @return Some(ID of user) if found, else None</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findId</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Id</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Some</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">None</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Oops, now this has an unintended bug!</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Id</span><span class="o">])</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">s</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this resulted in a bug (thankfully caught by my test suite that actually went over the Web to fetch stuff)! The bug was that the URL constructed was nothing resembling what I ever wanted to construct: <code>http://service.com?id=Some(42)</code> was being requested.</p>

<p>Furthermore, in the case of an ID not found, the URL constructed is <code>http://service.com?id=None</code>. How many of you have seen applications or Web sites or emails in which something was clearly missing and the text contained either an empty space or the string &ldquo;null&rdquo; or &ldquo;nullvalue&rdquo; such as</p>

<blockquote><p>Dear NULL,</p><p>You ordered NULL items.</p></blockquote>


<p>Yup, you guessed it: someone wrote crappy code like what I just showed you, and frightening thing is, <em>it could have been me</em> and <em>it could have been you</em>.</p>

<h4>What&rsquo;s the big deal?</h4>

<p>You might think, &ldquo;Big deal, you changed your code, ran your test, and immediately found the bug, so what&rsquo;s the problem?&rdquo;</p>

<p>The problem is that I have higher standards than that. I don&rsquo;t want to rely on my tests to find my bugs. In fact, the test that went over the Web to do stuff was an <em>integration test</em>, not a <em>unit test</em>. The bug only manifested itself when the actual Web request failed. And as we see in real life, many apps are not sufficiently tested to root out all possible accidental string generations.</p>

<p>So although I caught the bug quickly, I caught it far less quickly than I wanted. I didn&rsquo;t want to even construct an obviously garbage URL like <code>http://service.com?id=Some(42)</code> at all. I prefer to have the type checker catch stupid design-level bugs up front. So I was furious at myself that I wrote code that the compiler was perfectly happy with but was obviously wrong. I had gotten lazy in more ways than one, and had been punished accordingly.</p>

<h2>A symptom of bad design</h2>

<p>There were a couple of things wrong with my original code that made it not evolve well.</p>

<h3>Don&rsquo;t use <code>toString</code></h3>

<p>First, by using string interpolation at all, I was relying on the implicit <code>toString</code> method of all objects. String interpolation is an admittedly very convenient feature that I use extensively, but now I consider it rather dangerous.</p>

<p>But even if I hadn&rsquo;t used string interpolation, I would have had to build up strings myself anyway, and would have called <code>toString</code> <em>explicitly</em>, and I would have had the same problem: changing the type of something from <code>Id</code> to <code>Option[Id]</code> does not get rid of <code>toString</code>. In fact, in object-oriented languages where <code>toString</code> is defined way up at the top, <em>everything</em> has <code>toString</code>, whether you like it or not! The best you can do is override <code>toString</code>. (Actually, Scala &ldquo;helpfully&rdquo; generates a nice <code>toString</code> override for you when you use case classes, hence the output of <code>Some(42)</code>.)</p>

<p>I consider this <em>global infection</em> a flaw in object-oriented languages that impose a set of methods on all objects whether you want them or not. <code>toString</code> is hardly the worst offending method, actually, but I&rsquo;ll save my complaints about others for later.</p>

<p>First step in cleaning up the code: make <code>toString</code> explicit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Only ever use a String to create a URL. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">s</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">findId</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="o">.</span><span class="n">toString</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Later in the post, I will discuss alternatives to this explicit <code>toString</code>.)</p>

<h3>Primitive obsession</h3>

<p>Another design smell was that of using</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">type</span> <span class="kt">Id</span> <span class="o">=</span> <span class="nc">Int</span>
</span></code></pre></td></tr></table></div></figure>


<p>in the first place. This is a well-known lazy practice called <a href="http://c2.com/cgi/wiki?PrimitiveObsession">primitive obsession</a>. I know better than that.</p>

<p>The solution to primitive obsession is easy: create a new wrapper type. Hence, the original code, even before the possibly failing ID lookup, should have been</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @param name User name to look up</span>
</span><span class='line'><span class="cm">    @return ID of user</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findId</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Id</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Id</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Id</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this still <em>would not</em> have solved the <code>toString</code> problem, since the output would simply have been <code>http://service.com?id=Some(Id(42))</code> or the dreaded <code>http://service.com?id=None</code>!</p>

<h3><code>toString</code> is a problematic concept anyway</h3>

<p>The real problem is one that transcends programming language design. (Later in this post I&rsquo;ll show languages that don&rsquo;t have <code>toString</code> but still easily allow a similar problem.)</p>

<p>The real problem is that strings are used for <em>multiple</em> purposes. Some are used just for debugging, showing an internal representation of data. Some are used for &ldquo;human&rdquo; reading. In fact, many languages distinguish between these two purposes: Lisp has <a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_wr_pr.htm"><code>write</code>, <code>prin1</code>, <code>print</code>, <code>pprint</code></a>; Scheme has <a href="http://www.scheme.com/tspl3/io.html"><code>write</code> and <code>display</code></a>; Ruby has <a href="http://ruby-doc.org/core-2.0.0/Object.html"><code>to_s</code> and <code>to_str</code></a>; Python has <a href="http://docs.python.org/2/library/functions.html"><code>repr</code> and <code>str</code></a>.</p>

<p>One is often directed to override the &ldquo;human-oriented&rdquo; version of these mechanisms (implementing one&rsquo;s own special non-default format). In Java and Scala, that&rsquo;s <code>toString</code>. But this is precisely the problem. We are <em>encouraged</em> to abuse this built-in mechanism for getting a string from an object that is supposed to mean something in the <em>context of an application</em>. Yes, <code>Some(Id(42))</code> is a useful human-readable string, but it&rsquo;s not what I want to put into a URL for an ID parameter!</p>

<h4>Different names for different contexts</h4>

<p>Suppose you had a <code>Name</code> class, and it had fields such as <code>first</code> and <code>middle</code> and <code>last</code>. It&rsquo;s nonsensical to expect a single <code>toString</code> override to express all the different contexts in which you might want to get a single string from a full name. Sometimes you might want to generate <code>Franklin Chen</code>; other times, <code>Franklin Ming Chen</code>; other times, <code>Franklin M. Chen</code>; other times, <code>FMC</code>. The point is that there should really be a method for each of these. <code>toString</code> should be treated really as a debugging device.</p>

<p>Instead of piggybacking on <code>toString</code>, we should call a spade a spade, and define our own methods whose name is actually informative and tells us for what <em>purpose</em> we are asking for a string.</p>

<p>Let&rsquo;s refactor the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="c1">// Wrapper class</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Special method for turning to URL string fragment</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toUrlString</span> <span class="k">=</span> <span class="n">id</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @param name User name to look up</span>
</span><span class='line'><span class="cm">    @return Some(ID of user) if found, else None</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findId</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Id</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Some</span><span class="o">(</span><span class="nc">Id</span><span class="o">(</span><span class="mi">42</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">None</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Only ever use a String to create a URL. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">s</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Simulate making the Web request. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">url</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">println</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">findId</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="c1">// Will not compile because Option[Id] does not have toUrlString</span>
</span><span class='line'>    <span class="c1">//getUrl(makeUrl(id.toUrlString))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the code that was creating a junk URL will no longer compile: <code>id</code> is of type <code>Option[Id]</code> but that type does <em>not</em> have a <code>toUrlString</code> method. Mission accomplished!</p>

<p>To fix the code to get it compile, we handle both the case in which the ID is not found and the case in which it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Will not compile because Option[Id] does not have toUrlString</span>
</span><span class='line'><span class="c1">//getUrl(makeUrl(id.toUrlString))</span>
</span><span class='line'>
</span><span class='line'><span class="n">id</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;No id found!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="n">toUrlString</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple!</p>

<h2>The final string gotcha (to be discussed later)</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicity. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries.</p>

<p>However, at some point, data has to be turned into strings: this simply is how the Web works. It is at that point where one has to watch out. I will discuss that boundary in another post. String injection attacks are precisely a result of being sloppy about crossing that boundary.</p>

<h2>Conclusion</h2>

<p>I gave a small taste of what the <code>toString</code> problem is about, and some initial steps toward solving it through better design even if the programming language encourages us to be sloppy.</p>

<p>In part 2 of this series, I will expand on different design choices even in the situation we just examined, especially in the face of continued evolution in which there are multiple domain classes to be turned into strings.</p>

<p>Finally, there actually are quite a few languages that don&rsquo;t have this particular <code>toString</code> problem, but some have analogues to a lesser degree. Part 3 of this series will discuss the different design choices in the languages or in the standard libraries or idioms. Examples will be drawn from C, C++, Haskell, Go, Standard ML, OCaml, Rust, and JavaScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Code Walk Through Tic-tac-toe With Play]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/05/pittsburgh-scala-meetup-code-walk-through-tic-tac-toe-with-play/"/>
    <updated>2013-12-05T22:15:52-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/05/pittsburgh-scala-meetup-code-walk-through-tic-tac-toe-with-play</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met again with <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581232/">Josh walking through his code for an interactive Web tic-tac-toe program implemented with Play</a>.</p>

<p>It was a good session. I&rsquo;m finding that studying code (with the code&rsquo;s author present) is a great way to learn, to discuss design decisions and alternate possible choices that could have been made. For example, when it comes to actors, there are decisions to be made about how many actors, what state they should contain, and how to transition.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Free Online Course: A Review]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/04/mongodb-free-online-course-a-review/"/>
    <updated>2013-12-04T22:03:55-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/04/mongodb-free-online-course-a-review</id>
    <content type="html"><![CDATA[<p><img src="http://www.mongodb.com/sites/all/themes/bonsai/logo.png" title="MongoDB logo" ></p>

<p>I finally finished a two-month <a href="http://education.mongodb.com/">free online course on MongoDB</a>, given by <a href="http://www.mongodb.com/">MongoDB, Inc</a>.</p>

<p>This is a review of the specific course numbered M101J, &ldquo;MongoDB for Java Developers&rdquo;, but it should apply to all thee introductory developer courses on MongoDB in any language, because actually, I had originally signed up months earlier for their original course (in JavaScript), and the content is largely the same (I had gotten busy and dropped that course).</p>

<!--more-->


<h2>Why learn MongoDB?</h2>

<p>I had first heard of MongoDB over two years ago, at a meeting of the (now defunct) <a href="http://www.meetup.com/Pittsburgh-JavaScript-Developers/">original Pittsburgh JavaScript meetup group</a>, <a href="http://www.meetup.com/Pittsburgh-JavaScript-Developers/events/25229441/">&ldquo;In-depth look at Node.js and NoSQL&rdquo;</a>.</p>

<p>MongoDB has become very popular; as far as I can tell, this is because of extreme marketing efforts, as well as the fact that it is very easy to get started doing stuff with it, being a document-oriented NoSQL database requiring no schema.</p>

<p>I took this course in part to expose myself to some NoSQL technology and also in part because I anticipated needing to use something like it. In fact, it turns out <a href="http://ConscientiousProgrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social/">I did use it</a>, heavily, in exactly the kind of use case that works fine with it.</p>

<h2>Why did I take the Java version of the course?</h2>

<p>I took the &ldquo;M101J: MongoDB for Java Developers&rdquo; version of the course because I anticipated writing code in Scala to access MongoDB. In fact, during the course, I ended up using the official Scala driver <a href="https://github.com/mongodb/casbah">Casbah</a> when possible.</p>

<h2>Summary of the course</h2>

<p>A lot of the course actually involved using the JavaScript-based MongoDB shell, which makes sense because it is easy to explore data that way. Since everything is JSON-like, there&rsquo;s no real escaping JavaScript if you&rsquo;re working with MongoDB.</p>

<p>The video lecture/quiz/assignment format is fairly standard for MOOCs, and worked fairly well.</p>

<p>The course was more work than I expected, because it lasted so long, two months.</p>

<p>The ad hoc nature of MongoDB&rsquo;s API (including the Java-based one) tended to bother me throughout.</p>

<p>The weird CRUD syntax, shoehorning everything into a JSON representation, took some getting used to.</p>

<p>The way to specify indexes and to evaluate your guesses about whether they are actually working the way you expected was to look at funny values in JSON. I found this low-level and annoying.</p>

<p>The aggregation API seemed even weirder. Overall, everything had a loose &ldquo;dynamic&rdquo; feel to it: this is the essence of MongoDB, really. Doing things wrong made me frustrated because of the runtime errors.</p>

<p>Finally, the sections on replication and sharding were particularly problematic. The lectures kept mentioning that various defaults and APIs were a moving target. Furthermore, actual hardcoded numbers even showed up that we were supposed to use to specify policies. Wow.</p>

<h2>Conclusion</h2>

<p>The lectures and quizzes were well-designed (until the final portion of the course that seemed particularly ad hoc). The assignments were sometimes rather tricky, with not much of a hint, but offered a decent variety of realistic query formation.</p>

<p>I would recommend this course as an overview to anyone who is committed to using MongoDB to its full extent.</p>

<p>However, although I got my &ldquo;certificate&rdquo; for completing the course, and appreciate that MongoDB, Inc offers this training for free, I felt that there was a lot of ad hoc stuff going on in the evolving design of MongoDB, and embedded in the API design as well. For what I needed to know for my work, I didn&rsquo;t really need the whole course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surprised by the Go Programming Language's Treatment of Nil]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/10/31/surprised-by-the-go-programming-languages-treatment-of-nil/"/>
    <updated>2013-10-31T23:38:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/10/31/surprised-by-the-go-programming-languages-treatment-of-nil</id>
    <content type="html"><![CDATA[<p><img src="http://golang.org/doc/gopher/frontpage.png" title="Go" ></p>

<p>So I happened to see an <a href="http://tip.golang.org/doc/go1.2">announcement of Go version 1.2</a>. I saw something that disturbed me, having to do with <code>nil</code>, a <a href="http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions/">&ldquo;favorite&rdquo; topic of mine</a>.</p>

<!--more-->


<h2>What I know about Go</h2>

<p>I don&rsquo;t currently use the <a href="http://golang.org/">Go programming language</a>, although there actually is a local Pittsburgh Go programming meetup group, the <a href="http://www.meetup.com/Go-Steel-Programmers/">Go Steel Programmers</a>, whose meetings I have never attended.</p>

<p>Some months ago I did, out of curiosity (and respect for any new language that I hear about people actually using to get stuff done), work through the <a href="http://tour.golang.org/">tour of Go</a> tutorial, to learn about the Go language. I installed packages on my machine, and wrote some compiling and running programs. I know just enough that I could code in Go for some project if I wanted to.</p>

<h2><code>nil</code></h2>

<p>What caught my eye in the Go 1.2 announcement was a <a href="http://docs.google.com/document/d/14DgGJKGQeBTNJDXo3YxnlSwv7ouRqvj7BMmZw17vWV0/pub">note about changes in the semantics regarding <code>nil</code></a>.</p>

<p>For the record, I don&rsquo;t believe any new programming languages should be invented that have the <code>nil</code> construct, <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Hoare&rsquo;s &ldquo;billion dollar&rdquo; mistake</a>. I&rsquo;ve already <a href="http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/">previously given a talk</a> about why, so I won&rsquo;t repeat the arguments here.</p>

<p>But I think Russ Cox&rsquo;s note about <code>nil</code> checks speaks for itself.</p>

<p>It said that Go 1.2 tightens things up so that various uses (directly or indirectly) of <code>nil</code> will cause a <em>runtime panic rather than silently producing an unusable pointer</em>.</p>

<p>Read that again: until Go 1.2, you could get <em>silent</em> bad behavior, an <em>unusable</em> pointer. This from a language that purports to be &ldquo;statically typed&rdquo;, improve on C, and provide <a href="http://golang.org/doc/faq#unions"><em>memory safety guarantees</em></a>.</p>

<p>Before Go 1.2, a chain of code involving a <code>nil</code> could result in behavior of which <a href="http://swtch.com/~rsc/">Russ Cox</a> wrote:</p>

<blockquote><p>The current behavior is at best merely historical accident; it was definitely not thought through or discussed.</p></blockquote>


<p>There is also a note about a particular special case:</p>

<blockquote><p>(it seemed like a good idea at a time)</p></blockquote>


<p>You can read the <a href="http://docs.google.com/document/d/14DgGJKGQeBTNJDXo3YxnlSwv7ouRqvj7BMmZw17vWV0/pub">whole document about <code>nil</code></a> yourself. You will find that it is still not a formal spec, but more a rationale of various special cases and possible implementation details.</p>

<h2>C culture</h2>

<p>Go arose from C culture. It was invented by those in C culture who wanted an improvement over the known problems of C. Unfortunately, I perceive it as today&rsquo;s C, in the same way that the C invented in the 1970s was born with the problems that one could have avoided already at that very time.</p>

<h2>Conclusion</h2>

<p>The Go language continues to evolve, which is good, but I was surprised that the full ramifications of something as dangerous as rampant <code>nil</code> were not thought about up front.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Learning by Reading Josh's Code!]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/10/11/pittsburgh-scala-meetup-learning-by-reading-joshs-code/"/>
    <updated>2013-10-11T00:09:33-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/10/11/pittsburgh-scala-meetup-learning-by-reading-joshs-code</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met to <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/135567132/">learn by hacking</a>. There was a change of plan because Josh couldn&rsquo;t make it to the meeting, so instead of a presentation by him, we got a link to his GitHub repository for an implementation of an <a href="https://github.com/jsuereth/tic-tac-toe">interactive Web-based tic-tac-toe game using Play</a>.</p>

<p>Sometimes interesting things happen when plans are changed.</p>

<!--more-->


<h2>Reading Josh&rsquo;s code</h2>

<p>Since Josh wasn&rsquo;t around, we decided to study his code, and use it as the basis of discussion of Scala language features and idiomatic style, making sure that all of us understood what the code was doing. This turned out to be a surprisingly useful exercise, very participatory by everyone.</p>

<p>Justin took charge of an SBT session as we played with modifying the code and figuring out what things did. I shared some tips on using SBT in &ldquo;trigger mode&rdquo;, which some had not known about. While experimenting, we ran into interesting Scala gotchas involving <code>def</code> and <code>val</code> in classes that mix in traits. We also had useful discussions on coding style, such as point-free style and use of underscores in closures, and converting between curried and uncurried functions. My personal point of view is that I prefer to be more explicit rather than more concise, to improve clarity, but much does depend on assumptions about people&rsquo;s prior knowledge. Josh was writing this code for only himself, and the complete application was actually not meant to showcase the tic-tac-toe game logic anyway, but the use of Play.</p>

<h2>Conclusion</h2>

<p>I thought it was a really useful session in which we all helped one other get up to speed on various Scala language features or standard library APIs. We all learned something new, and we figured out Josh&rsquo;s code, and collected questions to ask him when he comes back!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenHack Pittsburgh: Learning Elixir Test-driven and Package-publishing]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing/"/>
    <updated>2013-08-26T22:09:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a long time since I went to an <a href="http://openhack.github.io/pittsburgh/">OpenHack Pittsburgh</a> meeting. The last time was <a href="http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/">five months ago</a>. On June 24, there was an <a href="http://www.meetup.com/pittsburgh-ruby/events/120200292/">OpenHack Pittsburgh</a> held at <a href="http://www.4moms.com/">4moms</a>, but I really needed to stay home and take it easy that evening, because of my busy schedule later in the week, including attending a <a href="http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/">PittJUG meeting</a> and preparing a <a href="http://ConscientiousProgrammer.com/blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module/">Pittsburgh Python talk</a>.</p>

<p><a href="http://www.meetup.com/pittsburgh-ruby/events/120201842/">This August meeting of OpenHack Pittsburgh</a> was held at <a href="http://www.modcloth.com/">ModCloth</a>, which I had never been to. It&rsquo;s in Crafton, which is a place I&rsquo;ve never been before, nearly half an hour drive from Pittsburgh. Because of worries about driving there near rush hour after work, I probably would not have signed up to attend had it not been for <a href="http://justinxreese.com/">Justin</a>, the organizer of OpenHack Pittsburgh.</p>

<p>What happened was that he asked for feedback about who was planning to work on what, and said he planned to learn some <a href="http://elixir-lang.org/">Elixir</a>, a fairly new programming language built on top of the <a href="http://www.erlang.org/">Erlang</a> runtime. Since this language had been on my list of things to look into, I decided that learning loves company, so I proposed to learn some Elixir in a test-driven way!</p>

<p>What does that mean?</p>

<p><img src="http://distilleryimage10.ak.instagram.com/1e5597280ea711e3b2db22000aeb1b88_7.jpg" title="Franklin working on laptop" ></p>

<!--more-->


<h2>How to learn a programming language</h2>

<p>I have written code in probably around fifty (50) programming languages. I&rsquo;m not kidding, and I&rsquo;m not proud, but this is simply a fact of my having done programming since 1982, thirty-one (31!!) years ago. Let&rsquo;s face it: languages come and go. I have personally sat at an IBM <a href="http://en.wikipedia.org/wiki/Keypunch">keypunch</a> machine punching out cards for my COBOL and Fortran code.</p>

<p>As with human languages, the fact is that to be truly productive in a language requires much more than learning some syntax and semantics. It requires actually writing and running and fixing code, and in the context of a realistic project.</p>

<p>I&rsquo;ve learned through trial and error that the most common ways of learning a programming language, like the most common ways of learning human languages (other than one&rsquo;s first language), are terribly inefficient and misleading, resulting in minimal competence. I mean, reading through books, typing into a REPL, submitting a single file to a compiler or interpreter, etc.</p>

<p>I feel that we should learn programming languages using a variety of approaches. Yes, the academic bottom-up semantics-based approach is critical in the long run, to avoid wasting a lot of time on pointless misunderstandings. Exploration in a REPL can be very rewarding. But I think what is often missing is the <em>biggest possible picture</em>: immediately seeing how to write a program that is integrated with a test framework, uses libraries, is exportable and publishable publicly as a library, can be submitted to a continuous integration server, is editable in a decent editor or IDE, etc.</p>

<p>Without seeing the biggest possible picture, one usually gets a horribly inaccurate picture of what it is like to program in a particular language ecosystem. (I will be writing more about this subject of pedagogy later.)</p>

<h2>My proposal</h2>

<p>The last couple of languages I have learned in recent years, I slowly came to work with in a more efficient way than in the past, because I focused on matters such as testability. In particular, as I grew to wholly adopt TDD when writing any code at all in any language, it became clear to me that the best way to learn a new language must be in a test-driven way.</p>

<p>Here&rsquo;s an analogy: I believe the best way to learn a human language is to dive into how to be able to converse in some coherent way right off the bat. <a href="http://www.fluentin3months.com/4-hour/">Tim Ferriss and others</a> have exploited this idea to <em>drive</em> the learning of what is most relevant in <a href="http://www.fourhourworkweek.com/blog/2007/11/07/how-to-learn-but-not-master-any-language-in-1-hour-plus-a-favor/">grammar</a> and <a href="http://www.fourhourworkweek.com/blog/2009/01/20/learning-language/">vocabulary</a>.</p>

<p>In the past, I learned human languages in a terrible way, taking lots of courses, but never actually getting fluent in everyday use. This is how we tend to learn &ldquo;foreign&rdquo; programming languages. My proposal is that learning a new programming language should involve getting as quickly as possible up to speed on a <em>minimum viable publishable library</em>.</p>

<p>That the software artifact should be a <em>library</em>, and not just some executable program, is vital, because it means having to adhere by whatever standards apply to real-world API design in the language ecosystem, producing something that client code can import and call.</p>

<p>That it should be <em>publishable</em> is vital because it means adhering to standards of testing, of discovery through metadata, and enabling easy use by a client.</p>

<h2>My concrete example with learning Elixir tonight</h2>

<h3>Prior background in Erlang and Elixir</h3>

<p>I went to OpenHack Pittsburgh <em>never</em> having yet read any Elixir language material, never having written Elixir code, not even &ldquo;hello, world&rdquo;. The only things I had done before tonight:</p>

<ul>
<li>I first heard of Erlang nearly two decades ago, and when I saw it, I was turned off by the Prolog-style syntax, and it didn&rsquo;t seem relevant to anything I was doing at the time, so I ignored it.</li>
<li>I intended to learn some Erlang earlier this year, but made little progress before putting it aside: I went to the free book <a href="http://learnyousomeerlang.com/">&ldquo;Learn You Some Erlang for Great Good!&rdquo;</a> and downloaded the code and <a href="https://github.com/FranklinChen/learn-you-some-erlang">got it to compile</a>, but did not proceed any further.</li>
<li>I installed Elixir on my Mac <a href="http://elixir-lang.org/getting_started/1.html">using Homebrew</a>.</li>
<li>I installed an <a href="https://github.com/elixir-lang/emacs-elixir">Emacs Elixir mode</a>.</li>
<li>I made a note of a free online book <a href="http://chimera.labs.oreilly.com/books/1234000001642">&ldquo;Etudes for Elixir&rdquo;</a> and checked out the GitHub repository, but did not look at the book or code.</li>
</ul>


<h3>Find a testing framework</h3>

<p>Upon arrival at ModCloth, getting pizza to eat, and plugging in my MacBook and connecting to the guest WiFi, the first thing I did was search for a testing framework for Elixir.</p>

<p>It&rsquo;s 2013, not 1993, so it is hard to convince me to invest any time at all in learning to operate in a language ecosystem that does not have at least a de facto standard testing framework. For every language that I currently actively use for writing serious programs, I operate with TDD. Some examples of languages and the test frameworks I currently use for them:</p>

<ul>
<li>C/C++: <a href="https://code.google.com/p/googletest/">googletest</a></li>
<li>Clojure: <a href="https://github.com/marick/Midje">Midje</a></li>
<li>Haskell: <a href="http://hspec.github.io/">HSpec</a> and <a href="http://www.haskell.org/haskellwiki/Introduction_to_QuickCheck2">QuickCheck</a></li>
<li>Java or Scala: <a href="http://specs2.org/">Specs2</a> and <a href="http://www.scalacheck.org/">ScalaCheck</a></li>
<li>JavaScript: <a href="http://pivotal.github.io/jasmine/">Jasmine</a></li>
<li>Perl: <a href="http://search.cpan.org/~mschwern/Test-Simple-0.98/lib/Test/More.pm">Test::More</a></li>
<li>Python: <a href="http://pytest.org/">pytest</a></li>
<li>Ruby: <a href="http://rspec.info/">RSpec</a></li>
<li>Racket: <a href="http://docs.racket-lang.org/rackunit/">RackUnit</a></li>
</ul>


<p>Well, first Web search hit for Elixir and unit testing was <a href="http://elixir-lang.org/getting_started/ex_unit/1.html">ExUnit</a>, so that was encouraging.</p>

<p>Justin was still stuck installing Elixir, so we started exploring Elixir together off my laptop.</p>

<h3>One test file</h3>

<p>The first thing I did after discovering ExUnit was to copy and paste the code for a sample test into Emacs and save it into a file <code>test_hello.exs</code>, see that the Elixir mode was working (with syntax highlighting), and figure out how to run the test: <code>$ elixir test_hello.exs</code>.</p>

<p>It worked!</p>

<p>Then we explored adding more tests, changing some assertions, and learning as went, by looking up the Elixir documentation. For example, Elixir uses an interesting callback mechanism for cleanly passing &ldquo;setup&rdquo; state to tests inside a single test case. Also, <code>assert</code> and <code>test</code> are <a href="http://en.wikipedia.org/wiki/Macro_%28computer_science%29#Syntactic_macros">syntactic macros</a>, enabling them to do magic to analyze expressions, hence the support of natural assertion syntax (which <a href="http://ConscientiousProgrammer.com/blog/2013/07/11/pittsburgh-ruby-lightning-talk-night/">I like a lot better than special syntax</a>).</p>

<p>After writing some failing tests involving arithmetic and making them pass, I wrote a division by zero test. I was intrigued that not only did it fail, as expected, but also the compiler warned ahead of time that an exception was going to be raised. Nice. In any case, I learned how to make an assertion of the raising of an exception. This is very important. We should always pay attention to <a href="http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/">testing the sad paths</a>.</p>

<p>We saw in the documentation for ExUnit that there was a way to mark a test case as being OK to run concurrently with others. Great! These days there is no excuse not to be able to run tests concurrently. So I wrote another test case, which I put in the same source file (for the moment), and I wanted to see for myself that concurrency was happening. I wanted to call some kind of &ldquo;sleep&rdquo; function. To do that, I did a Web search, and found that Erlang comes with <code>sleep</code> in the <code>timer</code> module. I found out how to call Erlang from Elixir, and it worked!</p>

<h3>More than one source file</h3>

<p>The next obvious step was to write a test for code that did not yet exist, but was to be written outside the test source file. For that, I had to figure out how to define a module and import it. OK, but then there&rsquo;s the question of file organization. Hmm.</p>

<p>At this point, the only reasonable thing to do (and which in retrospect should have been done first) was to find out what the &ldquo;standard&rdquo; way of organizing a project&rsquo;s source files is supposed to be, and what the standard way to build everything is.</p>

<p>A Web search quickly came up with <a href="http://elixir-lang.org/getting_started/mix/1.html">Mix</a>. Awesome, the Elixir people are serious about real software development! Mix turns out to be inspired by Clojure&rsquo;s <a href="https://github.com/technomancy/leiningen">Leiningen</a>, which of course I use to start any new Clojure project. <code>$ mix new hello</code> did the trick, creating the scaffolding for a new Elixir project.</p>

<p>I refactored our existing <code>test_hello.exs</code> file into two files (one for each test case) in the <code>test</code> directory, then wrote a module <code>hello.ex</code> into <code>lib</code>. A failed test, then making it succeed, and finally I wrote my first non-test code in Elixir!</p>

<p>Running tests is very easy once you are using Mix. Just <code>$ mix test</code> does it.</p>

<h3>Packaging for publshing</h3>

<p>At this point, I decided I wanted to create an actual Elixir package to publish.</p>

<p>So I did a Web search to find out whether there was a standard repository and how to publish to it.</p>

<p>Here we go, <a href="http://expm.co/">Expm</a>!</p>

<p>I installed the package manager, set up my user name and password, and went to work on a simple package to publish.</p>

<p>I saw that nobody had yet contributed an implementation of <a href="http://franklinchen.com/blog/2012/03/14/for-real-geeks-today-is-not-pi-day-but-half-tau-day/">tau</a>, so I quickly created a tau library with Mix, did <code>$ expm new</code> to create a <code>package.exs</code> template, filled it out, wrote an ExUnit test that passed, completed the <code>README.md</code>, and just as OpenHack Pittsburgh was officially closing for the evening, I successfully published <a href="http://expm.co/tau">my tau package</a>!</p>

<p>Actually, I accidentally screwed up the first time, forgetting to change all the fields of the template <code>package.exs</code> and ending up published <code>yourlib</code>.</p>

<p>Oh, and I committed my project in Git and pushed <a href="https://github.com/franklinchen/tau">to GitHub</a>.</p>

<h2>Some Haskell stuff</h2>

<p>Steve McCarthy of <a href="http://www.spacefinity.com/">Spacefinity</a> had announced, in the introduction at the beginning of the evening when each of us stood up to say what we planned to work on, that he wanted to do more with the <a href="http://www.haskell.org/cabal/">Cabal</a> package manager for Haskell, so I spent a little bit of time getting him going by pointing him toward a sample Haskell code repository I initially <a href="http://franklinchen.com/blog/2012/11/05/the-start-of-a-local-haskell-study-group.markdown/">set up last year when some friends were interested in getting into Haskell</a>; sadly, we&rsquo;ve all been too busy for Haskell, so I&rsquo;ve let the project rot, in the sense that my configuration file is not optimally organized and also there have been updates in the test framework world in Haskell since then.</p>

<p>Anyway, here&rsquo;s my <a href="https://github.com/FranklinChen/project-euler-haskell">&ldquo;Project Euler in Haskell&rdquo; repository</a>. I plan to get around to improving it.</p>

<h2>Thanks</h2>

<p>Thanks to ModCloth for providing the space, pizza, cookies, and WiFi!</p>

<p>A big thank-you to Justin for providing the inspiration for me to try this experiment in learning!</p>

<p>And thanks to Steve McCarthy for getting me to drag up an old Haskell project and making me think that I should soon update it to be a better example.</p>

<h2>Conclusion</h2>

<p>Tonight was the first time I ever started learning a new programming language, wrote unit tests right off the bat with proper project organization and also published a library immediately.</p>

<p>Of course, there is much more to go in actually really learning and using Elixir, but as a first step in showing that Elixir has a viable ecosystem, I think the experiment was a success. My next steps in continuing to learn Elixir would include writing tests in conjunction with a deep dive into the actual semantics of the language. There is no substitute for the latter; the alternative is dangerously making assumptions based on superficial syntactic similarity with other languages (such as Ruby).</p>

<h3>(Update of 2013-08-27)</h3>

<p>One thing I didn&rsquo;t get around to was setting up <a href="http://travis-ci.org/">Travis</a> continuous integration. I believe this should also be part of the story in getting up and running in a new programming language environment.</p>

<p>So I did a Web search and figured out how to create a suitable <code>.travis.yml</code>. I committed and pushed to GitHub, flipped the switch in my Travis account, and you can see its <a href="https://travis-ci.org/FranklinChen/tau">passing status</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Data Visualization: D3 and Only D3]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/22/pittsburgh-data-visualization-d3-and-only-d3/"/>
    <updated>2013-08-22T22:01:22-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/22/pittsburgh-data-visualization-d3-and-only-d3</id>
    <content type="html"><![CDATA[<p>Patrick gave a presentation for the <a href="http://www.meetup.com/Pittsburgh-Data-Visualization-Group/">Pittsburgh Data Visualization Meetup</a> on <a href="http://www.meetup.com/Pittsburgh-Data-Visualization-Group/events/135374702/">only D3</a>, because there was interest after the <a href="http://ConscientiousProgrammer.com/blog/2013/08/07/pittsburgh-data-visualization-d3-and-r/">previous meetup</a> for more on D3.</p>

<!--more-->


<h2>Summary</h2>

<p>Patrick started with a review of last time, on selections, data, callbacks, and transitions.</p>

<p>Then he went into the use of <a href="http://en.wikipedia.org/wiki/Heat_map">heat maps</a>.</p>

<p>Finally, he went into forces.</p>

<p>I have to confess that I got lost in the presentation because of the volume of code presented and my unfamiliarity with the API. I believe that I&rsquo;ve reached the limit of what I can passively absorb about using D3, and simply need to get down and dirty and create my own project.</p>

<p>I was also feeling really tired and on the verge of getting sick. I felt very cold in the room and did not have a jacket on me in the summer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Java User Group: Java EE 7, 8, and Beyond; or Done?]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/13/pittsburgh-java-user-group-java-ee-7-8-and-beyond/"/>
    <updated>2013-08-13T22:18:11-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/13/pittsburgh-java-user-group-java-ee-7-8-and-beyond</id>
    <content type="html"><![CDATA[<p>The Pittsburgh Java User Group has not been meeting regularly for some time now. The <a href="http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/">last meeting was almost two months ago</a>. I attended this one with the impression that it might well be my last attendance of the group, and even more, that it might be the end of the group altogether.</p>

<p>The meeting did nothing to change my intuition.</p>

<p><img src="http://ConscientiousProgrammer.com/images/pittjug-2013-08-13/group.jpg"></p>

<!--more-->


<h2>Presentation by Reza Rahman</h2>

<p>Reza Rahman of Oracle, a &ldquo;Java EE/GlassFish Evangelist&rdquo; gave the presentation. His goal was to promote the new and exciting things coming up in Java EE, and try to get community feedback into what next.</p>

<p>He gave a retrospective on how surprisingly long ago Java EE came on the scene, a decade ago, and described the evolution over the years to improve developer productivity.</p>

<p><img src="http://ConscientiousProgrammer.com/images/pittjug-2013-08-13/speaker.jpg"></p>

<p>Also it was good to see that the new APIs have improved since the old ones, including &ldquo;fluent&rdquo; APIs, the fact is that everything still seems clunky and &ldquo;old&rdquo;.</p>

<p>Furthermore, the Java community is still stuck with old stuff. He bemoaned the fact that the old J2EE is still most widely used.</p>

<p>And Java developers are still not keeping up to date with developments. He asked the audience how many had heard of WebSocket, and hardly anyone raised their hands. He asked who knew what &ldquo;hypermedia&rdquo; is, and nobody raised their hand. Wow.</p>

<p>The presentation went very long, to two hours. Near the end, he said that they wanted to know what people wanted next, but nobody really responded. He asked, &ldquo;What do we need to do in the cloud?&rdquo;</p>

<h2>Conclusion</h2>

<p>My overall impression was that I was done attending more PittJUG meetings. In any case, the main organizers have long since moved on to other stuff besides Java anyway, and gotten busy, and it has been hard to find speakers. More generally, those who attend have not seemed very excited and proactive about asking for speakers or topics to be covered.</p>

<p>I believe it&rsquo;s the end of an era. After all, I do not write any Java code any more, myself! I came to this talk about Java&rsquo;s future expecting it to be my last, and it did not disappoint.</p>

<h2>(Update of 2014-06-10)</h2>

<p>It&rsquo;s been almost a year since the last PittJUG meeting, as far as I know. So I think the group really is dead.</p>

<p>There has been talk of expanding the group to not just be about Java, but anything JVM-related (such as other languages compiling to the JVM, e.g., Scala, Clojure, JRuby). Nothing seems to have happened of that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Data Visualization: D3 and R]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/07/pittsburgh-data-visualization-d3-and-r/"/>
    <updated>2013-08-07T22:19:55-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/07/pittsburgh-data-visualization-d3-and-r</id>
    <content type="html"><![CDATA[<p>Just a week ago, the <a href="http://www.meetup.com/Pittsburgh-Data-Visualization-Group/">Pittsburgh Data Visualization Meetup</a> launched with a <a href="http://ConscientiousProgrammer.com/blog/2013/07/30/pittsburgh-data-visualization-meetup-inaugural-meet-and-greet/">&ldquo;meet and greet&rdquo; that I attended</a>. Today was <a href="http://www.meetup.com/Pittsburgh-Data-Visualization-Group/events/132375562/">our first actual presentation-based meeting</a>, with speakers giving introductions to both D3 and R.</p>

<!--more-->


<h2>Location</h2>

<p>The meeting was on the Pitt campus. Unfortunately, this meant no WiFi access, because guest WiFi requires a sponsor and is a hassle to set up. So this is not the perfect place to meet, but was available to Patrick in the summer.</p>

<p>About 15 people showed up.</p>

<h2>Patrick on D3</h2>

<p>By popular demand, Patrick gave an introduction to D3.</p>

<p>He is particularly interested in knowledge discovery in data mining. He gave an example of converting data from HTML to XML to SVG and then finally getting it into D3.</p>

<p>Although D3 is a JavaScript library, its API feels like its own domain-specific language with its own conventions, so there&rsquo;s a learning curve. Patrick gave a demo of hooking data up to D3 and then changing the data, and hooking up mouse events. He showed transitions for visualization when data changes. Apparently D3 does an efficient recalculation of what needs to happen when data changes.</p>

<p>He also showed a force-directed graph.</p>

<h2>Rihanna on R</h2>

<p>Rihanna spoke about her use of R for her work.</p>

<p>She has been using R for 13 years! She gave an overview of her work flow, which involves using a workspace and saving objects. She likes to get data from raw sources into R and use plots to look for patterns, spikes. Then she makes different plots in order to tell a story.</p>

<h2>Conclusion</h2>

<p>I found it very informative to hear about the work flows Patrick and Rihanna each adopted in order to find and report on interesting data.</p>

<p>The main drawback of this meeting was that it was very long, because of two talks crammed into one evening. Since this was just the first meeting, I suggested that shorter talks in the future would enable more time for unstructured discussion at meetings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Ruby/Python Social and Some Observations About Our Polyglot World]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social/"/>
    <updated>2013-08-02T22:17:42-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social</id>
    <content type="html"><![CDATA[<p>Programming meetups aren&rsquo;t just about presentations and coding. Abby and I joined others in meeting up for dinner for a <a href="http://www.meetup.com/pittsburgh-ruby/events/120201652/">joint Pittsburgh Ruby and Pittsburgh Python social</a> and enjoyed relaxing and socializing outdoors in Bakery Square. Although it perpetually looked like it was going to rain, it turned out we weren&rsquo;t really rained on.</p>

<!-- http://instagram.com/p/ch8quus4Kb/ -->


<p><img src="http://distilleryimage11.ak.instagram.com/31a91496fbd111e2996722000a9f18fe_7.jpg" title="Dinner outside" ></p>

<!-- https://secure.flickr.com/photos/carolnichols/9425969330/ -->




<iframe src="https://www.flickr.com/photos/carolnichols/9425969330/player/" width="75" height="75" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>It was fitting that there was a joint social for two language communities, because we live in a polyglot world.</p>

<p>Despite my original intention not to engage into any tech-related conversation, I couldn&rsquo;t help remarking on my current polyglot responsibilities at work at CMU on the METAL project!</p>

<!--more-->


<h2>Our polyglot world: Ruby, Python, Perl</h2>

<p>I mentioned having to cobble together Ruby, Python, and Perl code recently in an NLP project to process Farsi text into corpora to analyze. We used a Ruby gem <a href="https://github.com/aziz/virastar">Virastar</a> in our pipeline, a Perl script for a Farsi stemmer, <a href="http://perstem.sourceforge.net/">Perstem</a>, and a <a href="https://github.com/wfeely/farsiNLPTools">Python script for normalization</a>.</p>

<h3>(Update of 2013-12-04) C++, Scala, MongoDB</h3>

<p>The work project ended up becoming even more polyglot than I expected.</p>

<p>I also used a C++ tagger, TurboTagger from <a href="http://www.ark.cs.cmu.edu/TurboParser/">TurboParser</a>.</p>

<p>I wrote Scala to execute and monitor the pipeline, because it turned out that component bugs and timeouts (from infinite loops sometimes) had to be dealt with: the original shell script pipelines did not handle any of that at all. Also, the vast amount of data meant that parallelizing was critical. The Scala ecosystem has  turned out great for me. I didn&rsquo;t use Akka actors for this task, just futures and parallel collections.</p>

<p>I also used MongoDB because it is quite a natural fit for document-oriented storage and querying as an intermediate stage I can inspect before the final stage of conversion to Sketch Engine format. And I happened to just <a href="http://ConscientiousProgrammer.com/blog/2013/12/04/mongodb-free-online-course-a-review/">finish a free online MongoDB course</a> which has been useful. In my Scala code, I used the official Scala driver <a href="https://github.com/mongodb/casbah">Casbah</a>.</p>

<p>Why MongoDB? I needed to track the transformations, and experiment with different parameters while also fixing bugs and rerunning stuff. Because there is so much data and sometimes something crashes in the pipeline, I decided to save all intermediate results in a database in order to avoid repeating work.</p>

<p>Finally, I used Scala to generate corpora for importing into <a href="http://www.sketchengine.co.uk/">The Sketch Engine</a> for our Farsi linguistics experts to analyze. Scala&rsquo;s parser combinator library came in very useful, and I represented each stage in the pipeline as a transformation of a custom AST designed to finally serialize well to the Sketch Engine &ldquo;vert&rdquo; file format.</p>

<p>It was pretty important to work with ASTs, since we actually got text in a variety of formats, which I parsed to a common AST in order to push into the pipeline.</p>

<p>Whew!</p>

<h3>(Update of 2014-06-10)</h3>

<p>A description of some of this <a href="http://springfield.metaphor.cs.cmu.edu:8080/MetaphorViz/About.html">METAL project</a> work is in the paper <a href="http://www.lrec-conf.org/proceedings/lrec2014/pdf/596_Paper.pdf">&ldquo;The CMU METAL Farsi NLP Approach&rdquo;</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Node Meetup: Optimizing Development Workflow With Grunt]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/07/31/pittsburgh-node-meetup-optimizing-development-workflow-with-grunt/"/>
    <updated>2013-07-31T21:29:45-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/07/31/pittsburgh-node-meetup-optimizing-development-workflow-with-grunt</id>
    <content type="html"><![CDATA[<p>I am not a <a href="http://nodejs.org/">Node</a> developer. I&rsquo;ve only used Node to play around with JavaScript, not for any real work or personal projects (yet). The last time I used Node was two months ago, for a <a href="http://franklinchen.com/blog/2013/06/01/pittsburgh-tech-fest-2013-my-talk-stop-overusing-regular-expressions/">talk I gave at Pittsburgh TechFest 2013</a> in which I wrote JavaScript code running on Node, but did not actually talk about it, and only mentioned that I had written it and put it up on my <a href="https://github.com/franklinchen/talk-on-overusing-regular-expressions">GitHub repository for the talk</a>.</p>

<p>That is why it took me so long to attend my first <a href="http://www.meetup.com/Pittsburgh-Node-js/">Pittsburgh Node</a> <a href="http://www.meetup.com/Pittsburgh-Node-js/events/128439692/">meeting</a>. I was simply curious who was involved in the local Node community and what tooling they were using. The meeting was about <a href="http://gruntjs.com/">Grunt</a>, a Make-like task runner. Nate Good of ShowClix presented.</p>

<h2>Attendance</h2>

<p>There was a fairly large group of people who attended: around thirty. Node seems to be popular in town.</p>

<h2>The talk</h2>

<p>Overall, Grunt seemed like Make or Rake. You can use plugins and define your own tasks. So there seemed nothing special about it, other than it is a useful tool corresponding to similar tools for other language ecosystems.</p>

<h2>Conclusion</h2>

<p>Since I don&rsquo;t really use Node, I went to the meetup out of curiosity more than anything else. I will probably not attend again. There seemed a lot of enthusiasm though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Data Visualization Meetup: Inaugural Meet and Greet]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/07/30/pittsburgh-data-visualization-meetup-inaugural-meet-and-greet/"/>
    <updated>2013-07-30T23:42:33-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/07/30/pittsburgh-data-visualization-meetup-inaugural-meet-and-greet</id>
    <content type="html"><![CDATA[<p>There is a new <a href="http://www.meetup.com/Pittsburgh-Data-Visualization-Group/">Pittsburgh Data Visualization Meetup</a> and I attended the <a href="http://www.meetup.com/Pittsburgh-Data-Visualization-Group/events/128665542/">first meeting</a>, which was a meet and greet at <a href="http://www.fuelandfuddle.com/">Fuel &amp; Fuddle</a> in Oakland.</p>

<!--more-->


<h2>My interest in data visualization</h2>

<p>Data visualization isn&rsquo;t something I&rsquo;ve done much of, but is something I&rsquo;m interested in, both for work and for my own personal project ideas. For example, I have amassed a lot of personal data about the races I&rsquo;ve run and the chess games I&rsquo;ve played.</p>

<p>The only thing I&rsquo;ve done for visualization at work is generate static images using <a href="http://www.graphviz.org/">Graphviz</a> to display, in human-friendly form, <a href="http://en.wikipedia.org/wiki/Grammatical_relation">grammatical relations</a> that are otherwise represented using a text format; this text format is usually automatically generated, but sometimes has errors that humans have to fix. It is hard to either see or fix such errors from the text representation, so the visual display helps a lot. Unfortunately, right now our program only generates a static image, not an interactive and editable representation of each graph, so the user who sees something wrong has to edit the text and regenerate the image to verify the correction visually. Ideally we would like to make the program more interactive, but this task is not performed very often, so I had gone with the simplest possible solution.</p>

<h2>Summary of meeting</h2>

<p>This being the first meeting, we all introduced ourselves and chatted over dinner. The creator of the new meetup is Patrick Dudas, who is involved in all kinds of cool projects in collecting data (such as scraping Twitter) and visualizing it.</p>

<p>People talked about the kind of work they do and the tools they use or would like to switch to using. There was a good variety of people from different disciplines, from science to business, all with a need to create useful visualizations to analyze and report on data.</p>

<p>Libraries and languages mentioned included D3, ggplot, R, Python, and Tableau. There was particular interest in more effective use of D3 and R. Patrick promised to lead a session on D3 soon.</p>

<h2>Conclusion</h2>

<p>It was good to see a new meetup revolving around a need and a discipline, visualization, that cuts across different disciplines and programming languages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Ruby Lightning Talk Night: RVM, Business Logic With Rails, IRC, Rspec-given, Vagrant]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/07/11/pittsburgh-ruby-lightning-talk-night/"/>
    <updated>2013-07-11T20:53:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/07/11/pittsburgh-ruby-lightning-talk-night</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/pittsburgh-ruby">Pittsburgh Ruby meetup</a> held a <a href="http://www.meetup.com/pittsburgh-ruby/events/120200102">lightning talks session</a>.</p>

<p>Originally, I was not going to present anything, since I did not feel that I had anything exciting to quickly share (I have not been doing much Ruby programming lately at all other than <a href="http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions">debugging my Octopress-generated blog</a>), and don&rsquo;t like talking just to talk.</p>

<p>But at the very last minute, just half an hour before the meeting, I noticed some developments in the world of <a href="http://rspec.info/">RSpec</a> announced on Twitter by Jim Weirich, and I got excited enough that I decided to talk about his <a href="https://github.com/jimweirich/rspec-given"><code>rspec-given</code></a>, which was just released at version 3.0.0.</p>

<!--more-->


<h2>Colin, on <code>rvm_recommended_ruby</code></h2>

<p>Colin briefly talked about how he likes to automate things, and therefore, in the context of using <a href="https://rvm.io/">RVM</a>, created <a href="https://github.com/wayneeseguin/rvm/pull/1074"><code>rvm_recommended_ruby</code></a>.</p>

<h2>Jon, on business logic in pure Ruby</h2>

<p>Jon gave a short summary of his <a href="http://jonathandean.com/2013/07/business-logic-in-pure-ruby/">blog post</a> on not putting all business logic into Rails models, but instead, decoupling from <code>ActiveRecord</code> and Rails altogether. This is a theme that has risen a lot in recent years in the Rails community.</p>

<h2>Carol, on how to use IRC to get help</h2>

<p>Carol talked about how to use IRC to get help when working on projects.</p>

<h2>Me, on <code>rspec-given</code></h2>

<p>I talked about cool features in <a href="https://github.com/jimweirich/rspec-given"><code>rspec-given</code></a>.</p>

<p><code>rspec-given</code> has actually been around for a while, but I had not used in the past. I plan to use it in the future.</p>

<p>It provides <code>Given</code>, <code>When</code>, <code>Then</code>, and <code>And</code> for writing specifications.</p>

<p>Also, now there is <code>Invariant</code>, which I think is a great addition to <code>RSpec</code>, enabling an easy way to check invariants as part of every example.</p>

<p>Finally, I love the new natural assertions, the ability to write stuff like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="p">{</span> <span class="n">stack</span><span class="o">.</span><span class="n">top</span> <span class="o">==</span> <span class="ss">:second_item</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>instead of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">stack</span><span class="o">.</span><span class="n">top</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:second_item</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>while <code>RSpec</code> automatically generates useful messages on failure.</p>

<h2>Colin again, on Vagrant</h2>

<p>Since all the lightning talks were done in less than half an hour, Carol called for more volunteers to talk about something. Colin ended up impromptu talking about his use of <a href="http://www.vagrantup.com/">Vagrant</a> to create development environments.</p>

<p>There was particular interest in how to share files with the host file system. Vagrant makes this easy.</p>

<p>Vagrant is great. Use it.</p>

<h2>Ruby meets Python</h2>

<p>Carol reminded everyone that coming up is a Ruby/Python joint social.</p>

<h2>Conclusion</h2>

<p>A relatively short Pittsburgh Ruby meetup, and with a smaller crowd than some others in the past, but a fun and instructive one.</p>

<p>Don&rsquo;t forget, <a href="http://steelcityruby.org/">Steel City Ruby Conference 2013</a> is in a month! I&rsquo;m <a href="http://franklinchen.com/blog/2012/08/07/the-first-steel-city-ruby-conference-an-amazing-experience/">excited to attend again</a>.</p>
]]></content>
  </entry>
  
</feed>
