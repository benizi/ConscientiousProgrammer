<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2014-06-10T23:30:45-04:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[toString Considered Harmful, Part 3]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/27/tostring-considered-harmful-part-3/"/>
    <updated>2013-12-27T22:03:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/27/tostring-considered-harmful-part-3</id>
    <content type="html"><![CDATA[<p>This is part 3 of a series of articles, &ldquo;<code>toString</code> considered harmful&rdquo;.</p>

<!--more-->


<h2>Languages without the <code>toString</code> problem</h2>

<p>There actually are quite a few languages that don&rsquo;t have the <code>toString</code> problem, or at least have it to a lesser degree.</p>

<h3>C</h3>

<p>There is no friendly generic conversion to a string (uh, really just a pointer to a null-terminated chunk of <code>char</code>) in C. The closest thing is using the type-unsafe <code>printf</code> family of functions, but you have to do almost all the work if you have some complicated <code>struct</code> and want to turn it into a C string.</p>

<h3>C++</h3>

<p>C++ introduced iostreams, where f you follow certain conventions and overload <code>operator&lt;&lt;</code> for every domain class of interest, you can build up decent looking strings, without using inheritance.</p>

<p>Or you could do the object-oriented thing and set up a hierarchy with a <code>ToString</code> abstract base class. But C++ does not come with everything already inheriting from an <code>Object</code>.</p>

<h3>Haskell</h3>

<p>Haskell does not force a <code>toString</code> on everything, but provides a <a href="http://www.haskell.org/tutorial/stdclasses.html"><code>Show</code> type class</a> for convenience in the standard prelude. It is easy (and convenient for debugging) to just tack on <code>deriving Show</code> and then call <code>show</code> to convert stuff to a string. This means that one can get lazy and fall into the same design traps as mentioned in the very first code example above. Again, the solution is to refuse to abuse <code>show</code>, and to use a different name instead for converting something to a string for a particular purpose.</p>

<h3>Go</h3>

<p>Go was invented at Google as a modernized C. It does not have classes, but does have <a href="http://research.swtch.com/interfaces">dynamic interfaces</a>. All that is required for a user-defined type to satisfy an interface is to implement the method <code>String()</code> returning a <code>string</code>. Basically, this makes the type implement the interface <a href="http://golang.org/pkg/fmt/#Stringer">fmt.Stringer</a>. Again, if you don&rsquo;t implement <code>String() string</code> for your type, then you will get a compile-time error when trying to treat it as a string.</p>

<p>Superficially, this sounds like Haskell type classes, but it&rsquo;s much more limited, because Go does not have generics and Go is only single dispatch. Go&rsquo;s interfaces really implement a kind of structural subtyping.</p>

<h3>Standard ML</h3>

<p><a href="http://www.standardml.org/">Standard ML</a> does not have the <code>toString</code> problem. It does, by convention, supply a <code>toString</code> function in many modules in the <a href="http://www.standardml.org/Basis/">Standard ML Basis Library</a>, such as <a href="http://www.standardml.org/Basis/integer.html">Int</a> and <a href="http://www.standardml.org/Basis/real.html">Real</a> and <a href="http://www.standardml.org/Basis/bool.html">Bool</a>, but these are just conventions and do not participate in any kind of unified conversion to string. If you want to convert anything besides a primitive type to a string, you have to write the conversion function yourself.</p>

<p>Furthermore, Standard ML, as a rather opinionated and <a href="http://mitpress.mit.edu/books/definition-standard-ml">&ldquo;purist&rdquo; language</a>, designed specifically for static simplicity, semantic minimalism, and <a href="http://mlton.org/">runtime efficiency</a>, does not believe in type classes, so there is no way to write a function that at runtime is generic over what can be turned into a string.</p>

<p>The best you can do is write something that is functorized, but then you have to apply it in a statically known context:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">signature</span> <span class="nn">TO_STRING</span> <span class="p">=</span>
</span><span class='line'>  <span class="kr">sig</span>
</span><span class='line'>    <span class="kr">type</span> <span class="kt">t</span>
</span><span class='line'>    <span class="kr">val</span> <span class="nv">toString</span> <span class="p">:</span> <span class="n">t</span> <span class="p">-&gt;</span> <span class="n">string</span>
</span><span class='line'>  <span class="kr">end</span>
</span><span class='line'>
</span><span class='line'><span class="kr">functor</span> <span class="nn">DoStuff</span><span class="p">(</span><span class="n">ToString</span> <span class="p">:</span> <span class="n">TO_STRING</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>  <span class="kr">struct</span>
</span><span class='line'>    <span class="kr">fun</span> <span class="nf">doubleString</span> <span class="p">(</span><span class="n">stuff</span><span class="p">:</span> <span class="nn">ToString</span><span class="p">.</span><span class="n">t</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>      <span class="kr">let</span>
</span><span class='line'>        <span class="kr">val</span> <span class="nv">s</span> <span class="p">=</span> <span class="nn">ToString</span><span class="p">.</span><span class="n">toString</span> <span class="n">stuff</span>
</span><span class='line'>      <span class="kr">in</span>
</span><span class='line'>        <span class="n">s</span> <span class="n">^</span> <span class="n">s</span>
</span><span class='line'>      <span class="kr">end</span>
</span><span class='line'>  <span class="kr">end</span>
</span><span class='line'>
</span><span class='line'><span class="kr">structure</span> <span class="nn">MyStuff</span> <span class="p">:</span> <span class="n">TO_STRING</span> <span class="p">=</span>
</span><span class='line'>  <span class="kr">struct</span>
</span><span class='line'>    <span class="kr">type</span> <span class="kt">t</span> <span class="p">=</span> <span class="n">int</span> <span class="n">*</span> <span class="n">bool</span>
</span><span class='line'>    <span class="kr">fun</span> <span class="nf">toString</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>      <span class="s2">&quot;(&quot;</span> <span class="n">^</span> <span class="nn">Int</span><span class="p">.</span><span class="n">toString</span> <span class="n">i</span> <span class="n">^</span> <span class="s2">&quot;, &quot;</span> <span class="n">^</span> <span class="nn">Bool</span><span class="p">.</span><span class="n">toString</span> <span class="n">b</span> <span class="n">^</span> <span class="s2">&quot;)&quot;</span>
</span><span class='line'>  <span class="kr">end</span>
</span><span class='line'>
</span><span class='line'><span class="kr">structure</span> <span class="nn">DoMyStuff</span> <span class="p">=</span> <span class="n">DoStuff</span><span class="p">(</span><span class="n">MyStuff</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="nn">DoMyStuff</span><span class="p">.</span><span class="n">doubleString</span> <span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="n">true</span><span class="p">)</span>
</span><span class='line'><span class="cm">(* result is the string &quot;(42, true)(42, true)&quot; *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the Standard ML ecosystem is so minimalist, it&rsquo;s hard to fall into the <code>toString</code> trap, because you would have to set it all up yourself.</p>

<h3>OCaml</h3>

<p>OCaml, like Standard ML, does not provide a generic <code>toString</code> out of the box, but the OCaml ecosystem is much more practically oriented.</p>

<p>There is a <a href="http://en.wikipedia.org/wiki/Camlp4">pre-processor for OCaml</a> that can be used to generate convenient printers for types, <a href="https://github.com/ocsigen/deriving"><code>deriving</code></a>. There is also an S-expression based generator, <a href="http://realworldocaml.org/v1/en/html/data-serialization-with-s-expressions.html">Sexplib</a>. But these are mechanically generated, rather than part of something generic at runtime.</p>

<p>Of course, one could also use the <a href="http://caml.inria.fr/pub/docs/manual-ocaml-4.01/objectexamples.html">object-oriented part of OCaml</a> to make a generic &ldquo;to string&rdquo; hierarchy starting with a suitable interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">class</span> <span class="k">type</span> <span class="n">convert_to_string</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">object</span>
</span><span class='line'>    <span class="k">method</span> <span class="n">to_string</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I don&rsquo;t actually know many people who use the object-oriented features of OCaml!</p>

<h2>Conclusion</h2>

<p>An annoying bug I temporarily created in my code led me to take stock of the state of <code>toString</code> design choices in various programming languages, and also consider how we can better escape fragility in our code, independent of whatever language we are using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toString Considered Harmful, Part 2]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2/"/>
    <updated>2013-12-26T22:03:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2</id>
    <content type="html"><![CDATA[<p>This is part 2 of a series of articles, &ldquo;<code>toString</code> considered harmful&rdquo;. [Part 1] introduced the problem in the context of a common design flaw present in object-oriented languages, and proposed a simple workaround.</p>

<p>In part 2, we look at advanced ways to organize &ldquo;stringable&rdquo; data, using either an object-oriented or functional style. Examples are in Scala because it equally supports either style.</p>

<!--more-->


<h2>Object-oriented vs. functional</h2>

<p>The fix presented was in <em>object-oriented</em> style, adding a method <code>toUrlString</code> to a class. The other solution is the <em>functional</em> style, leaving the <code>Id</code> class alone, and writing an external function instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">toUrlString</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Id</span><span class="o">)</span> <span class="k">=</span> <span class="n">id</span><span class="o">.</span><span class="n">toString</span>
</span></code></pre></td></tr></table></div></figure>


<p>with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">id</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;No id found!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">toUrlString</span><span class="o">(</span><span class="n">n</span><span class="o">)))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are advantages and disadvantages to either solution.</p>

<h2>More advanced OO</h2>

<p>It would be very natural, given a whole set of domain classes in addition to <code>Id</code>, to want all of them to have a <code>toUrlString</code>. Then the natural thing to do is to create a mini-universe (parallel to the <code>toString</code> universe) by creating a hierarchy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">trait</span> <span class="nc">UrlString</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toUrlString</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">UrlString</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">toUrlString</span> <span class="k">=</span> <span class="n">id</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="err">...</span><span class="o">(...)</span> <span class="k">extends</span> <span class="nc">UrlString</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">toUrlString</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Advanced string interpolation with OO</h2>

<p>In fact, Scala and other languages with advanced string interpolation facilities allow yet another refactoring by making sure that what gets into a URL isn&rsquo;t just an arbitrary string in the first place!</p>

<p>Below we define a string interpolator that only operates on objects of classes that implement the trait <code>UrlString</code>, and therefore does away with an explicit call to <code>toUrlString</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">UrlHelper</span><span class="o">(</span><span class="k">val</span> <span class="n">sc</span><span class="k">:</span> <span class="kt">StringContext</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">AnyVal</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">url</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">UrlString*</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">strings</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">expressions</span> <span class="k">=</span> <span class="n">args</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">buf</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="n">next</span><span class="o">)</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">buf</span> <span class="n">append</span> <span class="n">expressions</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">toUrlString</span>
</span><span class='line'>        <span class="n">buf</span> <span class="n">append</span> <span class="n">strings</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Only ever use UrlString to create a URL. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">UrlString</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">url</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">id</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;No id found!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may or may not be overengineering.</p>

<h2>Advanced string interpolation with FP</h2>

<p>The functional approach doesn&rsquo;t like inheritance in the domain classes. We can implement it with <a href="http://en.wikipedia.org/wiki/Type_class">type classes</a> (a concept first pioneered in Haskell in the late 1980s) by means of implicits in Scala, in order to implement <code>toUrlString</code> outside of a class hierarchy but also allow it to be used in a constrained generic way. A full discussion of this is outside the scope of this post, but the basic point is that with type classes, one can write code that does <em>not</em> depend on an inheritance hierarchy. If you&rsquo;re used to monkey-patching in dynamic languages, think of it as compile-time monkey-patching.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="c1">// A type class</span>
</span><span class='line'>  <span class="k">trait</span> <span class="nc">UrlString</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toUrlString</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Wrapper class</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Implement the type class UrlString for Id</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">object</span> <span class="nc">IdToUrlString</span> <span class="k">extends</span> <span class="nc">UrlString</span><span class="o">[</span><span class="kt">Id</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">toUrlString</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Id</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">UrlHelper</span><span class="o">(</span><span class="k">val</span> <span class="n">sc</span><span class="k">:</span> <span class="kt">StringContext</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">AnyVal</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">url</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">UrlString</span><span class="o">](</span><span class="n">args</span><span class="k">:</span> <span class="kt">A*</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">strings</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">expressions</span> <span class="k">=</span> <span class="n">args</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">buf</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="n">next</span><span class="o">)</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">buf</span> <span class="n">append</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">UrlString</span><span class="o">[</span><span class="kt">A</span><span class="o">]].</span><span class="n">toUrlString</span><span class="o">(</span><span class="n">expressions</span><span class="o">.</span><span class="n">next</span><span class="o">)</span>
</span><span class='line'>        <span class="n">buf</span> <span class="n">append</span> <span class="n">strings</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Anything &quot;viewable&quot; as UrlString can be used to create a URL. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">UrlString</span><span class="o">](</span><span class="n">id</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">url</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The final string gotcha</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicity. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries such as <a href="http://spray.io/">Spray</a>.</p>

<h2>Conclusion</h2>

<p>I thought it would useful to compare an object-oriented and a functional approach to unifying data that share a domain-consistent notion of conversion to a string. Scala is a language that allows easy expression of both.</p>

<p>In part 3, we will look at languages that just don&rsquo;t have the <code>toString</code> problem at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toString Considered Harmful, Part 1]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful-part-1/"/>
    <updated>2013-12-23T23:54:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful-part-1</id>
    <content type="html"><![CDATA[<p>It is easy to rant about the problems or unexpected subtleties involving the use of <a href="http://en.wikipedia.org/wiki/String_%28computer_science%29">strings</a> in programming languages. This post, however, is not so much a rant about strings as about design and meaning, with <code>toString</code> only as an obvious example.</p>

<p>I&rsquo;ll describe a pitfall that came up in my code, and a solution, and make observations about how different programming languages address or avoid this problem.</p>

<p>This is part one of a series.</p>

<!--more-->


<h2>A bug when evolving my code</h2>

<p>My example code is in Scala, but the problem illustrated actually extends to many (most?) other currently popular object-oriented languages as well, including Java (which Scala inherited <code>Object.toString</code> from), C# (<code>Object.ToString</code> stolen from Java), Ruby (<code>Object#to_s</code>), Python (<code>str</code>, which uses <code>object.__str__</code> in case of an object). (Later in the post, I discuss languages without this specific feature.)</p>

<h3>First working code</h3>

<p>Here&rsquo;s the first version of the code, which is a simplification of logic in a real application. A name is looked up to find an ID, then the ID is used to construct a URL to submit to a Web service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Id</span> <span class="o">=</span> <span class="nc">Int</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @param name User name to look up</span>
</span><span class='line'><span class="cm">    @return ID of user</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findId</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Id</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="mi">42</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Id</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">s</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Simulate making the Web request. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">url</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">println</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">findId</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="o">))</span>
</span><span class='line'>    <span class="c1">// output: http://service.com?id=42</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, everything seems fine. This was the situation in my application when it was certain that finding an ID would succeed.</p>

<p>If you don&rsquo;t know Scala, just note that <code>s"...$id"</code> is just Scala&rsquo;s string interpolation syntax that behind the scenes calls <code>id.toString</code>.</p>

<h3>Non-working code</h3>

<p>It turned out that finding an ID could fail, so I changed <code>findId</code> to return the type <code>Option[Id]</code> instead of <code>Id</code>. To get the code to compile, I had to change the type of the parameter to <code>makeUrl</code> also:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @param name User name to look up</span>
</span><span class='line'><span class="cm">    @return Some(ID of user) if found, else None</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findId</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Id</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Some</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">None</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Oops, now this has an unintended bug!</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Id</span><span class="o">])</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">s</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this resulted in a bug (thankfully caught by my test suite that actually went over the Web to fetch stuff)! The bug was that the URL constructed was nothing resembling what I ever wanted to construct: <code>http://service.com?id=Some(42)</code> was being requested.</p>

<p>Furthermore, in the case of an ID not found, the URL constructed is <code>http://service.com?id=None</code>. How many of you have seen applications or Web sites or emails in which something was clearly missing and the text contained either an empty space or the string &ldquo;null&rdquo; or &ldquo;nullvalue&rdquo; such as</p>

<blockquote><p>Dear NULL,</p><p>You ordered NULL items.</p></blockquote>


<p>Yup, you guessed it: someone wrote crappy code like what I just showed you, and frightening thing is, <em>it could have been me</em> and <em>it could have been you</em>.</p>

<h4>What&rsquo;s the big deal?</h4>

<p>You might think, &ldquo;Big deal, you changed your code, ran your test, and immediately found the bug, so what&rsquo;s the problem?&rdquo;</p>

<p>The problem is that I have higher standards than that. I don&rsquo;t want to rely on my tests to find my bugs. In fact, the test that went over the Web to do stuff was an <em>integration test</em>, not a <em>unit test</em>. The bug only manifested itself when the actual Web request failed. And as we see in real life, many apps are not sufficiently tested to root out all possible accidental string generations.</p>

<p>So although I caught the bug quickly, I caught it far less quickly than I wanted. I didn&rsquo;t want to even construct an obviously garbage URL like <code>http://service.com?id=Some(42)</code> at all. I prefer to have the type checker catch stupid design-level bugs up front. So I was furious at myself that I wrote code that the compiler was perfectly happy with but was obviously wrong. I had gotten lazy in more ways than one, and had been punished accordingly.</p>

<h2>A symptom of bad design</h2>

<p>There were a couple of things wrong with my original code that made it not evolve well.</p>

<h3>Don&rsquo;t use <code>toString</code></h3>

<p>First, by using string interpolation at all, I was relying on the implicit <code>toString</code> method of all objects. String interpolation is an admittedly very convenient feature that I use extensively, but now I consider it rather dangerous.</p>

<p>But even if I hadn&rsquo;t used string interpolation, I would have had to build up strings myself anyway, and would have called <code>toString</code> <em>explicitly</em>, and I would have had the same problem: changing the type of something from <code>Id</code> to <code>Option[Id]</code> does not get rid of <code>toString</code>. In fact, in object-oriented languages where <code>toString</code> is defined way up at the top, <em>everything</em> has <code>toString</code>, whether you like it or not! The best you can do is override <code>toString</code>. (Actually, Scala &ldquo;helpfully&rdquo; generates a nice <code>toString</code> override for you when you use case classes, hence the output of <code>Some(42)</code>.)</p>

<p>I consider this <em>global infection</em> a flaw in object-oriented languages that impose a set of methods on all objects whether you want them or not. <code>toString</code> is hardly the worst offending method, actually, but I&rsquo;ll save my complaints about others for later.</p>

<p>First step in cleaning up the code: make <code>toString</code> explicit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="cm">/** Only ever use a String to create a URL. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">s</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">findId</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="o">.</span><span class="n">toString</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Later in the post, I will discuss alternatives to this explicit <code>toString</code>.)</p>

<h3>Primitive obsession</h3>

<p>Another design smell was that of using</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">type</span> <span class="kt">Id</span> <span class="o">=</span> <span class="nc">Int</span>
</span></code></pre></td></tr></table></div></figure>


<p>in the first place. This is a well-known lazy practice called <a href="http://c2.com/cgi/wiki?PrimitiveObsession">primitive obsession</a>. I know better than that.</p>

<p>The solution to primitive obsession is easy: create a new wrapper type. Hence, the original code, even before the possibly failing ID lookup, should have been</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @param name User name to look up</span>
</span><span class='line'><span class="cm">    @return ID of user</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findId</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Id</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Id</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Id</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this still <em>would not</em> have solved the <code>toString</code> problem, since the output would simply have been <code>http://service.com?id=Some(Id(42))</code> or the dreaded <code>http://service.com?id=None</code>!</p>

<h3><code>toString</code> is a problematic concept anyway</h3>

<p>The real problem is one that transcends programming language design. (Later in this post I&rsquo;ll show languages that don&rsquo;t have <code>toString</code> but still easily allow a similar problem.)</p>

<p>The real problem is that strings are used for <em>multiple</em> purposes. Some are used just for debugging, showing an internal representation of data. Some are used for &ldquo;human&rdquo; reading. In fact, many languages distinguish between these two purposes: Lisp has <a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_wr_pr.htm"><code>write</code>, <code>prin1</code>, <code>print</code>, <code>pprint</code></a>; Scheme has <a href="http://www.scheme.com/tspl3/io.html"><code>write</code> and <code>display</code></a>; Ruby has <a href="http://ruby-doc.org/core-2.0.0/Object.html"><code>to_s</code> and <code>to_str</code></a>; Python has <a href="http://docs.python.org/2/library/functions.html"><code>repr</code> and <code>str</code></a>.</p>

<p>One is often directed to override the &ldquo;human-oriented&rdquo; version of these mechanisms (implementing one&rsquo;s own special non-default format). In Java and Scala, that&rsquo;s <code>toString</code>. But this is precisely the problem. We are <em>encouraged</em> to abuse this built-in mechanism for getting a string from an object that is supposed to mean something in the <em>context of an application</em>. Yes, <code>Some(Id(42))</code> is a useful human-readable string, but it&rsquo;s not what I want to put into a URL for an ID parameter!</p>

<h4>Different names for different contexts</h4>

<p>Suppose you had a <code>Name</code> class, and it had fields such as <code>first</code> and <code>middle</code> and <code>last</code>. It&rsquo;s nonsensical to expect a single <code>toString</code> override to express all the different contexts in which you might want to get a single string from a full name. Sometimes you might want to generate <code>Franklin Chen</code>; other times, <code>Franklin Ming Chen</code>; other times, <code>Franklin M. Chen</code>; other times, <code>FMC</code>. The point is that there should really be a method for each of these. <code>toString</code> should be treated really as a debugging device.</p>

<p>Instead of piggybacking on <code>toString</code>, we should call a spade a spade, and define our own methods whose name is actually informative and tells us for what <em>purpose</em> we are asking for a string.</p>

<p>Let&rsquo;s refactor the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="c1">// Wrapper class</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Id</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Special method for turning to URL string fragment</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">toUrlString</span> <span class="k">=</span> <span class="n">id</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @param name User name to look up</span>
</span><span class='line'><span class="cm">    @return Some(ID of user) if found, else None</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">findId</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Id</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Some</span><span class="o">(</span><span class="nc">Id</span><span class="o">(</span><span class="mi">42</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">None</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Only ever use a String to create a URL. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">makeUrl</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">s</span><span class="s">&quot;http://service.com?id=$id&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** Simulate making the Web request. */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">url</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">println</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">findId</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="c1">// Will not compile because Option[Id] does not have toUrlString</span>
</span><span class='line'>    <span class="c1">//getUrl(makeUrl(id.toUrlString))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the code that was creating a junk URL will no longer compile: <code>id</code> is of type <code>Option[Id]</code> but that type does <em>not</em> have a <code>toUrlString</code> method. Mission accomplished!</p>

<p>To fix the code to get it compile, we handle both the case in which the ID is not found and the case in which it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Will not compile because Option[Id] does not have toUrlString</span>
</span><span class='line'><span class="c1">//getUrl(makeUrl(id.toUrlString))</span>
</span><span class='line'>
</span><span class='line'><span class="n">id</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;No id found!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">getUrl</span><span class="o">(</span><span class="n">makeUrl</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="n">toUrlString</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple!</p>

<h2>The final string gotcha (to be discussed later)</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicity. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries.</p>

<p>However, at some point, data has to be turned into strings: this simply is how the Web works. It is at that point where one has to watch out. I will discuss that boundary in another post. String injection attacks are precisely a result of being sloppy about crossing that boundary.</p>

<h2>Conclusion</h2>

<p>I gave a small taste of what the <code>toString</code> problem is about, and some initial steps toward solving it through better design even if the programming language encourages us to be sloppy.</p>

<p>In part 2 of this series, I will expand on different design choices even in the situation we just examined, especially in the face of continued evolution in which there are multiple domain classes to be turned into strings.</p>

<p>Finally, there actually are quite a few languages that don&rsquo;t have this particular <code>toString</code> problem, but some have analogues to a lesser degree. Part 3 of this series will discuss the different design choices in the languages or in the standard libraries or idioms. Examples will be drawn from C, C++, Haskell, Go, Standard ML, OCaml, Rust, and JavaScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Free Online Course: A Review]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/04/mongodb-free-online-course-a-review/"/>
    <updated>2013-12-04T22:03:55-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/04/mongodb-free-online-course-a-review</id>
    <content type="html"><![CDATA[<p><img src="http://www.mongodb.com/sites/all/themes/bonsai/logo.png" title="MongoDB logo" ></p>

<p>I finally finished a two-month <a href="http://education.mongodb.com/">free online course on MongoDB</a>, given by <a href="http://www.mongodb.com/">MongoDB, Inc</a>.</p>

<p>This is a review of the specific course numbered M101J, &ldquo;MongoDB for Java Developers&rdquo;, but it should apply to all thee introductory developer courses on MongoDB in any language, because actually, I had originally signed up months earlier for their original course (in JavaScript), and the content is largely the same (I had gotten busy and dropped that course).</p>

<!--more-->


<h2>Why learn MongoDB?</h2>

<p>I had first heard of MongoDB over two years ago, at a meeting of the (now defunct) <a href="http://www.meetup.com/Pittsburgh-JavaScript-Developers/">original Pittsburgh JavaScript meetup group</a>, <a href="http://www.meetup.com/Pittsburgh-JavaScript-Developers/events/25229441/">&ldquo;In-depth look at Node.js and NoSQL&rdquo;</a>.</p>

<p>MongoDB has become very popular; as far as I can tell, this is because of extreme marketing efforts, as well as the fact that it is very easy to get started doing stuff with it, being a document-oriented NoSQL database requiring no schema.</p>

<p>I took this course in part to expose myself to some NoSQL technology and also in part because I anticipated needing to use something like it. In fact, it turns out <a href="http://ConscientiousProgrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social/">I did use it</a>, heavily, in exactly the kind of use case that works fine with it.</p>

<h2>Why did I take the Java version of the course?</h2>

<p>I took the &ldquo;M101J: MongoDB for Java Developers&rdquo; version of the course because I anticipated writing code in Scala to access MongoDB. In fact, during the course, I ended up using the official Scala driver <a href="https://github.com/mongodb/casbah">Casbah</a> when possible.</p>

<h2>Summary of the course</h2>

<p>A lot of the course actually involved using the JavaScript-based MongoDB shell, which makes sense because it is easy to explore data that way. Since everything is JSON-like, there&rsquo;s no real escaping JavaScript if you&rsquo;re working with MongoDB.</p>

<p>The video lecture/quiz/assignment format is fairly standard for MOOCs, and worked fairly well.</p>

<p>The course was more work than I expected, because it lasted so long, two months.</p>

<p>The ad hoc nature of MongoDB&rsquo;s API (including the Java-based one) tended to bother me throughout.</p>

<p>The weird CRUD syntax, shoehorning everything into a JSON representation, took some getting used to.</p>

<p>The way to specify indexes and to evaluate your guesses about whether they are actually working the way you expected was to look at funny values in JSON. I found this low-level and annoying.</p>

<p>The aggregation API seemed even weirder. Overall, everything had a loose &ldquo;dynamic&rdquo; feel to it: this is the essence of MongoDB, really. Doing things wrong made me frustrated because of the runtime errors.</p>

<p>Finally, the sections on replication and sharding were particularly problematic. The lectures kept mentioning that various defaults and APIs were a moving target. Furthermore, actual hardcoded numbers even showed up that we were supposed to use to specify policies. Wow.</p>

<h2>Conclusion</h2>

<p>The lectures and quizzes were well-designed (until the final portion of the course that seemed particularly ad hoc). The assignments were sometimes rather tricky, with not much of a hint, but offered a decent variety of realistic query formation.</p>

<p>I would recommend this course as an overview to anyone who is committed to using MongoDB to its full extent.</p>

<p>However, although I got my &ldquo;certificate&rdquo; for completing the course, and appreciate that MongoDB, Inc offers this training for free, I felt that there was a lot of ad hoc stuff going on in the evolving design of MongoDB, and embedded in the API design as well. For what I needed to know for my work, I didn&rsquo;t really need the whole course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surprised by the Go Programming Language's Treatment of Nil]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/10/31/surprised-by-the-go-programming-languages-treatment-of-nil/"/>
    <updated>2013-10-31T23:38:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/10/31/surprised-by-the-go-programming-languages-treatment-of-nil</id>
    <content type="html"><![CDATA[<p><img src="http://golang.org/doc/gopher/frontpage.png" title="Go" ></p>

<p>So I happened to see an <a href="http://tip.golang.org/doc/go1.2">announcement of Go version 1.2</a>. I saw something that disturbed me, having to do with <code>nil</code>, a <a href="http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions/">&ldquo;favorite&rdquo; topic of mine</a>.</p>

<!--more-->


<h2>What I know about Go</h2>

<p>I don&rsquo;t currently use the <a href="http://golang.org/">Go programming language</a>, although there actually is a local Pittsburgh Go programming meetup group, the <a href="http://www.meetup.com/Go-Steel-Programmers/">Go Steel Programmers</a>, whose meetings I have never attended.</p>

<p>Some months ago I did, out of curiosity (and respect for any new language that I hear about people actually using to get stuff done), work through the <a href="http://tour.golang.org/">tour of Go</a> tutorial, to learn about the Go language. I installed packages on my machine, and wrote some compiling and running programs. I know just enough that I could code in Go for some project if I wanted to.</p>

<h2><code>nil</code></h2>

<p>What caught my eye in the Go 1.2 announcement was a <a href="http://docs.google.com/document/d/14DgGJKGQeBTNJDXo3YxnlSwv7ouRqvj7BMmZw17vWV0/pub">note about changes in the semantics regarding <code>nil</code></a>.</p>

<p>For the record, I don&rsquo;t believe any new programming languages should be invented that have the <code>nil</code> construct, <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Hoare&rsquo;s &ldquo;billion dollar&rdquo; mistake</a>. I&rsquo;ve already <a href="http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/">previously given a talk</a> about why, so I won&rsquo;t repeat the arguments here.</p>

<p>But I think Russ Cox&rsquo;s note about <code>nil</code> checks speaks for itself.</p>

<p>It said that Go 1.2 tightens things up so that various uses (directly or indirectly) of <code>nil</code> will cause a <em>runtime panic rather than silently producing an unusable pointer</em>.</p>

<p>Read that again: until Go 1.2, you could get <em>silent</em> bad behavior, an <em>unusable</em> pointer. This from a language that purports to be &ldquo;statically typed&rdquo;, improve on C, and provide <a href="http://golang.org/doc/faq#unions"><em>memory safety guarantees</em></a>.</p>

<p>Before Go 1.2, a chain of code involving a <code>nil</code> could result in behavior of which <a href="http://swtch.com/~rsc/">Russ Cox</a> wrote:</p>

<blockquote><p>The current behavior is at best merely historical accident; it was definitely not thought through or discussed.</p></blockquote>


<p>There is also a note about a particular special case:</p>

<blockquote><p>(it seemed like a good idea at a time)</p></blockquote>


<p>You can read the <a href="http://docs.google.com/document/d/14DgGJKGQeBTNJDXo3YxnlSwv7ouRqvj7BMmZw17vWV0/pub">whole document about <code>nil</code></a> yourself. You will find that it is still not a formal spec, but more a rationale of various special cases and possible implementation details.</p>

<h2>C culture</h2>

<p>Go arose from C culture. It was invented by those in C culture who wanted an improvement over the known problems of C. Unfortunately, I perceive it as today&rsquo;s C, in the same way that the C invented in the 1970s was born with the problems that one could have avoided already at that very time.</p>

<h2>Conclusion</h2>

<p>The Go language continues to evolve, which is good, but I was surprised that the full ramifications of something as dangerous as rampant <code>nil</code> were not thought about up front.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenHack Pittsburgh: Learning Elixir Test-driven and Package-publishing]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing/"/>
    <updated>2013-08-26T22:09:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a long time since I went to an <a href="http://openhack.github.io/pittsburgh/">OpenHack Pittsburgh</a> meeting. The last time was <a href="http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/">five months ago</a>. On June 24, there was an <a href="http://www.meetup.com/pittsburgh-ruby/events/120200292/">OpenHack Pittsburgh</a> held at <a href="http://www.4moms.com/">4moms</a>, but I really needed to stay home and take it easy that evening, because of my busy schedule later in the week, including attending a <a href="http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/">PittJUG meeting</a> and preparing a <a href="http://ConscientiousProgrammer.com/blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module/">Pittsburgh Python talk</a>.</p>

<p><a href="http://www.meetup.com/pittsburgh-ruby/events/120201842/">This August meeting of OpenHack Pittsburgh</a> was held at <a href="http://www.modcloth.com/">ModCloth</a>, which I had never been to. It&rsquo;s in Crafton, which is a place I&rsquo;ve never been before, nearly half an hour drive from Pittsburgh. Because of worries about driving there near rush hour after work, I probably would not have signed up to attend had it not been for <a href="http://justinxreese.com/">Justin</a>, the organizer of OpenHack Pittsburgh.</p>

<p>What happened was that he asked for feedback about who was planning to work on what, and said he planned to learn some <a href="http://elixir-lang.org/">Elixir</a>, a fairly new programming language built on top of the <a href="http://www.erlang.org/">Erlang</a> runtime. Since this language had been on my list of things to look into, I decided that learning loves company, so I proposed to learn some Elixir in a test-driven way!</p>

<p>What does that mean?</p>

<p><img src="http://distilleryimage10.ak.instagram.com/1e5597280ea711e3b2db22000aeb1b88_7.jpg" title="Franklin working on laptop" ></p>

<!--more-->


<h2>How to learn a programming language</h2>

<p>I have written code in probably around fifty (50) programming languages. I&rsquo;m not kidding, and I&rsquo;m not proud, but this is simply a fact of my having done programming since 1982, thirty-one (31!!) years ago. Let&rsquo;s face it: languages come and go. I have personally sat at an IBM <a href="http://en.wikipedia.org/wiki/Keypunch">keypunch</a> machine punching out cards for my COBOL and Fortran code.</p>

<p>As with human languages, the fact is that to be truly productive in a language requires much more than learning some syntax and semantics. It requires actually writing and running and fixing code, and in the context of a realistic project.</p>

<p>I&rsquo;ve learned through trial and error that the most common ways of learning a programming language, like the most common ways of learning human languages (other than one&rsquo;s first language), are terribly inefficient and misleading, resulting in minimal competence. I mean, reading through books, typing into a REPL, submitting a single file to a compiler or interpreter, etc.</p>

<p>I feel that we should learn programming languages using a variety of approaches. Yes, the academic bottom-up semantics-based approach is critical in the long run, to avoid wasting a lot of time on pointless misunderstandings. Exploration in a REPL can be very rewarding. But I think what is often missing is the <em>biggest possible picture</em>: immediately seeing how to write a program that is integrated with a test framework, uses libraries, is exportable and publishable publicly as a library, can be submitted to a continuous integration server, is editable in a decent editor or IDE, etc.</p>

<p>Without seeing the biggest possible picture, one usually gets a horribly inaccurate picture of what it is like to program in a particular language ecosystem. (I will be writing more about this subject of pedagogy later.)</p>

<h2>My proposal</h2>

<p>The last couple of languages I have learned in recent years, I slowly came to work with in a more efficient way than in the past, because I focused on matters such as testability. In particular, as I grew to wholly adopt TDD when writing any code at all in any language, it became clear to me that the best way to learn a new language must be in a test-driven way.</p>

<p>Here&rsquo;s an analogy: I believe the best way to learn a human language is to dive into how to be able to converse in some coherent way right off the bat. <a href="http://www.fluentin3months.com/4-hour/">Tim Ferriss and others</a> have exploited this idea to <em>drive</em> the learning of what is most relevant in <a href="http://www.fourhourworkweek.com/blog/2007/11/07/how-to-learn-but-not-master-any-language-in-1-hour-plus-a-favor/">grammar</a> and <a href="http://www.fourhourworkweek.com/blog/2009/01/20/learning-language/">vocabulary</a>.</p>

<p>In the past, I learned human languages in a terrible way, taking lots of courses, but never actually getting fluent in everyday use. This is how we tend to learn &ldquo;foreign&rdquo; programming languages. My proposal is that learning a new programming language should involve getting as quickly as possible up to speed on a <em>minimum viable publishable library</em>.</p>

<p>That the software artifact should be a <em>library</em>, and not just some executable program, is vital, because it means having to adhere by whatever standards apply to real-world API design in the language ecosystem, producing something that client code can import and call.</p>

<p>That it should be <em>publishable</em> is vital because it means adhering to standards of testing, of discovery through metadata, and enabling easy use by a client.</p>

<h2>My concrete example with learning Elixir tonight</h2>

<h3>Prior background in Erlang and Elixir</h3>

<p>I went to OpenHack Pittsburgh <em>never</em> having yet read any Elixir language material, never having written Elixir code, not even &ldquo;hello, world&rdquo;. The only things I had done before tonight:</p>

<ul>
<li>I first heard of Erlang nearly two decades ago, and when I saw it, I was turned off by the Prolog-style syntax, and it didn&rsquo;t seem relevant to anything I was doing at the time, so I ignored it.</li>
<li>I intended to learn some Erlang earlier this year, but made little progress before putting it aside: I went to the free book <a href="http://learnyousomeerlang.com/">&ldquo;Learn You Some Erlang for Great Good!&rdquo;</a> and downloaded the code and <a href="https://github.com/FranklinChen/learn-you-some-erlang">got it to compile</a>, but did not proceed any further.</li>
<li>I installed Elixir on my Mac <a href="http://elixir-lang.org/getting_started/1.html">using Homebrew</a>.</li>
<li>I installed an <a href="https://github.com/elixir-lang/emacs-elixir">Emacs Elixir mode</a>.</li>
<li>I made a note of a free online book <a href="http://chimera.labs.oreilly.com/books/1234000001642">&ldquo;Etudes for Elixir&rdquo;</a> and checked out the GitHub repository, but did not look at the book or code.</li>
</ul>


<h3>Find a testing framework</h3>

<p>Upon arrival at ModCloth, getting pizza to eat, and plugging in my MacBook and connecting to the guest WiFi, the first thing I did was search for a testing framework for Elixir.</p>

<p>It&rsquo;s 2013, not 1993, so it is hard to convince me to invest any time at all in learning to operate in a language ecosystem that does not have at least a de facto standard testing framework. For every language that I currently actively use for writing serious programs, I operate with TDD. Some examples of languages and the test frameworks I currently use for them:</p>

<ul>
<li>C/C++: <a href="https://code.google.com/p/googletest/">googletest</a></li>
<li>Clojure: <a href="https://github.com/marick/Midje">Midje</a></li>
<li>Haskell: <a href="http://hspec.github.io/">HSpec</a> and <a href="http://www.haskell.org/haskellwiki/Introduction_to_QuickCheck2">QuickCheck</a></li>
<li>Java or Scala: <a href="http://specs2.org/">Specs2</a> and <a href="http://www.scalacheck.org/">ScalaCheck</a></li>
<li>JavaScript: <a href="http://pivotal.github.io/jasmine/">Jasmine</a></li>
<li>Perl: <a href="http://search.cpan.org/~mschwern/Test-Simple-0.98/lib/Test/More.pm">Test::More</a></li>
<li>Python: <a href="http://pytest.org/">pytest</a></li>
<li>Ruby: <a href="http://rspec.info/">RSpec</a></li>
<li>Racket: <a href="http://docs.racket-lang.org/rackunit/">RackUnit</a></li>
</ul>


<p>Well, first Web search hit for Elixir and unit testing was <a href="http://elixir-lang.org/getting_started/ex_unit/1.html">ExUnit</a>, so that was encouraging.</p>

<p>Justin was still stuck installing Elixir, so we started exploring Elixir together off my laptop.</p>

<h3>One test file</h3>

<p>The first thing I did after discovering ExUnit was to copy and paste the code for a sample test into Emacs and save it into a file <code>test_hello.exs</code>, see that the Elixir mode was working (with syntax highlighting), and figure out how to run the test: <code>$ elixir test_hello.exs</code>.</p>

<p>It worked!</p>

<p>Then we explored adding more tests, changing some assertions, and learning as went, by looking up the Elixir documentation. For example, Elixir uses an interesting callback mechanism for cleanly passing &ldquo;setup&rdquo; state to tests inside a single test case. Also, <code>assert</code> and <code>test</code> are <a href="http://en.wikipedia.org/wiki/Macro_%28computer_science%29#Syntactic_macros">syntactic macros</a>, enabling them to do magic to analyze expressions, hence the support of natural assertion syntax (which <a href="http://ConscientiousProgrammer.com/blog/2013/07/11/pittsburgh-ruby-lightning-talk-night/">I like a lot better than special syntax</a>).</p>

<p>After writing some failing tests involving arithmetic and making them pass, I wrote a division by zero test. I was intrigued that not only did it fail, as expected, but also the compiler warned ahead of time that an exception was going to be raised. Nice. In any case, I learned how to make an assertion of the raising of an exception. This is very important. We should always pay attention to <a href="http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/">testing the sad paths</a>.</p>

<p>We saw in the documentation for ExUnit that there was a way to mark a test case as being OK to run concurrently with others. Great! These days there is no excuse not to be able to run tests concurrently. So I wrote another test case, which I put in the same source file (for the moment), and I wanted to see for myself that concurrency was happening. I wanted to call some kind of &ldquo;sleep&rdquo; function. To do that, I did a Web search, and found that Erlang comes with <code>sleep</code> in the <code>timer</code> module. I found out how to call Erlang from Elixir, and it worked!</p>

<h3>More than one source file</h3>

<p>The next obvious step was to write a test for code that did not yet exist, but was to be written outside the test source file. For that, I had to figure out how to define a module and import it. OK, but then there&rsquo;s the question of file organization. Hmm.</p>

<p>At this point, the only reasonable thing to do (and which in retrospect should have been done first) was to find out what the &ldquo;standard&rdquo; way of organizing a project&rsquo;s source files is supposed to be, and what the standard way to build everything is.</p>

<p>A Web search quickly came up with <a href="http://elixir-lang.org/getting_started/mix/1.html">Mix</a>. Awesome, the Elixir people are serious about real software development! Mix turns out to be inspired by Clojure&rsquo;s <a href="https://github.com/technomancy/leiningen">Leiningen</a>, which of course I use to start any new Clojure project. <code>$ mix new hello</code> did the trick, creating the scaffolding for a new Elixir project.</p>

<p>I refactored our existing <code>test_hello.exs</code> file into two files (one for each test case) in the <code>test</code> directory, then wrote a module <code>hello.ex</code> into <code>lib</code>. A failed test, then making it succeed, and finally I wrote my first non-test code in Elixir!</p>

<p>Running tests is very easy once you are using Mix. Just <code>$ mix test</code> does it.</p>

<h3>Packaging for publshing</h3>

<p>At this point, I decided I wanted to create an actual Elixir package to publish.</p>

<p>So I did a Web search to find out whether there was a standard repository and how to publish to it.</p>

<p>Here we go, <a href="http://expm.co/">Expm</a>!</p>

<p>I installed the package manager, set up my user name and password, and went to work on a simple package to publish.</p>

<p>I saw that nobody had yet contributed an implementation of <a href="http://franklinchen.com/blog/2012/03/14/for-real-geeks-today-is-not-pi-day-but-half-tau-day/">tau</a>, so I quickly created a tau library with Mix, did <code>$ expm new</code> to create a <code>package.exs</code> template, filled it out, wrote an ExUnit test that passed, completed the <code>README.md</code>, and just as OpenHack Pittsburgh was officially closing for the evening, I successfully published <a href="http://expm.co/tau">my tau package</a>!</p>

<p>Actually, I accidentally screwed up the first time, forgetting to change all the fields of the template <code>package.exs</code> and ending up published <code>yourlib</code>.</p>

<p>Oh, and I committed my project in Git and pushed <a href="https://github.com/franklinchen/tau">to GitHub</a>.</p>

<h2>Some Haskell stuff</h2>

<p>Steve McCarthy of <a href="http://www.spacefinity.com/">Spacefinity</a> had announced, in the introduction at the beginning of the evening when each of us stood up to say what we planned to work on, that he wanted to do more with the <a href="http://www.haskell.org/cabal/">Cabal</a> package manager for Haskell, so I spent a little bit of time getting him going by pointing him toward a sample Haskell code repository I initially <a href="http://franklinchen.com/blog/2012/11/05/the-start-of-a-local-haskell-study-group.markdown/">set up last year when some friends were interested in getting into Haskell</a>; sadly, we&rsquo;ve all been too busy for Haskell, so I&rsquo;ve let the project rot, in the sense that my configuration file is not optimally organized and also there have been updates in the test framework world in Haskell since then.</p>

<p>Anyway, here&rsquo;s my <a href="https://github.com/FranklinChen/project-euler-haskell">&ldquo;Project Euler in Haskell&rdquo; repository</a>. I plan to get around to improving it.</p>

<h2>Thanks</h2>

<p>Thanks to ModCloth for providing the space, pizza, cookies, and WiFi!</p>

<p>A big thank-you to Justin for providing the inspiration for me to try this experiment in learning!</p>

<p>And thanks to Steve McCarthy for getting me to drag up an old Haskell project and making me think that I should soon update it to be a better example.</p>

<h2>Conclusion</h2>

<p>Tonight was the first time I ever started learning a new programming language, wrote unit tests right off the bat with proper project organization and also published a library immediately.</p>

<p>Of course, there is much more to go in actually really learning and using Elixir, but as a first step in showing that Elixir has a viable ecosystem, I think the experiment was a success. My next steps in continuing to learn Elixir would include writing tests in conjunction with a deep dive into the actual semantics of the language. There is no substitute for the latter; the alternative is dangerously making assumptions based on superficial syntactic similarity with other languages (such as Ruby).</p>

<h3>(Update of 2013-08-27)</h3>

<p>One thing I didn&rsquo;t get around to was setting up <a href="http://travis-ci.org/">Travis</a> continuous integration. I believe this should also be part of the story in getting up and running in a new programming language environment.</p>

<p>So I did a Web search and figured out how to create a suitable <code>.travis.yml</code>. I committed and pushed to GitHub, flipped the switch in my Travis account, and you can see its <a href="https://travis-ci.org/FranklinChen/tau">passing status</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Java User Group: Java EE 7, 8, and Beyond; or Done?]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/13/pittsburgh-java-user-group-java-ee-7-8-and-beyond/"/>
    <updated>2013-08-13T22:18:11-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/13/pittsburgh-java-user-group-java-ee-7-8-and-beyond</id>
    <content type="html"><![CDATA[<p>The Pittsburgh Java User Group has not been meeting regularly for some time now. The <a href="http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/">last meeting was almost two months ago</a>. I attended this one with the impression that it might well be my last attendance of the group, and even more, that it might be the end of the group altogether.</p>

<p>The meeting did nothing to change my intuition.</p>

<p><img src="http://ConscientiousProgrammer.com/images/pittjug-2013-08-13/group.jpg"></p>

<!--more-->


<h2>Presentation by Reza Rahman</h2>

<p>Reza Rahman of Oracle, a &ldquo;Java EE/GlassFish Evangelist&rdquo; gave the presentation. His goal was to promote the new and exciting things coming up in Java EE, and try to get community feedback into what next.</p>

<p>He gave a retrospective on how surprisingly long ago Java EE came on the scene, a decade ago, and described the evolution over the years to improve developer productivity.</p>

<p><img src="http://ConscientiousProgrammer.com/images/pittjug-2013-08-13/speaker.jpg"></p>

<p>Also it was good to see that the new APIs have improved since the old ones, including &ldquo;fluent&rdquo; APIs, the fact is that everything still seems clunky and &ldquo;old&rdquo;.</p>

<p>Furthermore, the Java community is still stuck with old stuff. He bemoaned the fact that the old J2EE is still most widely used.</p>

<p>And Java developers are still not keeping up to date with developments. He asked the audience how many had heard of WebSocket, and hardly anyone raised their hands. He asked who knew what &ldquo;hypermedia&rdquo; is, and nobody raised their hand. Wow.</p>

<p>The presentation went very long, to two hours. Near the end, he said that they wanted to know what people wanted next, but nobody really responded. He asked, &ldquo;What do we need to do in the cloud?&rdquo;</p>

<h2>Conclusion</h2>

<p>My overall impression was that I was done attending more PittJUG meetings. In any case, the main organizers have long since moved on to other stuff besides Java anyway, and gotten busy, and it has been hard to find speakers. More generally, those who attend have not seemed very excited and proactive about asking for speakers or topics to be covered.</p>

<p>I believe it&rsquo;s the end of an era. After all, I do not write any Java code any more, myself! I came to this talk about Java&rsquo;s future expecting it to be my last, and it did not disappoint.</p>

<h2>(Update of 2014-06-10)</h2>

<p>It&rsquo;s been almost a year since the last PittJUG meeting, as far as I know. So I think the group really is dead.</p>

<p>There has been talk of expanding the group to not just be about Java, but anything JVM-related (such as other languages compiling to the JVM, e.g., Scala, Clojure, JRuby). Nothing seems to have happened of that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Ruby/Python Social and Some Observations About Our Polyglot World]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social/"/>
    <updated>2013-08-02T22:17:42-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social</id>
    <content type="html"><![CDATA[<p>Programming meetups aren&rsquo;t just about presentations and coding. Abby and I joined others in meeting up for dinner for a <a href="http://www.meetup.com/pittsburgh-ruby/events/120201652/">joint Pittsburgh Ruby and Pittsburgh Python social</a> and enjoyed relaxing and socializing outdoors in Bakery Square. Although it perpetually looked like it was going to rain, it turned out we weren&rsquo;t really rained on.</p>

<!-- http://instagram.com/p/ch8quus4Kb/ -->


<p><img src="http://distilleryimage11.ak.instagram.com/31a91496fbd111e2996722000a9f18fe_7.jpg" title="Dinner outside" ></p>

<!-- https://secure.flickr.com/photos/carolnichols/9425969330/ -->




<iframe src="https://www.flickr.com/photos/carolnichols/9425969330/player/" width="75" height="75" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>It was fitting that there was a joint social for two language communities, because we live in a polyglot world.</p>

<p>Despite my original intention not to engage into any tech-related conversation, I couldn&rsquo;t help remarking on my current polyglot responsibilities at work at CMU on the METAL project!</p>

<!--more-->


<h2>Our polyglot world: Ruby, Python, Perl</h2>

<p>I mentioned having to cobble together Ruby, Python, and Perl code recently in an NLP project to process Farsi text into corpora to analyze. We used a Ruby gem <a href="https://github.com/aziz/virastar">Virastar</a> in our pipeline, a Perl script for a Farsi stemmer, <a href="http://perstem.sourceforge.net/">Perstem</a>, and a <a href="https://github.com/wfeely/farsiNLPTools">Python script for normalization</a>.</p>

<h3>(Update of 2013-12-04) C++, Scala, MongoDB</h3>

<p>The work project ended up becoming even more polyglot than I expected.</p>

<p>I also used a C++ tagger, TurboTagger from <a href="http://www.ark.cs.cmu.edu/TurboParser/">TurboParser</a>.</p>

<p>I wrote Scala to execute and monitor the pipeline, because it turned out that component bugs and timeouts (from infinite loops sometimes) had to be dealt with: the original shell script pipelines did not handle any of that at all. Also, the vast amount of data meant that parallelizing was critical. The Scala ecosystem has  turned out great for me. I didn&rsquo;t use Akka actors for this task, just futures and parallel collections.</p>

<p>I also used MongoDB because it is quite a natural fit for document-oriented storage and querying as an intermediate stage I can inspect before the final stage of conversion to Sketch Engine format. And I happened to just <a href="http://ConscientiousProgrammer.com/blog/2013/12/04/mongodb-free-online-course-a-review/">finish a free online MongoDB course</a> which has been useful. In my Scala code, I used the official Scala driver <a href="https://github.com/mongodb/casbah">Casbah</a>.</p>

<p>Why MongoDB? I needed to track the transformations, and experiment with different parameters while also fixing bugs and rerunning stuff. Because there is so much data and sometimes something crashes in the pipeline, I decided to save all intermediate results in a database in order to avoid repeating work.</p>

<p>Finally, I used Scala to generate corpora for importing into <a href="http://www.sketchengine.co.uk/">The Sketch Engine</a> for our Farsi linguistics experts to analyze. Scala&rsquo;s parser combinator library came in very useful, and I represented each stage in the pipeline as a transformation of a custom AST designed to finally serialize well to the Sketch Engine &ldquo;vert&rdquo; file format.</p>

<p>It was pretty important to work with ASTs, since we actually got text in a variety of formats, which I parsed to a common AST in order to push into the pipeline.</p>

<p>Whew!</p>

<h3>(Update of 2014-06-10)</h3>

<p>A description of some of this <a href="http://springfield.metaphor.cs.cmu.edu:8080/MetaphorViz/About.html">METAL project</a> work is in the paper <a href="http://www.lrec-conf.org/proceedings/lrec2014/pdf/596_Paper.pdf">&ldquo;The CMU METAL Farsi NLP Approach&rdquo;</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Node Meetup: Optimizing Development Workflow With Grunt]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/07/31/pittsburgh-node-meetup-optimizing-development-workflow-with-grunt/"/>
    <updated>2013-07-31T21:29:45-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/07/31/pittsburgh-node-meetup-optimizing-development-workflow-with-grunt</id>
    <content type="html"><![CDATA[<p>I am not a <a href="http://nodejs.org/">Node</a> developer. I&rsquo;ve only used Node to play around with JavaScript, not for any real work or personal projects (yet). The last time I used Node was two months ago, for a <a href="http://franklinchen.com/blog/2013/06/01/pittsburgh-tech-fest-2013-my-talk-stop-overusing-regular-expressions/">talk I gave at Pittsburgh TechFest 2013</a> in which I wrote JavaScript code running on Node, but did not actually talk about it, and only mentioned that I had written it and put it up on my <a href="https://github.com/franklinchen/talk-on-overusing-regular-expressions">GitHub repository for the talk</a>.</p>

<p>That is why it took me so long to attend my first <a href="http://www.meetup.com/Pittsburgh-Node-js/">Pittsburgh Node</a> <a href="http://www.meetup.com/Pittsburgh-Node-js/events/128439692/">meeting</a>. I was simply curious who was involved in the local Node community and what tooling they were using. The meeting was about <a href="http://gruntjs.com/">Grunt</a>, a Make-like task runner. Nate Good of ShowClix presented.</p>

<h2>Attendance</h2>

<p>There was a fairly large group of people who attended: around thirty. Node seems to be popular in town.</p>

<h2>The talk</h2>

<p>Overall, Grunt seemed like Make or Rake. You can use plugins and define your own tasks. So there seemed nothing special about it, other than it is a useful tool corresponding to similar tools for other language ecosystems.</p>

<h2>Conclusion</h2>

<p>Since I don&rsquo;t really use Node, I went to the meetup out of curiosity more than anything else. I will probably not attend again. There seemed a lot of enthusiasm though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Ruby Lightning Talk Night: RVM, Business Logic With Rails, IRC, Rspec-given, Vagrant]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/07/11/pittsburgh-ruby-lightning-talk-night/"/>
    <updated>2013-07-11T20:53:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/07/11/pittsburgh-ruby-lightning-talk-night</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/pittsburgh-ruby">Pittsburgh Ruby meetup</a> held a <a href="http://www.meetup.com/pittsburgh-ruby/events/120200102">lightning talks session</a>.</p>

<p>Originally, I was not going to present anything, since I did not feel that I had anything exciting to quickly share (I have not been doing much Ruby programming lately at all other than <a href="http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions">debugging my Octopress-generated blog</a>), and don&rsquo;t like talking just to talk.</p>

<p>But at the very last minute, just half an hour before the meeting, I noticed some developments in the world of <a href="http://rspec.info/">RSpec</a> announced on Twitter by Jim Weirich, and I got excited enough that I decided to talk about his <a href="https://github.com/jimweirich/rspec-given"><code>rspec-given</code></a>, which was just released at version 3.0.0.</p>

<!--more-->


<h2>Colin, on <code>rvm_recommended_ruby</code></h2>

<p>Colin briefly talked about how he likes to automate things, and therefore, in the context of using <a href="https://rvm.io/">RVM</a>, created <a href="https://github.com/wayneeseguin/rvm/pull/1074"><code>rvm_recommended_ruby</code></a>.</p>

<h2>Jon, on business logic in pure Ruby</h2>

<p>Jon gave a short summary of his <a href="http://jonathandean.com/2013/07/business-logic-in-pure-ruby/">blog post</a> on not putting all business logic into Rails models, but instead, decoupling from <code>ActiveRecord</code> and Rails altogether. This is a theme that has risen a lot in recent years in the Rails community.</p>

<h2>Carol, on how to use IRC to get help</h2>

<p>Carol talked about how to use IRC to get help when working on projects.</p>

<h2>Me, on <code>rspec-given</code></h2>

<p>I talked about cool features in <a href="https://github.com/jimweirich/rspec-given"><code>rspec-given</code></a>.</p>

<p><code>rspec-given</code> has actually been around for a while, but I had not used in the past. I plan to use it in the future.</p>

<p>It provides <code>Given</code>, <code>When</code>, <code>Then</code>, and <code>And</code> for writing specifications.</p>

<p>Also, now there is <code>Invariant</code>, which I think is a great addition to <code>RSpec</code>, enabling an easy way to check invariants as part of every example.</p>

<p>Finally, I love the new natural assertions, the ability to write stuff like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="p">{</span> <span class="n">stack</span><span class="o">.</span><span class="n">top</span> <span class="o">==</span> <span class="ss">:second_item</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>instead of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">stack</span><span class="o">.</span><span class="n">top</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:second_item</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>while <code>RSpec</code> automatically generates useful messages on failure.</p>

<h2>Colin again, on Vagrant</h2>

<p>Since all the lightning talks were done in less than half an hour, Carol called for more volunteers to talk about something. Colin ended up impromptu talking about his use of <a href="http://www.vagrantup.com/">Vagrant</a> to create development environments.</p>

<p>There was particular interest in how to share files with the host file system. Vagrant makes this easy.</p>

<p>Vagrant is great. Use it.</p>

<h2>Ruby meets Python</h2>

<p>Carol reminded everyone that coming up is a Ruby/Python joint social.</p>

<h2>Conclusion</h2>

<p>A relatively short Pittsburgh Ruby meetup, and with a smaller crowd than some others in the past, but a fun and instructive one.</p>

<p>Don&rsquo;t forget, <a href="http://steelcityruby.org/">Steel City Ruby Conference 2013</a> is in a month! I&rsquo;m <a href="http://franklinchen.com/blog/2012/08/07/the-first-steel-city-ruby-conference-an-amazing-experience/">excited to attend again</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh JavaScript Meetup: Functional Programming]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/07/10/pittsburgh-javascript-meetup-functional-programming/"/>
    <updated>2013-07-10T22:37:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/07/10/pittsburgh-javascript-meetup-functional-programming</id>
    <content type="html"><![CDATA[<p><img src="http://photos3.meetupstatic.com/photos/event/7/f/6/e/global_239372622.jpeg" title="Pittsburgh JavaScript" ></p>

<p>Because the topic of the featured presentation by <a href="http://idiotcoder.com/">Richard Ashkettle</a> was <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a>, I made sure to attend my first meeting of the newly revived <a href="http://www.meetup.com/Pittsburgh-JavaScript/">Pittsburgh JavaScript meetup</a>. (This was actually the third meeting of the revived Pittsburgh JavaScript group, but I hadn&rsquo;t been able to make it to the first two.)</p>

<p>I&rsquo;d met Richard earlier, a month ago at <a href="http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/">Pittsburgh TechFest</a>. He does not claim to be an expert at functional programming, but is enthusiastic about concepts and techniques that he can and does apply to improving software quality in many dimensions. Since I have been a functional programming enthusiast and practitioner for twenty years, I had these goals in attending his presentations:</p>

<ul>
<li>evaluate what Richard and others have done with, and think is important about,  functional programming</li>
<li>offer a few corrections, elaborations, suggestions as appropriate for the situation</li>
<li>gather information on how I may be able to effectively explain functional programming to those who are new to it</li>
</ul>


<!--more-->


<h2>History of the Pittsbugh JavaScript meetup group</h2>

<p>Two years ago, in 2011, I had attended the <a href="http://www.meetup.com/Pittsburgh-JavaScript-Developers">first incarnation of the group</a> faithfully, attending several months of meetings before it disbanded when the founder left Pittsburgh. I learned quite a bit from those meetings.</p>

<p>Two years is a long time in the world of JavaScript. Looking back at <a href="http://franklinchen.com/blog/2011/09/27/when-jquery-attacks/">one of my blog posts reporting on the old JavaScript meetup group</a>, I am amused by how anachronistic that feels to me today, as in my mention of <a href="http://sproutcore.com/">Sproutcore</a>, which I never hear about any more.</p>

<h2>Up front: my take on the secret of JavaScript</h2>

<p>Here are some observations (not novel) I have about JavaScript, to set the stage for further discussion:</p>

<ul>
<li>JavaScript is full of horrible, disgusting Bad Parts.</li>
<li>JavaScript has only one shiny Good Part: it has first-class functions.</li>
<li>People manage to get a lot of amazingly cool and important stuff done using JavaScript, so take it seriously.</li>
</ul>


<h2>Comments on Richard&rsquo;s presentation</h2>

<h3>Immutability and &ldquo;functional languages&rdquo;</h3>

<p>Richard talked about <a href="http://en.wikipedia.org/wiki/Immutable_object">immutability</a> as being part of what &ldquo;functional programming&rdquo; is about.</p>

<p>Yes, it is, and in addition, common best practices in many programming languages these days argue for favoring immutability. I want to emphasize that you don&rsquo;t have to go full-blown into a specialized &ldquo;functional language&rdquo; in order to take advantage of immutability as desired: for example, this tip has long since been known as at least a &ldquo;design pattern&rdquo; in the <a href="http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/">Java world</a>, in the <a href="http://www.harukizaemon.com/blog/2010/03/01/functional-programming-in-object-oriented-languages/">Ruby world</a>, and basically everywhere else.</p>

<p>Richard suggested that &ldquo;functional languages&rdquo; don&rsquo;t allow mutation. By my definition, this is <em>not</em> actually true.  I didn&rsquo;t raise an objection during the talk because I didn&rsquo;t want to sidetrack it, but here I have space to elaborate a little. I would argue (but that would have to be another blog post) that the cleanest, most intuitive and novice-accessible &ldquo;functional languages&rdquo;) are those in the <a href="http://en.wikipedia.org/wiki/ML_%28programming_language%29">ML</a> family originally developed in the 1970s and lives on today&rsquo;s popular, industrial-strength dialects of <a href="http://en.wikipedia.org/wiki/Standard_ML">Standard ML</a>, <a href="http://ocaml.org/">OCaml</a>, and <a href="http://fsharp.org/">F#</a>.</p>

<p><em>ML fully supports mutation</em>, through <a href="http://en.wikibooks.org/wiki/Standard_ML_Programming/Types#References">reference cells</a>.</p>

<p>Personally, because of notions like this, I&rsquo;ve been thinking that maybe it would be best if we all stopped using the term &ldquo;functional language&rdquo;, because it has sadly become misleading and ambiguous. In particular, people instantly think &ldquo;Haskell&rdquo; when they use the word &ldquo;functional language&rdquo;, when in fact Haskell is a very unusual, unique language (and ecosystem) among languages that one could call &ldquo;functional&rdquo;.</p>

<h3>Expressions, functions, evaluation, and values</h3>

<p>As Richard put it, &ldquo;favor expressions evaluating to a value&rdquo;. The focus of functional programming is on <em>returning</em> a value, from an expression that includes function calls, rather than munging some mutable global state, or modifying state through a reference passed into a function as a parameter.</p>

<h3>Recursion vs. looping?</h3>

<p>Richard noted that one characteristic of functional programming is the use of recursion instead of looping. He gave examples of writing tail-recursive functions.</p>

<p>One nitpick (which again, I did not bring up during the talk): recursion and looping (as in through &ldquo;normal&rdquo; constructs such as <code>while</code> and <code>for</code>) are <em>not</em> actually opposed. I will write a blog post later about why conventional looping is best thought of as a derived construct built on top of recursion, and why it might be best to consider conventional looping to be a historical accident and mistake (but a very useful invention given the historical circumstances).</p>

<h4>Efficiency of recursion?</h4>

<p>Also, people brought up the topic of efficiency. I have learned over the years that for many people, the word &ldquo;recursion&rdquo; seems to immediately trigger the word &ldquo;efficiency&rdquo;. Richard did a great job in mentioning that <a href="http://wiki.ecmascript.org/doku.php?id=harmony:proper_tail_calls">EMCAScript 6 is going to have proper tail calls (also called tail call optimization)</a>, which will make tail recursion equivalent to ordinary looping in terms of space usage. This is <em>hugely important</em> news, of course. This mandate shows how serious JavaScript is about embracing functional programming.</p>

<h4>Recursion for parallelism</h4>

<p>But beyond the issue tail recursion, I felt I had to point out that recursive algorithms can offer actual <em>speedup</em>. The classic examples, of course, are the <a href="http://www.cs.cmu.edu/~scandal/nesl/alg-sequence.html#quicksort">parallel speedups of divide-and-conquer algorithms such as quicksort that use recursion</a>. If you expressed the algorithms by removing the recursion (with a hand-rolled stack as often taught in courses), you would destroy the inherent parallelism. So in the world of parallelism, you want your code to stay naturally recursive! As <a href="http://adambom.github.io/parallel.js/">parallel computing comes to JavaScript</a>, keep this in mind!</p>

<h3>Higher-order functions, first-class functions</h3>

<p>Richard: &ldquo;A function is an object&rdquo;.</p>

<p>It&rsquo;s really as simple as that. Functions can be created, stored, passed around. Functions can return other functions.</p>

<p>It&rsquo;s amazing, but I claim that this is JavaScript&rsquo;s one Good Part, its killer feature that surprisingly many languages don&rsquo;t have. And it&rsquo;s the one feature that is used <em>all the time</em>, not just in esoteric code. From the very beginning, JavaScript had first-class functions, to support callbacks for client code in Web browsers. and <a href="http://nodejs.org/">Node</a> server-side code is nothing if not a whole bunch of <code>function (...)</code>. Without closures and first-class functions, JavaScript would have been completely useless. Thank goodness <a href="http://brendaneich.com/2008/04/popularity/">Brendan Eich was inspired by the Scheme functional language</a>.</p>

<h4>No methods!</h4>

<p>JavaScript not only provides full-fledged functions, but ironically, its weirdest feature, the prototype-based inheritance instead of class-based inheritance, inadvertently has prevented &ldquo;interference&rdquo; from the conventional class-based object-oriented world, which is mostly based not on functions, but on <a href="https://en.wikipedia.org/wiki/Method_%28computer_programming%29">methods</a> that interference with functions because they are meant to <em>replace</em> functions (since according to &ldquo;pure&rdquo; object-oriented thinking, functions are evil and computation should involve method calls on objects). <em>JavaScript does not (really) have methods</em>; it only simulates them, by storing bona fide closures into fields of (map) objects. For example, if you use <a href="http://emberjs.com">Ember</a>, the following code illustrates how the building blocks of typical JavaScript programming involve creating lots of <code>function</code>s: <code>valueWillChange</code> and <code>valudDidChange</code> are just functions. They are not special things, &ldquo;methods&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PersonView</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">valueWillChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">keyName</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">changingFrom</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">observesBefore</span><span class="p">(</span><span class="s1">&#39;content.value&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">valueDidChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">keyName</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// only run if updating a value already in the DOM</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;state&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;inDOM&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">changingFrom</span> <span class="o">?</span> <span class="s1">&#39;green&#39;</span> <span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">// logic</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">observes</span><span class="p">(</span><span class="s1">&#39;content.value&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Examples</h3>

<p>Richard gave some standard examples of using higher-order functions such as <code>map</code> and <code>filter</code> and <code>foreach</code> as provided in various popular JavaScript libraries such as <a href="http://underscorejs.org/">Underscore</a>.</p>

<p>As a matter of style, he recommended against long, obscure one-liners that involve chaining. I agree. For readability and testability of pipelines, I have found that it is good to break things up into intermediate steps. (Just <a href="http://ConscientiousProgrammer.com/blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module/">recently</a>, Tim Lesher also recommended against stupidity masking as excessive cleverness in his Python lightning talk about functional programming with <code>itertools</code>.)</p>

<h3>Monads?!</h3>

<p>Regrettably, Richard brought up the term <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29">&ldquo;monads&rdquo;</a>. I&rsquo;m close to thinking that this word should be <a href="http://fsharpforfunandprofit.com/posts/why-i-wont-be-writing-a-monad-tutorial/">banned</a>, because too many confusions about them have ruined the word. I have yet decided what the best alternative phrase might be. Maybe something like &ldquo;computational context&rdquo;?</p>

<p>Ironically, Richard admitted he was going to abuse the word, and for the sake of example, he said, he was going to say that &ldquo;jQuery is a monad&rdquo;. I didn&rsquo;t want to derail his talk, and since he admitted the abuse, I decided there would be a better time to address this topic.</p>

<p>It was interesting to me, however, that he gathered that the interesting thing about jQuery, and why he wanted to call it a monad, was the chaining of calls in jQuery. I need to think of a good way to deal with this intuition when I get around to explaining monads.</p>

<h3>Partial application and currying</h3>

<p>Richard explained both partial application and currying, then he wondered when one would in practice write a curried function.</p>

<p>I said (but not very convincingly, I think) that you would write a curried function if you knew you would otherwise have to manually do a bunch of partial application. I have to confess that was a weak answer. I think the practical situation in JavaScript is that full-scale up-front currying is not useful.</p>

<h3>Libraries</h3>

<p>Richard recommended checking out the following libraries, especially Lo-Dash, which he judges to be faster than Underscore:</p>

<ul>
<li><a href="http://underscorejs.org/">Underscore</a></li>
<li><a href="http://lodash.com/">Lo-Dash</a></li>
<li><a href="http://osteele.com/sources/javascript/functional/">Functional JavaScript</a></li>
</ul>


<h2>Questions and answers</h2>

<p>There were many interesting questions raised after the presentation.</p>

<h3>Introducing functional programming into a team environment</h3>

<p>Someone asked Richard a good question about whether it&rsquo;s appropriate to, say, start using Underscore at work and expecting other team members to learn how to use it. Is it fair to expect others to learn a new way of doing things that might seem weird?</p>

<p>My point of view is that there&rsquo;s nothing specific about functional programming when it comes to questions like this. The same question comes up when evaluating a particular programming language or a particular MVC framework or a particular version control system, and the answer involve considering all the different realities of who is comfortable with what, whether it is worth learning something new, what the advantages and disadvantages are, how much the decision will affect delivery of business value.</p>

<h3>Growing parameter list for a function vs. passing in a big object</h3>

<p>One concern brought up is that if you&rsquo;re programming in a functional style, you can end up being faced with ever-growing parameter lists for a function to pass in everything that it needs. One solution is to create a big object to stick everything into it that might be needed (for example, a configuration object instead of separate flag parameters). Is this overkill?</p>

<p>Also, <a href="http://tonylukasavage.com/">Tony Lukasavage</a> emphasized that his concern was in the context of the need to evolve an existing API without breaking customers&#8217; client code that uses it.</p>

<p>My first note would be that API design is tricky and checking out <a href="http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/">some resources on API design</a> is very helpful.</p>

<p>Regarding parameter lists, Richard noted that you might have a design problem if you have a function that needs to know about so many things it depends on. You may want to refactor the function (of course, in the context of evolving a mature API that customers depend on, it may be too late, unfortunately) and the data structures passed in. For example, if you have a number of functions that all take as parameters a <code>firstName</code> and <code>lastName</code>, then maybe you want a single <code>name</code> parameter instead.</p>

<p>I suggested also that if certain flags are not always needed, then instead of a huge configuration object, how about simply having separate but related functions (in a language supporting overloading, you could provide overloaded functions, although the topic of overloading is another large one to discuss later), each of which takes only the flags the client cares about. Of course, as some people pointed out, then you might end up with annoyingly long and specific function names.</p>

<p>Nobody said designing an API is easy.</p>

<h3>Do I actually do functional programming?</h3>

<p>One question I got, since before the meetup, I had indicated having experience with functional programming, was basically, do I actually use it in JavaScript and elsewhere. The answer is, yes. As I&rsquo;ve mentioned, you don&rsquo;t have use a special language in order to program in this way, although it&rsquo;s much easier and more efficient to use a language that is tailored to support it. Most of the code I&rsquo;ve written in the past fifteen years has attempted to be primarily functional in style, whatever language I&rsquo;m using for work (mostly Java, Perl, Python, and recently Scala). I don&rsquo;t do this out of some kind of ideology, but because it works well in getting stuff done. Before adopting a primarily functional style of programming, I spent years working in traditional imperative and object-oriented styles, and empirically, that was less pleasant.</p>

<h4>Do I do functional programming in JavaScript?</h4>

<p>I have not actually done any JavaScript programming for work since doing some UI prototyping two years ago. I don&rsquo;t know when I&rsquo;ll return to doing front end work, but meanwhile, I am interested in doing some Web browser stuff for personal projects, so I try to keep up to date on developments in the JavaScript world.</p>

<p>One thing that has been interesting that I need to check out is the rise of <a href="http://en.wikipedia.org/wiki/Functional_reactive_programming">functional reactive programming (FRP)</a> libraries for JavaScript, such as <a href="https://github.com/raimohanska/bacon.js">Bacon.js</a>. FRP was originally invented in the 1990s by Conal Elliott in the context of Haskell, but almost twenty years later, has finally spread well beyond that now to mainstream visibility and use. For example, Microsoft has thrown its weight behind <a href="http://rx.codeplex.com/">Reactive Extensions (Rx)</a>, which started out in the .NET world, but Microsoft then ported it to JavaScript, C/C++, Python, and Ruby.</p>

<h2>Conclusion</h2>

<p>I was happy to see interest in functional programming in the local JavaScript community. Richard gave an introductory talk on it that I thought was very useful as a starting point for those who are new to it. I made note of some omissions or inaccuracies in order to improve my thinking about how I can contribute in the future to improving people&rsquo;s understanding and application of functional programming principles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Hate Calling Myself "Pragmatic" but Do]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/30/why-i-hate-calling-myself-pragmatic-but-do/"/>
    <updated>2013-06-30T23:34:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/30/why-i-hate-calling-myself-pragmatic-but-do</id>
    <content type="html"><![CDATA[<p>I wrote a <a href="http://franklinchen.com/blog/2013/06/30/why-i-hate-calling-myself-pragmatic-but-do/">post on my personal blog about my being a &ldquo;pragmatist&rdquo;</a>.</p>

<p>I mention it here because few words are as controversial, I think, in the programming community, as &ldquo;pragmatic&rdquo;. I wanted to be on record as identifying myself as &ldquo;pragmatic&rdquo; despite the negative connotations, because the entire mindset of this new programming blog is pragmatic.</p>

<p>For example, I will soon write about the realities of programming language choice, including why I used Java, despite its deficiencies, for a decade, and why it is not going away, and why I currently am an advocate of <em>Scala, one of the most ambitiously pragmatic languages</em> to have come along in my lifetime.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nil, Non-determinism, Exceptions: A Journey in Debugging the Software That Generates My Blog]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions/"/>
    <updated>2013-06-29T18:15:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions</id>
    <content type="html"><![CDATA[<p>I mentioned in my <a href="http://ConscientiousProgrammer.com/blog/2013/06/24/introducing-this-new-programming-blog/">initial post for this blog</a> that I have had some problems with the software I use to generate my personal blog, <a href="http://octopress.org/">Octopress</a>, and was thinking of migrating to a different platform that might in some ways be more robust to such problems. I ended up not doing so, and I still stand by that decision, but I just yet again ran into a problem with Octopress.</p>

<p>Here I report on how I figured out the problem and begin a conversation about the nature of error handling and API design.</p>

<!--more-->


<h2>A disclaimer</h2>

<p>I want to emphasize that although I will be critiquing some code, I do not mean to imply that I am a perfect programmer or that this software is of really poor quality. I have written software in the past that has crapped out with <code>null</code> or <code>nil</code> errors. In addition, the fact that I basically trust and use this software to drive my blogs is a reflection of the fact that it mostly works. Almost all software that has been written, is being written now, and will be written in the future has bugs. Every day we all trust and use software that we know has bugs. And this blogging platform I use is the product of many, many volunteers who contribute to the world through open source through the goodness of their hearts. I happily use this software, warts and all, and am grateful to everyone who works to maintain and improve it!</p>

<h2>Blog generation</h2>

<p>The problem arose when I tried to generate <a href="http://franklinchen.com/">my personal blog</a>. I got a <a href="http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/"><code>nil</code></a> failure.</p>

<p>Here&rsquo;s the error message (I have omitted the 46-line stack trace):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">  Generating... Liquid Exception: undefined method `sub&#39; for nil:NilClass in atom.xml</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is, unfortunately, an example of an error message that is next to useless, and should <em>never</em> appear. I have stated that <a href="http://ConscientiousProgrammer.com/blog/2013/06/26/we-should-not-create-this-kind-of-terrible-error-message-for-the-end-user/">we as programmers should not generate useless end user error messages</a>, and of course, in context, I am an end user of the blog generating software I use.</p>

<h2>Debugging and finding the root cause</h2>

<p>Thanks to all the Ruby libraries being open source and installed on my machine, by using the stack trace and <code>debugger</code>, I figured out the immediate cause of the stray <code>nil</code>.</p>

<p>It turns out that Octopress uses Jekyll, which uses <a href="https://github.com/tmm1/pygments.rb">pygments.rb</a> to do HTML highlighting of code blocks. (I use Octopress precisely because of its built-in support for code block highlighting.)</p>

<p>The bug is that the code in Jekyll that does syntax highlighting using Pygments makes an assumption that the return value of <code>Pygments.highlight()</code> is never <code>nil</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>          <span class="vi">@renderer</span> <span class="o">||=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Redcarpet</span><span class="p">:</span><span class="ss">:Render</span><span class="o">::</span><span class="no">HTML</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>            <span class="k">def</span> <span class="nf">block_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>
</span><span class='line'>              <span class="n">lang</span> <span class="o">=</span> <span class="n">lang</span> <span class="o">&amp;&amp;</span> <span class="n">lang</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="s2">&quot;text&quot;</span>
</span><span class='line'>              <span class="n">output</span> <span class="o">=</span> <span class="n">add_code_tags</span><span class="p">(</span>
</span><span class='line'>                <span class="no">Pygments</span><span class="o">.</span><span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="ss">:lexer</span> <span class="o">=&gt;</span> <span class="n">lang</span><span class="p">,</span> <span class="ss">:options</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf-8&#39;</span> <span class="p">}),</span>
</span><span class='line'>                <span class="n">lang</span>
</span><span class='line'>              <span class="p">)</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">def</span> <span class="nf">add_code_tags</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>
</span><span class='line'>              <span class="n">code</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/&lt;pre&gt;/</span><span class="p">,</span><span class="s1">&#39;&lt;pre&gt;&lt;code class=&quot;&#39;</span> <span class="o">+</span> <span class="n">lang</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="n">code</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/&lt;\/pre&gt;/</span><span class="p">,</span><span class="s2">&quot;&lt;/code&gt;&lt;/pre&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, it <em>can</em> be <code>nil</code> and was for me, and therefore <code>add_code_tags</code> was calling <code>code.sub()</code> with <code>code</code> being <code>nil</code>.</p>

<p>The bug exists in all the more recent versions of pygments.rb, including 0.4.2 (which is used for my personal blog) and 0.3.7 (which is used for this blog) and the latest released version, 0.5.1. The bug was actually reported by someone two weeks ago, and I added extra commentary, but <a href="https://github.com/tmm1/pygments.rb/issues/78">it has not yet been fixed</a>, so I plan to contribute a fix and submit a pull request.</p>

<h2>Whose responsibility to check for <code>nil</code>?</h2>

<p>Whenever there is an error, one has to ask whose responsibility it was to</p>

<ul>
<li>detect the error</li>
<li>handle the error</li>
</ul>


<p>I think it is poor practice to engage in random and spotty &ldquo;defensive programming&rdquo; that checks for <code>nil</code> here and there, willy-nilly, just to avoid a big program crash. There should be clearly delineated boundaries of error handling.</p>

<p>In this case, it is surprising that a syntax highlighter for some text could return <code>nil</code>. One would think that if a syntax highlighter got confused, it could return the text verbatim, for example, without any special formatting. (By the way, don&rsquo;t get me started on the abominable use of HTML string hacking in this code instead of, say, building a proper HTML AST; I&rsquo;ll write about that topic later.)</p>

<h2>Documentation of API</h2>

<p>Unfortunately, the documentation of the Pygments API was incomplete in <code>lib/pygments/popen.rb</code>, where <code>highlight</code> is defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Public: Highlight code.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Takes a first-position argument of the code to be highlighted, and a</span>
</span><span class='line'><span class="c1"># second-position hash of various arguments specifiying highlighting properties.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">opts</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="c1"># If the caller didn&#39;t give us any code, we have nothing to do,</span>
</span><span class='line'>  <span class="c1"># so return right away.</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">code</span> <span class="k">if</span> <span class="n">code</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">code</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Callers pass along options in the hash</span>
</span><span class='line'>  <span class="n">opts</span><span class="o">[</span><span class="ss">:options</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Default to utf-8 for the output encoding, if not given.</span>
</span><span class='line'>  <span class="n">opts</span><span class="o">[</span><span class="ss">:options</span><span class="o">][</span><span class="ss">:outencoding</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;utf-8&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Get back the string from mentos and force encoding if we can</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="n">mentos</span><span class="p">(</span><span class="ss">:highlight</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">opts</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:options</span><span class="o">][</span><span class="ss">:outencoding</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">str</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:force_encoding</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A problem with dynamically typed language culture</h2>

<p>The documentation doesn&rsquo;t actually fully specify what the arguments can be, and does not specify what the result should be either! This is a glaring drawback of most code that I have seen in dynamically typed languages such as Ruby. People don&rsquo;t document exactly what can come in or out. A newcomer to a code base (such as me in this situation) cannot just read off the types and know immediately what is going on and what has been promised and what is delivered by a function. As a result, the code reader has to play compiler and read a lot more code to try to figure out what is going on.</p>

<p><em>In principle</em>, someone writing code in a dynamically typed language could provide very helpful comments that amount to informal type annotations, but in practice people do not. I have found in my two decades of programming that human psychology trumps theoretical possibility any day. If something is optional, people won&rsquo;t do it, unless there is a very strong de facto community standard. (It turns out, for example, that what I really admire about the Ruby community is that for some reason, there is a very strong de facto community standard of doing at least some <em>unit testing</em> as part of the whole development process. I find this sadly missing in some statically typed language communities.)</p>

<p>In code in a statically typed language such as OCaml (or Haskell or Scala), I would expect to see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">highlight</span> <span class="o">(</span><span class="n">code</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">(</span><span class="n">opts</span> <span class="o">:</span> <span class="n">my_map</span><span class="o">)</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="o">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>and expect that the return value should be a <code>String</code>, or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">highlight</span> <span class="o">(</span><span class="n">code</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">(</span><span class="n">opts</span> <span class="o">:</span> <span class="n">my_map</span><span class="o">)</span> <span class="o">:</span> <span class="kt">string</span> <span class="n">option</span> <span class="o">=</span> <span class="o">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>to indicate that the return value could be either <code>Some(formatted_code)</code> or <code>None</code>.</p>

<h2><code>nil</code> all over the place</h2>

<p>Reading the Ruby code, I saw that the situation is even more complex than I thought:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># If the caller didn&#39;t give us any code, we have nothing to do,</span>
</span><span class='line'>  <span class="c1"># so return right away.</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">code</span> <span class="k">if</span> <span class="n">code</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">code</span><span class="o">.</span><span class="n">empty?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow: <code>code</code> can be <code>nil</code>, in which case <code>nil</code> is returned.</p>

<p><em>All code that can return <code>nil</code> should document this fact so that the caller knows what to do.</em> Ideally, the writer of pygments.rb should have documented this fact, and then the writer of Jekyll would in turn have added <code>nil</code> checking in its rendering code.</p>

<p>Furthermore, it turns out that <code>mentos()</code> can return <code>nil</code> on a non-<code>nil</code> code string! This was a surprise to me.</p>

<h2><code>nil</code> is not even the real problem here: non-determinism is</h2>

<p><code>mentos()</code> is not very well documented. Until I read this code, I didn&rsquo;t realize that pygments.rb actually embeds a call to the Python interpreter to execute the Python Pygments parser to do the real work! In <code>lib/pygments/popen.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Our &#39;rpc&#39;-ish request to mentos. Requires a method name, and then optional</span>
</span><span class='line'><span class="c1"># args, kwargs, code.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mentos</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">args</span><span class="o">=[]</span><span class="p">,</span> <span class="n">kwargs</span><span class="o">=</span><span class="p">{},</span> <span class="n">original_code</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Open the pipe if necessary</span>
</span><span class='line'>  <span class="n">start</span> <span class="k">unless</span> <span class="n">alive?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="c1"># Timeout requests that take too long.</span>
</span><span class='line'>    <span class="n">timeout_time</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'>
</span><span class='line'>    <span class="ss">Timeout</span><span class="p">:</span><span class="ss">:timeout</span><span class="p">(</span><span class="n">timeout_time</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># ...[I omitted some code]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Timeout</span><span class="p">:</span><span class="ss">:Error</span>
</span><span class='line'>    <span class="c1"># If we timeout, we need to clear out the pipe and start over.</span>
</span><span class='line'>    <span class="vi">@log</span><span class="o">.</span><span class="n">error</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="si">}</span><span class="s2">] Timeout on a mentos </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2"> call&quot;</span>
</span><span class='line'>    <span class="n">stop</span> <span class="s2">&quot;Timeout on mentos </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2"> call.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Errno</span><span class="p">:</span><span class="ss">:EPIPE</span><span class="p">,</span> <span class="no">EOFError</span>
</span><span class='line'><span class="n">stop</span> <span class="s2">&quot;EPIPE&quot;</span>
</span><span class='line'><span class="k">raise</span> <span class="no">MentosError</span><span class="p">,</span> <span class="s2">&quot;EPIPE&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It turns out that fundamental problem is not <code>nil</code> so much as <em>non-determinism</em>: my computer was under heavy load when I was generating my blog, and therefore the timeout kicked in and caused a failure to communicate with the Python process and therefore for <code>nil</code> to end up being returned. This non-determinism is worse than <code>nil</code>. I think that in a situation like this, an <em>exception</em> is called for. <code>highlight()</code> should actually raise an exception, which would then be propagated to Jekyll, which could give a useful error message about the timeout. I think this is a better design than return <code>nil</code> (or if using a statically typed language, a <code>None</code>).</p>

<p>I was also disappointed that logging was used in this code, indicating that it was known that bad things could happen, but the logged information was not used in generating a useful exception.</p>

<p>Amusingly, upon discovering the logging code, I used it, setting the magic environment variable <code>MENTOS_LOG</code> (from reading the code) to a file, so that I could see what happens, and verify that the timeout happened:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span> Logfile created on 2013-06-29 10:26:19 -0400 by logger.rb/36483
</span><span class='line'><span class="go">I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:19-04:00] Starting pid 16533 with fd 10.</span>
</span><span class='line'><span class="go">I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:19-04:00] Out header: {&quot;method&quot;:&quot;highlight&quot;,&quot;args&quot;:null,&quot;kwargs&quot;:{&quot;lexer&quot;:&quot;console&quot;,&quot;options&quot;:{&quot;encoding&quot;:&quot;utf-8&quot;,&quot;outencoding&quot;:&quot;utf-8&quot;},&quot;fd&quot;:10,&quot;id&quot;:&quot;TVQSJNBV&quot;,&quot;bytes&quot;:147}}</span>
</span><span class='line'><span class="go">E, [2013-06-29 10:26 #13799] ERROR -- : [2013-06-29T10:26:27-04:00] Timeout on a mentos highlight call</span>
</span><span class='line'><span class="go">I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:27-04:00] Killing pid: 16533. Reason: Timeout on mentos highlight call.</span>
</span><span class='line'><span class="go">I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:27-04:00] Killing pid: . Reason: Exiting</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing</h2>

<p>It turns out that there <em>is</em> a place where the intended behavior is in a sense documented: the unit tests in <code>test_pygments.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">test_returns_nil_on_timeout</span>
</span><span class='line'>    <span class="n">large_code</span> <span class="o">=</span> <span class="no">REDIS_CODE</span> <span class="o">*</span> <span class="mi">300</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">=</span> <span class="n">P</span><span class="o">.</span><span class="n">highlight</span><span class="p">(</span><span class="n">large_code</span><span class="p">)</span> <span class="c1"># a 30 mb highlight request will timeout</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">code</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test creates some huge string in hope of triggering a timeout, and then asserts that the result should be <code>nil</code>!</p>

<p>OK, fair enough: assuming that the Jekyll authors knew of this intention, then it was Jekyll&rsquo;s responsibility to test for <code>nil</code> in the call to <code>Pygments.highlight()</code>.</p>

<p>The test is not very satisfactory because it artificially tries to generate a timeout. Instead, one could do some mocking or refactoring of <code>mentos()</code>.</p>

<h2><code>nil</code> is still not OK; but are exceptions OK?</h2>

<p>So everything is OK, now that we can take <code>nil</code> to mean a timeout, right? No, actually, <code>highlight()</code> can still return a <code>nil</code> just because <code>code</code> was <code>nil</code>. It is bad to bin random different failure modes into one return value. Personally, I would choose to enforce that the input <code>code</code> is never <code>nil</code> and that the output is never <code>nil</code>, and that an exception is raised if there is a timeout.</p>

<p>An alternative is to not use an exception, but use a union success/failure type instead. This is the route that <a href="http://blog.stackmob.com/2013/03/why-we-avoid-throwing-exceptions-at-stackmob/">StackMob uses for its Scala code</a>. Other Scala developers such as <a href="http://blog.jessitron.com/2013/06/whats-dirtier-than-comments-exceptions.html">Jessica Kerr have been arguing against the use of exceptions also</a>.</p>

<p>Google&rsquo;s systems-level statically typed language <a href="http://golang.org/">Go</a> deliberately <a href="http://golang.org/doc/faq#exceptions">does not even have exceptions</a>, and therefore mandates a style of error handling that involves <a href="http://golang.org/doc/articles/error_handling.html">returning a success and failure everywhere</a>.</p>

<p>I think there are situations for exceptions and situations for reifying errors as ordinary values in a success/failure object. I will explore this topic further in this blog. Note that even in the Haskell community, there is continued debate over how to handle errors; a famous post compares <a href="http://blog.ezyang.com/2011/08/8-ways-to-report-errors-in-haskell-revisited/">eight different ways to handle errors in Haskell</a>. There is no consensus because there are a lot of tradeoffs involved when it comes to error handling.</p>

<h2>My fix</h2>

<p>For now, before I propose to pygments.rb that an exception be raised (this would be least intrusive to Jekyll, whose source code would not need to be changed for the exception to propagate usefully), I simply hacked <code>8</code> to <code>80</code> to avoid a timeout!</p>

<h3>(Update of 2013-12-18)</h3>

<p>The <code>pygments.rb</code> library <a href="https://github.com/tmm1/pygments.rb/commit/e0ed7f73f03aa59680b469f4f26e208d3cf8d999">has finally been updated with a <code>MENTOS_TIMEOUT</code> environment variable</a>.</p>

<p>This is obviously a short-term hack, and I don&rsquo;t see how a typical Octopress user would even find out about this new environment variable, but until I implement a better solution and submit a pull request to the <code>pygments.rb</code> team, I have no right to complain!</p>

<h2>Conclusion</h2>

<p>I&rsquo;ve used my recent frustration at being unable to publish my personal blog as a vehicle to begin a conversation about error handling and the issues of API design and documentation in the face of errors. I hope you enjoyed the ride.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Should Not Create This Kind of Terrible Error Message for the End User]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/26/we-should-not-create-this-kind-of-terrible-error-message-for-the-end-user/"/>
    <updated>2013-06-26T23:44:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/26/we-should-not-create-this-kind-of-terrible-error-message-for-the-end-user</id>
    <content type="html"><![CDATA[<p>I have a <a href="http://franklinchen.com/blog/2012/03/22/paradox-i-will-observe-the-national-day-of-unplugging-but-just-bought-my-first-smartphone-this-week/">Samsung Galaxy S II smartphone</a>. I recently encountered a problem: auto-updating of apps failed with this terrible error message:</p>

<blockquote><p>Application cannot be installed in the default install location.</p></blockquote>


<p>Also, a lot of time and bandwidth was each time spent on re-downloading the app and then failing, with no way to gracefully recover.</p>

<p>If you search the Web for this unpleasant error message, you will see hundreds if not thousands of confused end users like me asking on various forums how to deal with this.</p>

<p>I feel pretty bad about this situation, both as a programmer and as an end user.</p>

<!--more-->


<h2>As an end user</h2>

<p>As an end user, I know very little about smartphones. I am not currently a mobile-device developer. I just want things to work, and I have never read the huge manual that came with my phone. If there is an error in my operation of the phone, I want some kind of useful guidance (ideally very specific and tailored to a common use case known by the vendor), not a mysterious generic error message.</p>

<h2>As a programmer</h2>

<p>It turns out that there is internal device storage and SD card storage, and if you run out of space somewhere, an error can happen, and that there is a default install location for apps. The gory details for developers are <a href="https://developer.android.com/guide/topics/data/install-location.html">here</a>.</p>

<p>Clearing some space and also moving a large app to SD card storage solved my problem.</p>

<p>So why that terrible error message? Why not just tell the end user exactly what is going on? Why not something like:</p>

<blockquote><p>The application X could not be installed at (device storage | SD card storage) because you don&#8217;t have enough space. You can try clearing more space, or go to your application settings to move it to (SD card storage | device storage).</p></blockquote>


<p>The application should know exactly what is going on, and not only that, should be able to suggest a course of action based on all the relevant variables, such as how much space there is in different places, how large the application is, etc.</p>

<h3>Why?</h3>

<p>I haven&rsquo;t seen the source code that generates the existing error message, but as a programmer, I can guess what might be happening.</p>

<p>I have been as guilty as anyone else of not providing good end user error messages in software I have written. It is very easy to do the following sloppy things instead:</p>

<ul>
<li>Throwing exceptions that contain no useful information except some string</li>
<li>Not handling an exception close to where useful recovery can actually happen</li>
</ul>


<p>It is superficially &ldquo;more work&rdquo; to throw an exception that includes all relevant information, and for handlers to also do something intelligent rather than just pass the buck all the way to some top level catch-all handler.</p>

<p>Also, why should the phone download the whole app and then fail, if there is actually enough information to guess that the whole update might fail? Surely there is information about how big the app is, before downloading it?</p>

<p>And what&rsquo;s with the default concurrent downloads of many updates at the same time, which greatly increases the probability of failure of all of them, when serializing the downloads results in less use of temporary space?</p>

<h2>Conclusion</h2>

<p>We programmers clearly are not conscientious enough about error handling and reporting. I believe that today, more than ever, we have a responsibility to <em>handle failure gracefully</em> in software. I believe that failure should even be considered to be the <em>default</em> expectation, rather than success, in order to create reliable software. As <a href="http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/">Dick Wall said at the recent 2013 Pittsburgh TechFest</a>, it&rsquo;s not enough to design and code and test primarily for the &ldquo;happy path&rdquo;.</p>

<p>There are ways to do error handling better, but they require serious thinking up front. This is a large topic we will be exploring in depth on this blog.</p>

<h3>(Update of 2013-06-27)</h3>

<p>By sheer coincidence, a great <a href="http://programming.oreilly.com/2013/06/human-centered-design-may-be-what-makes-your-app-stand-out.html">interview on <em>human-centered design</em></a> arrived in my RSS feed. Check it out.</p>

<p>I will be the first to admit that I don&rsquo;t know much about UX or human-centered design. I just have some intuitions as an end user. I think we developers should learn more about this stuff in a more formal, serious way. And it&rsquo;s just a matter of thinking about the ultimate end user. Even if we are not programming for the ultimate end user, we are at least programming for other programmers. If we are writing an API, the principles that guide human behavior must still be valid, even if programmers are an unusual subset of human beings! We write code <em>not</em> primarily for computers but for other human beings (including our future selves).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Python: Night of the Favorite Module]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module/"/>
    <updated>2013-06-26T22:50:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module</id>
    <content type="html"><![CDATA[<p><img src="http://photos4.meetupstatic.com/photos/event/d/e/b/e/global_187797022.jpeg" title="Pittsburgh Python User Group" ></p>

<p>The <a href="http://www.meetup.com/pghpython/">Pittsburgh Python User Group</a> had <a href="http://www.meetup.com/pghpython/events/120442102">another &ldquo;favorite module night&rdquo;</a>. I enjoy this format because I get to learn about what people find useful, so that I may perhaps use it myself!</p>

<h2>How I benefited in the past</h2>

<p>For example, <a href="http://franklinchen.com/blog/2012/08/23/pittsburgh-python-meetup-i-gave-my-first-lightning-talk-ever-the-topic-was-scons/">one of these &ldquo;favorite module night&rdquo; sessions</a> was where I learned about Kenneth Reitz&rsquo;s <code>requests</code> library. Very often it is easy to not be aware of the rapidly changing ecology of very useful libraries in a programming language ecosystem outside of the official &ldquo;standard library&rdquo;, especially when using a language that is <em>not</em> one&rsquo;s primary working language. For example, Python has never been one of my primary working languages, so I&rsquo;m not as up to date on what all the best tools are to use. But just a couple of weeks ago, I had to do some work with Python, and <code>requests</code> came in very handy.</p>

<h2><a href="http://ipython.org/notebook.html">IPython Notebook</a></h2>

<p>Josh Adelman opened the show-and-tell with a demo of <a href="http://ipython.org/notebook.html">IPython Notebook</a>. This is a truly fantastic interactive environment for developing code while creating a full document for publication and sharing. He uses it not only for research but also for his students to use in his teaching.</p>

<p>If you&rsquo;ve used Mathematica, the concept is similar to that environment.</p>

<p>I&rsquo;m also excited that IPython Notebook has been the direct inspiration for similar projects for other languages, e.g., <a href="https://github.com/Bridgewater/scala-notebook">Scala Notebook</a> for Scala in development.</p>

<p>Josh gave a link to this <a href="http://jakevdp.github.io/">cool blog that uses IPython Notebook</a>.</p>

<h2><a href="https://getsentry.com/welcome/">Sentry</a> and <a href="http://raven.readthedocs.org/en/latest/">Raven</a></h2>

<p>Nick Sloan presented on Sentry, a service for collecting errors in your program and notifying you of them, and Raven, the official Python client for Sentry. Sentry is actually open source, so you could host it yourself, but paying for the hosted service provides conveniences.</p>

<p>Using Sentry is no more than using ordinary Python logging after calling a setup function. The ease of use made it sound like a winner.</p>

<h2><a href="http://docopt.org/">docopt</a></h2>

<p>Joe Esposito presented on <code>docopt</code>, a library for command line parsing. The interesting thing about it is that it implements an <em>external</em> domain-specific language for describing command lines: you write a usage message, as a string, and <code>docopt</code> parses it in order to deduce what the expectations and constraints are. This is a very ambitious approach, contrary to the usual internal API-based approaches, some of which are sophisticated and implement an <em>internal</em> domain-specific language.</p>

<p>Of course, Joe contrasted this library with one of the standard command line parsing libraries for Python, <code>argparse</code>, which is lower-level so that when you use it, the high-level end user usage is not as immediately readable.</p>

<p>There were a lot of good questions about <code>docopt</code> since it seemed magical. I&rsquo;ve decided to write more about all this in a separate blog post about command line parsers.</p>

<h2><a href="https://pypi.python.org/pypi/hypothesis">hypothesis</a></h2>

<p>I gave a short 5-minute presentation on <code>hypothesis</code>, a library in development for doing property-based testing, inspired by QuickCheck and ScalaCheck. As I have done recently when giving a much longer <a href="http://franklinchen.com/blog/2013/04/11/my-pittsburgh-scala-meetup-talk-on-property-based-testing-using-scalacheck/">talk on property-based testing using ScalaCheck</a>, I focused on motivating the use of property-based testing as an addition to example-based testing.</p>

<p>Materials for my lightning talk are <a href="https://github.com/franklinchen/lightning-talk-on-hypothesis">here</a>, and my few slides are below:</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/23548866" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/FranklinChen/handout-23548866" title="5-minute intro to property-based testing in Python with hypothesis" target="_blank">5-minute intro to property-based testing in Python with hypothesis</a> </strong> from <strong><a href="http://www.slideshare.net/FranklinChen" target="_blank">Franklin Chen</a></strong> </div></p>

<h2><a href="http://docs.python.org/2/library/itertools.html"><code>itertools</code></a></h2>

<p>Tim Lesher talked about <code>itertools</code>, a very useful part of the standard library that provides support for efficient functional programming idioms. Part of the efficiency comes from the use of iterators in order to avoid constructing intermediate lists; this is a way of simulating the lazy sequences that are standard in languages such as ML, Haskell, Scala, and Clojure.</p>

<p>Tim noted that although <code>itertools</code> is powerful, &ldquo;don&rsquo;t be stupid&rdquo;: don&rsquo;t write obscure-looking code with it just because you can.</p>

<p>Josh noted that the documentation for <code>itertools</code> is great, with recipes that show you not only how to do things, and also with code for the equivalent more complicated code that you would have to write if you didn&rsquo;t use <code>itertools</code>. I agree that the documentation for <code>itertools</code> is a model of high-quality documentation for a library. Check it out, and use it!</p>

<h2><a href="http://docs.python.org/dev/library/argparse.html"><code>argparse</code></a></h2>

<p>Craig gave a little presentation on <code>argparse</code>, the aforementioned standard library for command line parsing. He noted it was ironic that he had prepared to speak on it before Joe independently decided to talk about <code>docopt</code>. (Actually, I like <code>argparse</code> and had considered talking about it before Craig submitted it already.)</p>

<p>One feature he uses from <code>argparse</code> is the ability to create mutually exclusive groups. There was a question of whether this is supported in <code>docopt</code>.</p>

<p>As mentioned earlier, I&rsquo;ll write more about both <code>argparse</code> and <code>docopt</code> in a separate blog post.</p>

<h2><a href="http://doughellmann.com/python-standard-library-by-example">The Python Standard Library by Example</a></h2>

<p>Someone shared not a &ldquo;favorite module&rdquo;, but a favorite book, &ldquo;The Python Standard Library by Example&rdquo;. I&rsquo;m happy he did, because it is in fact an excellent reference for anyone using the Python standard library, with concrete examples that you can take and use. Too often, I have found that standard documentation is too terse.</p>

<p>The book is based on <a href="http://pymotw.com/2/">&ldquo;Python Module of the Week&rdquo;</a>, which is a great online resource.</p>

<h2>Introductions for new people</h2>

<p>An important part of the vibe of the Pittsburgh Python User Group is how it tries to get everyone actively involved in the local Python community.</p>

<p>There is a tradition of periodically having everyone introduce themselves, to counter the tendency sometimes in these kinds of groups for people to attend a meeting out of curiosity and then silently leave and perhaps not come back, out of intimidation or not knowing how to benefit or contribute. I know I have done that before, especially when attending the meeting of a group where I didn&rsquo;t really know anybody ahead of time and still knew very little about the topics discussed by the group (such as when I joined the Pittsburgh Ruby group as one who had barely used any Ruby).</p>

<p>Since so many people showed up, and a lot seemed to be new faces, we had a round of introductions. I hope we&rsquo;ll continue to see some of these new faces in the future!</p>

<h2>Conclusion</h2>

<p>Thanks again to Google Pittsburgh for hosting the Pittsburgh Python User Group meeting, and Steve Gross of Google for being the guy who makes it able for us to meet there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Java User Group: Building and Evolving a Java API]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/"/>
    <updated>2013-06-25T21:49:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api</id>
    <content type="html"><![CDATA[<p>The topic for the featured presentation at the <a href="http://java.net/projects/pittjug/">Pittsburgh Java User Group</a> (PittJUG) was &ldquo;Building and Evolving a Java API&rdquo;, presented by Eric Stein of <a href="http://www.fulminatus.com/">Fulminatus Consulting</a>. I was excited to attend because API design is difficult but important, and today more than ever, because of the trend toward integrating many services to build an application, and toward providing such services (both externally and internally).</p>

<p>(For past reports of mine on PittJUG, see the <a href="http://franklinchen.com/blog/categories/pittjug/">PittJUG archives in my other blog</a>.)</p>

<p>The presentation was very good. (Eric&rsquo;s slides are available <a href="http://www.fulminatus.com/presentations/PittJUG%20API%20Presentation.pdf">here</a>, but as always with slides, be aware that it is just an outline, as good slides really should be, and the actual presentation and group discussion had all the substance.) Note that although some of the specific recommendations and examples are Java-specific, the entire area of good API design is <em>general</em> and is applicable no matter what programming language you are using.</p>

<p>However, the presentation also filled me with a combination of <em>sadness</em>, because our computing profession could have done better up front to make good API design much easier in various ways. On the positive side, it&rsquo;s better late than never.</p>

<p>A report on the presentation, with my commentary:</p>

<!--more-->


<h2>API design for whom?</h2>

<p>Whenever doing something at all, the question &ldquo;for whom?&rdquo; should always be asked and answered. Eric observed that APIs must meet the different needs of different users, so it&rsquo;s useful to identify three specific end users with different needs, and look at the situation from each of their points of view:</p>

<ul>
<li>API owner</li>
<li>specification owner</li>
<li>logging owner</li>
</ul>


<p>His inclusion of the &ldquo;logging owner&rdquo; was intriguing because the point of view from someone whose job it is to wade through logs is often slighted. But in light of ever more complex applications as well as errors and the need for recovery and quick turnaround in fixing them, I believe that Eric is right to argue that logging should be seriously designed, to &ldquo;tell a consistent story&rdquo;. I am taking this advice to heart.</p>

<h2>Design process</h2>

<p>Eric advised that design should start with use cases. And client code, from the perspective of the end user, as well as tests, should be written up front. He didn&rsquo;t use the term, but this is <a href="http://en.wikipedia.org/wiki/Test-driven_development">test-driven development</a> (TDD), which in my mind has been an unfortunate term, because it is really <em>test-driven design</em>, which happens to have the nice effect of kick-starting development as well. (I&rsquo;ll be writing more later on this blog about TDD; I no longer start a new project without a TDD mentality and process, so productive and efficient I have found it.)</p>

<p>One thing that Eric said was to start with the <em>most important</em> cases first, not the easy cases. Very good advice: I have learned the hard way that it is easy to pat yourself on the back and start with easy cases to feel like you&rsquo;re making progress, but this often leads to hitting a block when getting to the hard cases, and then having to do some major redesign at that point. I&rsquo;ve found that if something is really important, it needs to be addressed immediately, and often will drive the design of the components required to make the important hard case work. (I&rsquo;ll be writing more later on this blog about &ldquo;the hard case&rdquo;, especially in the context of &ldquo;sad paths&rdquo; that are critical.)</p>

<h2>Stability</h2>

<p>Stability is the big difficulty in API design. It&rsquo;s really daunting, actually, to think of the idea of &ldquo;write once, support forever&rdquo;, but people get very unhappy, rightfully, if they start using your API and then things break on them after it changes.</p>

<h2>Simplicity</h2>

<p>Eric argued that a good API should be easy to read as well as easy to write. This is all about human psychology.</p>

<p>Also, he noted that a side effect of his recommendation to write client code and tests first is that you get to see the point of view of the client, and can use this experience to weed out, for example, APIs that require a lot of annoying boilerplate code.</p>

<h2>Subclassing</h2>

<p>There was a lot of good material covered about the dangers of exposing or mandating or allowing subclassing.</p>

<p>I agree with Eric about the <em>dangers of subclassing</em>. The ability to subclass existing classes is the single most abused feature of object-oriented languages, and when it comes to API design, the problems are even more magnified because of the needs for API security and evolution. Almost always, you want to use composition, not subclassing. I&rsquo;m pretty annoyed that composition, which was well-understood in the 1960s and 1970s, ended up being &ldquo;forgotten&rdquo; in some circles. Eric gave the classic example of a totally disastrous API resulting from the Java library originally coming with a <code>Properties</code> class that was a subclass of <code>Hashtable</code>.</p>

<h2>Immutability</h2>

<p>Immutable objects have huge advantages over mutable objects.</p>

<p>This is something has been known by the <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a> community since Lisp in the 1950s and <a href="http://en.wikipedia.org/wiki/ML_(programming_language)">ML</a> in the 1970s and <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</a> and <a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</a> in the 1980s.</p>

<p>But better late than never.</p>

<h3>My example: Apache HTTP Components</h3>

<p>I have observed that APIs in such languages as Java and Ruby have more and more gravitated toward the use of immutable objects. A very good pattern I have seen is to use a builder (which has internal mutable state) to finally build an instance of an immutable object. Just recently, I was using the <a href="http://hc.apache.org/httpcomponents-client-ga/">Java Apache HTTP Components library</a> and moved from the stable version (4.2.5) to the <a href="http://hc.apache.org/httpcomponents-client-dev/">beta version</a> (4.3-beta2) (because of bugs in the stable version), and happened to notice that a whole slew of methods I was calling were deprecated in favor of a <a href="http://www.apache.org/dist/httpcomponents/httpclient/RELEASE_NOTES.txt">new builder-based API</a>. Excerpts from the release notes of the beta:</p>

<ul>
<li>Support for Java 7 try-with-resources</li>
<li>Added fluent Builder classes</li>
<li>Deprecation of preference and configuration API based on HttpParams interface in favor of constructor injection and plain configuration objects</li>
<li>Reliance on object immutability instead of access synchronization for thread safety</li>
</ul>


<p>It was very good to see that decades-old lessons about good design are finally making it into important Java libraries!</p>

<h2>Types</h2>

<p>A lot of what Eric talked about had to do with types: type safety as well as the ramifications of types when evolving an API.</p>

<h3><code>null</code></h3>

<p>Several of his examples (see his slides) involved the problem of <code>null</code>, <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Hoare&rsquo;s billion-dollar mistake</a>, which I gave a little <a href="http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/">talk about last year</a>. Basically, <code>null</code> is a hole in a type system, and as a result, in Java one has to compensate by documenting in comments (but not having type checked) when and where something could be null or could not be, so that API clients know what to pass into methods and what to expect in return.</p>

<p>Java is not hopelessly behind: Java 8 has the <a href="http://download.java.net/jdk8/docs/api/java/util/Optional.html"><code>Optional&lt;T&gt;</code> class</a> to help programmers transition away from using <code>null</code>. C++14 has a <a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3527.html">proposal to add to the standard library <code>std::optional&lt;T&gt;</code></a>.</p>

<p>Admittedly, these are late patches that do not actually prevent continued use of <code>null</code> (ideally, a programming language should simply not even have it; languages such as ML and Haskell from the 1970s and 1980s happily did without this terrible construct), but these are definitely steps forward. New languages being designed and implemented today from a clean slate have no excuse to perpetuate this billion-dollar error: for example, <a href="http://www.rust-lang.org/">Rust</a> does not have <code>null</code>.</p>

<h3>Strings</h3>

<p>Eric noted that use a string is throwing away type safety.</p>

<p>I think the use of strings everywhere is a disaster second to that of using <code>null</code>. The problem is that strings have to be parsed for information. And many people do not actually correctly do such parsing and validation, hence the prevalence of <a href="http://en.wikipedia.org/wiki/SQL_injection">injection attacks</a>.</p>

<p>Even apart from security, the manipulation of strings that actually are supposed to have an intended structure is a major cause of late-caught runtime errors, and of programmer confusion. For example, <a href="http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding">this report on URLs</a> has been recirculating lately, because of errors in both libraries and client code when dealing with URLs as strings rather than as strongly typed data.</p>

<h3>Booleans</h3>

<p>Eric observed that even booleans are an API design smell: booleans are a special case of an enumeration of possible states. What happens if you want to add a new state but your old API used booleans?</p>

<h3>Exceptions</h3>

<p>Eric recommended <em>unchecked</em> over Java&rsquo;s <a href="http://en.wikipedia.org/wiki/Exception_handling#Checked_exceptions"><em>checked</em> exceptions</a>.</p>

<p>Sadly, in my Java programming in the past decade, I&rsquo;ve had to deal with the fact that Java made a big mistake by introducing checked exceptions in the first place; the ramifications were not thought out then. Note that C++11 has finally deprecated exception specifiers, and exceptions in ML have always been unchecked since the introduction in the 1970s, while Java ignored two decades of experience and went ahead and bolted on checked exceptions.</p>

<h4>Not strings!</h4>

<p>Eric advised that all failure data should be included in a thrown exception. Too often, we see exception throwing code that just throws a string message. Then the catcher has to try to parse this message for important data (which may not even be present in the string). If you&rsquo;re going to throw an exception, write a class and stash away important information, not a string message.</p>

<h2>A short note on primitive obsession</h2>

<p>My friend Adam who also attended the PittJUG meeting noted that what we&rsquo;re basically talking about is <a href="http://c2.com/cgi/wiki?PrimitiveObsession">primitive obsession</a>. The larger lesson here is that when designing robust, clear, and safe APIs, using primitives is often a mistake. Everything in the problem domain should really be modeled as its own type, not as a primitive.</p>

<h2>Evolution of an API</h2>

<p>The trickiest thing to get right is making an API so that it can evolve in the future without breaking backwards <em>compatibility</em>. This compatibility can be of different forms:</p>

<ul>
<li>behavioral</li>
<li>binary</li>
<li>source</li>
</ul>


<p>Eric talked a lot about weakening or strengthening contracts. There is a lot of hairy stuff involved, including knowledge of Java compiler internals. I think this is a space where more research is needed for the future in order to get the formal semantics of API evolution done right.</p>

<p><a href="https://code.google.com/p/japi-checker/">japi-checker</a> was mentioned as one tool that one can use for Java.</p>

<h2>Resources</h2>

<p>In the context of software development in Java, it is impossible to avoid mentioning <a href="http://en.wikipedia.org/wiki/Joshua_Bloch">Joshua Bloch</a>&rsquo;s early book (subsequently revised for a second edition), &ldquo;Effective Java&rdquo;. It is a daunting book, over 300 pages long, but it is an indispensable reference for anyone caring about good programming in Java. Eric called it the &ldquo;gold standard&rdquo;.</p>

<p>Check out his links to other resources on his slides.</p>

<h2>Package design</h2>

<p>A question came up about Eric&rsquo;s recommendation of using package-private visibility and his observation that a lot of people don&rsquo;t know about package-private, and don&rsquo;t design packages.</p>

<h3>Modules</h3>

<p>My observation is that people don&rsquo;t design packages because they&rsquo;re not actually modules. <em>Java was invented without a module system</em>, although Java 8 originally was slated to finally include a module system in the form of Jigsaw, which was, however, <a href="http://www.infoworld.com/d/application-development/project-jigsaw-delayed-until-java-9-198007">delayed to Java 9</a>. Meanwhile, there is <a href="http://en.wikipedia.org/wiki/OSGi">OSGi</a>.</p>

<p>I don&rsquo;t like sounding like a broken record, but <a href="http://en.wikipedia.org/wiki/Standard_ML">Standard ML came with a module system in the 1980s</a>, and there has been further work in the area of module systems, including first-class module systems that go beyond stratified module systems. The reality is that Java was born in the 1990s an &ldquo;old&rdquo; language, with no positive technical innovations, that feels more like a language from the 1960s.</p>

<h2>Conclusion</h2>

<p>Eric Stein gave an excellent talk about API design, both from the broadest perspective, focused on human beings and clients, and down and dirty with Java language features to avoid or use carefully.</p>

<h2>Addendum: my involvement with Java</h2>

<p>I had a chance to review some of my feelings I have had about programming in Java myself. I&rsquo;ve been a member of PittJUG for well over a decade now. I first signed up on the PittJUG mailing list in June 1999. I have not always been a regular attendee of the meetings: after some initial years of interest, I stopped attending for some years, and became regular again in 2009. So I&rsquo;ve been around Java since it was a very young language, and all the while knowing of all the problems with the language. So why did I chose it as my main programming language a decade ago, and why have I stuck with it for so long, until last last year, when <a href="http://franklinchen.com/blog/2013/01/11/2013-is-my-year-of-scala/">I decided to write no <em>new</em> Java code, and move on to Scala</a>? I will explain my decision-making in a forthcoming blog post.</p>

<h2>(Update of 2013-07-05)</h2>

<p>An interesting <a href="http://www.infoq.com/presentations/enterprise-api">presentation on APIs in the enterprise</a> came my way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing This New Programming Blog]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/24/introducing-this-new-programming-blog/"/>
    <updated>2013-06-24T09:40:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/24/introducing-this-new-programming-blog</id>
    <content type="html"><![CDATA[<p>Hi. My name is Franklin Chen. I already have a <a href="http://franklinchen.com/">personal Web site and blog</a>.</p>

<p>But I ended up only writing <a href="http://franklinchen.com/blog/categories/programming/">a little bit about programming on that blog</a>.</p>

<p>So I decided it was time to start a separate blog to devoted entirely to computer programming. The problem with the all-in-one personal blog was that I ended up never really working up a momentum to post the kinds of articles I wanted to write about programming.</p>

<h2>Why &ldquo;The Conscientious Programmer&rdquo;?</h2>

<p>At some point in the past year or two, I reflected on how I could best summarize my attitudes and aspirations as a programmer, as someone who loves programming and also works as a professional software developer.</p>

<p>I came up with the decidedly non-sexy term <em>conscientious programmer</em>. It is also a term that requires explanation, because you could easily interpret it as having a connotation that is moralistic, pretentious, or boring!</p>

<p>It is impossible to summarize in a sound bite what I mean by the term, so I have created this blog in order to continually illustrate, by example, the kinds of technical and other issues that come up in software development that I grapple with.</p>

<p>However, since a sound bite is required in some circumstances, here&rsquo;s what I currently have:</p>

<blockquote><p>I am a conscientious computer programmer, committed to designing, building, and testing correct, efficient, documented, maintainable software that meets users&#8217; real needs.</p></blockquote>


<p>My material will come from my own experiences (successes and failures, past and present) as well as from those of others. See the <a href="http://ConscientiousProgrammer.com/about/">About page</a> for more sound bites about what this blog will be about.</p>

<p>Let&rsquo;s start immediately with my personal experience from just the past couple of days!</p>

<h2>Future topics</h2>

<p>But first, here is a little sample of topics I will write about in the future:</p>

<ul>
<li>positive and negative experiences with statically typed languages</li>
<li>positive and negative experiences with dynamically typed languages</li>
<li>the good and bad of the polyglot programming world</li>
<li>what is object-oriented programming anyway?</li>
<li>what is functional programming anyway?</li>
<li>Agile notions</li>
<li>test-driven development, behavior-driven development, other testing topics</li>
<li>static analysis</li>
<li>code performance</li>
<li>human performance</li>
<li>controversies over the adjective &ldquo;pragmatic&rdquo;</li>
<li>how much theory should one know or use?</li>
<li>how to teach</li>
<li>how to learn</li>
<li>how to focus and not be a dilettante</li>
<li>how to spread ideas</li>
<li>is syntax important?</li>
<li>are macros a good idea?</li>
<li>are unsound type systems justified?</li>
<li>what is a type system anyway or what should it be?</li>
<li>monads</li>
<li>editors and IDEs</li>
<li>are software patterns a mistake in disguise?</li>
<li>software evolution and maintenance</li>
<li>planning for the future vs. getting it done today</li>
<li>role of emotion in decision making</li>
<li>what is &ldquo;community&rdquo;?</li>
<li>politics of open source vs. free software</li>
<li>open standards</li>
<li>questions of diversity in our profession</li>
<li>education</li>
</ul>


<h2>The dilemmas I encountered when deciding to create this blog</h2>

<p>I already encountered a dilemma some years ago when I thought that I should have a personal blog to regularly post to. I had messed around with Blogger and WordPress and they were not at all suitable for me. Luckily, I discovered <a href="http://octopress.org/">Octopress</a> and it got me going very quickly. I&rsquo;m still using it.</p>

<p>If all were going smoothly with the personal blog, then I probably would not have any dilemma when deciding to create the new blog; I would just use exactly the same Octopress platform.</p>

<p><em>Or would I?</em></p>

<h3>Desire for novelty: good or bad?</h3>

<p>I am not immune to the thrill of novelty. I am not an extreme <a href="http://en.wikipedia.org/wiki/Early_adopter">early adopter</a>, but I also do not entirely subscribe to the philosophy <a href="http://en.wiktionary.org/wiki/if_it_ain%27t_broke,_don%27t_fix_it">&ldquo;if it ain&rsquo;t broke, don&rsquo;t fix it&rdquo;</a>. I like opportunities for doing something differently and better than in the past, but I like to evaluate these rationally. This is an example of what I mean by &ldquo;conscientious programmer&rdquo;: <em>always be aware of risks and tradeoffs when making any kind of decision</em>.</p>

<p>One thing that is sometimes forgotten in the rush to make a decision is that it is premature to immediately start making lists of risks and tradeoffs. First, you have to step back and figure out what the real goals are. Many projects fail because the assessments and the followup actions were <em>correct</em>, but toward the <em>wrong</em> goal. <em>Solving the correct problem</em> is more important than <em>solving the wrong problem correctly</em>.</p>

<p>In the case of choosing which software to use for my new blog, there were actually several considerations.</p>

<h3>Unstable branch of Octopress</h3>

<p>Octopress&rsquo;s stable <a href="https://github.com/imathis/octopress"><code>master</code> branch</a> is a continuation of version 2.0. At some point for my personal blog, I got excited about trying out the <a href="https://github.com/imathis/octopress/tree/2.1">unstable <code>2.1</code> branch</a> because of various improvements. I migrated over, and periodically endured a surprising amount of pain. It wasn&rsquo;t just because I had to manually move files around and resolve merge conflicts and refactor my config files, but also bugs kept popping up, and I had to spend time fixing them.</p>

<p>In retrospect, <em>it was a mistake being an early adopter</em> of branch <code>2.1</code>. I stopped pulling and merging over a month ago, when it became clear that the migration to <a href="http://jekyllrb.com/">Jekyll</a> 1.0 was causing major refactorings by the developers of the Octopress <code>2.1</code> branch that were breaking everything on my blog.</p>

<p>It would <em>not</em> have been a mistake if my goal were to help test and develop Octopress. That is a noble goal, because Octopress has been a <em>huge</em> positive contributor to the world of blogging, as a static site generator that is programmable and comes with a good default theme (which I still use). But my <em>real goal</em> is to write and post content, not spend my time fixing or configuring Octopress.</p>

<h3>Coming back to Octopress <code>master</code> branch?</h3>

<p>The official recommendation of the Octopress team right now (<a href="https://twitter.com/octopress/status/348465809624027136">as of two days ago, June 22</a>) is to use <code>master</code>, because once <code>2.1</code> is cleaned up, it will actually become <code>3.0</code> and there will be a tested migration path from <code>2.0</code>.</p>

<p>I confess to having a psychological resistance to &ldquo;downgrading&rdquo;, for this new blog, from my <code>2.1</code>-based setup on my personal blog, but this is exactly the moment when it is necessary to remember that I want to be a <em>conscientious</em> programmer.</p>

<h3>Switching to a new blogging platform?</h3>

<p>The idea also occurred to me to use a completely different blogging platform. <a href="http://jaspervdj.be/hakyll/">Hakyll</a> has always seemed appealing to me, because it is driven by Haskell (Octopress is driven by Ruby). I prefer programming in Haskell to programming in Ruby, both because of the static type safety and because of the expected considerable performance improvement in site generation (right now, full generation of my personal blog takes a very long time).</p>

<p>But after looking at Hakyll, and being tempted to get into it, I decided that my real goal is <em>not</em> to spend a lot of time hacking Haskell as a personal side project, and creating cool themes and features for Hakyll, but to get a blog up and running so that I can focus on content for the blog. <a href="http://en.wiktionary.org/wiki/bikeshedding">Bikeshedding</a> is not what I&rsquo;m here for.</p>

<p>So I used Octopress again for this new blog.</p>

<p>By the way, if you are interested in using Octopress, here is a great <a href="http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/">tutorial</a>.</p>

<h3>Flexibility</h3>

<p>Another thing I try to remember is to avoid getting backed into a corner when it comes to decision-making. I like to think about the future as well as the present. <em>What if&hellip;?</em></p>

<p>I know that if I wanted to, in the future I could switch blogging platforms at will, by doing some programming. The decisions that I am making <em>now</em> are not irreversible. Using a programmable static site generator means that I have full control over paths, styles, generation of RSS feeds, insertion of JavaScript-based features (such as the <a href="http://disqus.com/">Disqus</a> commenting system), etc.</p>

<p>Thinking up front about the future and how it might be different and what I might need or want to do in the future is not just idle daydreaming; I find it an essential final step in making a decision <em>now</em> and focusing on action <em>now</em>, with the peace of mind that I no longer have to worry about the future because I already have a <a href="http://en.wikipedia.org/wiki/Plan_B">Plan B</a>. We must always assume possible failure and future change. But we don&rsquo;t have to panic about it.</p>

<h2>Conclusion</h2>

<p>I&rsquo;ve started this new programming blog, using the stable <code>master</code> branch of Octopress. I hope we&rsquo;ll share some interesting experiences here!</p>
]]></content>
  </entry>
  
</feed>
