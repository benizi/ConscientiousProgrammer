<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Conscientious Programmer</title>
    <link>http://ConscientiousProgrammer.com/</link>
    <description>Recent content on The Conscientious Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Dec 2015 07:55:59 -0500</lastBuildDate>
    <atom:link href="http://ConscientiousProgrammer.com/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>24 days of Hackage, 2015: day 3: HSpec; the importance of testing</title>
      <link>http://conscientiousprogrammer.com/blog/2015/12/03/24-days-of-hackage-2015-day-3-hspec-the-importance-of-testing/</link>
      <pubDate>Thu, 03 Dec 2015 07:55:59 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/12/03/24-days-of-hackage-2015-day-3-hspec-the-importance-of-testing/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents-for-the-whole-series:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Table of contents for the whole series&lt;/h2&gt;

&lt;p&gt;A table of contents is at the top of the article for &lt;a href=&#34;./blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;day 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;day-3:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Day 3&lt;/h2&gt;

&lt;p&gt;I spent my formative years writing software before &amp;ldquo;testing framework&amp;rdquo;
was in my vocabulary, before
&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;&amp;ldquo;test-driven development&amp;rdquo;&lt;/a&gt;
was a thing. I shudder to think of those years, because now I&amp;rsquo;m a
believer in tests and even in test-driven development (TDD), according to my
interpretation of what that means (since everyone has a different
definition).&lt;/p&gt;

&lt;p&gt;There are a bunch of testing tools that have been available in the
Haskell ecosystem for some time. In fact, Ollie in his &amp;ldquo;24 Days of
Hackage&amp;rdquo; covered&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;&lt;code&gt;QuickCheck&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-08-24-days-of-hackage.html&#34;&gt;in 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/doctest&#34;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2013-12-18-doctest.html&#34;&gt;in 2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://documentup.com/feuerbach/tasty&#34;&gt;&lt;code&gt;tasty&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2013-12-03-24-days-of-hackage-tasty.html&#34;&gt;in 2013&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and I heartily recommend looking those up.&lt;/p&gt;

&lt;p&gt;But today I&amp;rsquo;m going to show use of &lt;a href=&#34;http://hspec.github.io/&#34;&gt;&lt;code&gt;HSpec&lt;/code&gt;&lt;/a&gt;
(noting that a framework like &lt;code&gt;tasty&lt;/code&gt; or
&lt;a href=&#34;`https://batterseapower.github.io/test-framework/&#34;&gt;&lt;code&gt;test-framework&lt;/code&gt;&lt;/a&gt;
are a lot fancier).&lt;/p&gt;

&lt;h2 id=&#34;why-tests:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Why tests?&lt;/h2&gt;

&lt;p&gt;I first got into writing tests for two reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using languages like Perl, it was essentially impossible to
be productive without writing tests.&lt;/li&gt;
&lt;li&gt;Such languages spawned the tooling to ease the pain of writing,
running, and getting feedback from tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But after getting started, I didn&amp;rsquo;t look back, even when using other
languages such as Scala and Haskell. Today, no matter what language
I&amp;rsquo;m using, I expect there to be a decent testing framework I can
immediately start using. I even did the experiment of
&lt;a href=&#34;http://conscientiousprogrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing/&#34;&gt;learning a brand new language, Elixir, through writing tests&lt;/a&gt;. I
cannot take a language ecosystem seriously if there is not at least
some reasonable default standard testing framework that is part of it.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a myth (or joke) about using languages like Haskell that have
a decent type system: that you don&amp;rsquo;t need tests because you have
types. Hence the unfortunate phrase &amp;ldquo;tests versus types&amp;rdquo;. I completely
disagree with this. I want my types and I want my tests too: I want to
use every possible tool to help me design, verify, and troubleshoot my
code! At &lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh TechFest&lt;/a&gt; 2014, I gave a
talk
&lt;a href=&#34;http://www.slideshare.net/FranklinChen/presentation-37257104&#34;&gt;&amp;ldquo;Exploring type-directed, test-driven development&amp;rdquo;&lt;/a&gt;
giving my personal view of making the best use of both types and tests
as part of an iterative process of refining understanding and
expression of a solution for a task
(this was before the term &amp;ldquo;type-directed development&amp;rdquo; became the title
of a coming book on using Idris,
&lt;a href=&#34;https://www.manning.com/books/type-driven-development-with-idris&#34;&gt;&amp;ldquo;Type-directed development with Idris&amp;rdquo;&lt;/a&gt;,
whose completion I look forward to!).&lt;/p&gt;

&lt;p&gt;The general topic of how best to combine types and tests is well
outside the scope of this article, but I just want to make one claim:
the primary benefits of tests come from their role as &lt;em&gt;explicit
documentation of intent during a design process&lt;/em&gt;. Ideally, we prefer to
write down expressive types to fully encode intent, and dependently
typed languages such as Idris enable transforming a lot of what used
to be runtime tests into compile-time tests encoded as type checking,
and you can do a bunch of this with Haskell already if you work hard
enough (and
&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell&#34;&gt;Dependent Haskell&lt;/a&gt;
is in progress), but there is nothing wrong with writing tests today
that someday you might turn into types.&lt;/p&gt;

&lt;p&gt;By sheer coincidence, a
&lt;a href=&#34;https://blogs.janestreet.com/testing-with-expectations/&#34;&gt;new testing framework was just announced for OCaml&lt;/a&gt;. It&amp;rsquo;s
great that testing is being taken more seriously everywhere and by
everyone.&lt;/p&gt;

&lt;h2 id=&#34;why-hspec:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Why HSpec?&lt;/h2&gt;

&lt;p&gt;Why do I use HSpec, and not one of the fancier testing frameworks? I&amp;rsquo;m
not ruling out migrating to one of those in the future, but for now,
HSpec just feels really easy and comfortable to use, and is good
enough for me. I am so freaking lazy that I might not write tests if I
get intimidated by any possible sources of friction. And I&amp;rsquo;ll admit
that its &lt;a href=&#34;http://hspec.github.io/&#34;&gt;Web site&lt;/a&gt; is pretty good! Marketing
matters, I guess.&lt;/p&gt;

&lt;p&gt;Also, when I was using Ruby, I got accustomed to using
&lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt;, which of course was the inspiration for
HSpec.&lt;/p&gt;

&lt;h2 id=&#34;it-s-all-about-auto-discovery:740606311d3fcf0ba2f14607a358bd73&#34;&gt;It&amp;rsquo;s all about auto-discovery&lt;/h2&gt;

&lt;p&gt;Before even saying anything more about HSpec, I want to say that one
selling point of HSpec for me was auto-discovery. Check out the
&lt;a href=&#34;http://hspec.github.io/hspec-discover.html&#34;&gt;manual&lt;/a&gt; for full details.&lt;/p&gt;

&lt;p&gt;Auto-discovery means that given a simple boilerplate setup, you can
use &amp;ldquo;convention over configuration&amp;rdquo; and just give test module file
names matching &lt;code&gt;*Spec.hs&lt;/code&gt; and sticking them anywhere embedded inside
your &lt;code&gt;test/&lt;/code&gt; directory and they will all be picked up when you run
&lt;code&gt;stack test&lt;/code&gt;. This means being able to write test modules at will,
rename, delete, add, refactor them and not have to worry about
manually writing a boilerplate driver module that tediously imports
all the test modules and wires them up into a single project test
suite.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the setup I have for all my projects that use HSpec. I provide
it from my sample project template described on
&lt;a href=&#34;./blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;day 1&lt;/a&gt;,
so you can now generate a starter project with HSpec all ready to go
by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack new my-new-project franklinchen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a &lt;code&gt;test/&lt;/code&gt; directory with a single file in it, the
auto-discovery file named &lt;code&gt;test/Spec.hs&lt;/code&gt;, which has a single line of
code, actually a comment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# OPTIONS_GHC -F -pgmF hspec-discover #-}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because when you have HSpec installed, a program
&lt;code&gt;hspec-discover&lt;/code&gt; also gets installed, and it&amp;rsquo;s called by GHC to do the
work of auto-discovery. Each test module should export &lt;code&gt;spec&lt;/code&gt;, because
that&amp;rsquo;s what the auto-discovery program will collect to call.&lt;/p&gt;

&lt;h2 id=&#34;writing-and-refactoring-tests:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Writing and refactoring tests&lt;/h2&gt;

&lt;p&gt;I didn&amp;rsquo;t mention it in
&lt;a href=&#34;./blog/2015/12/02/24-days-of-hackage-2015-day-2-regexes-with-pcre-heavy-standalone-haskell-scripts-using-stack/&#34;&gt;yesterday&amp;rsquo;s post about using a regex&lt;/a&gt;
to solve a problem, but when I wrote out examples of strings that are
supposed to match a regex and examples of strings that are not
supposed to match it, I simply copied and pasted those examples from
tests I had written.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s walk through writing &lt;code&gt;PCREHeavyExampleSpec.hs&lt;/code&gt;, step by
step.&lt;/p&gt;

&lt;h3 id=&#34;initial-version-of-test-code:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Initial version of test code&lt;/h3&gt;

&lt;p&gt;First, I&amp;rsquo;ll present code that I never actually wrote initially, because I
skipped this step and immediately refactored it in my mind. But I
decided that to showcase Haskell&amp;rsquo;s strength as a language for
embedding a domain-specific language (DSL), I retroactively wrote the
most obvious code that shows how HSpec works without introducing
non-HSpec considerations. (The code is on branch &lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage/tree/boilerplated-hspec&#34;&gt;&lt;code&gt;boilerplated-hspec&lt;/code&gt;&lt;/a&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module PCREHeavyExampleSpec where

import PCREHeavyExample (mediaRegex)

import Test.Hspec (Spec, describe, it, shouldSatisfy)
import Text.Regex.PCRE.Heavy ((=~))

-- | Required for auto-discovery.
spec :: Spec
spec =
  describe &amp;quot;pcre-heavy&amp;quot; $ do
    describe &amp;quot;match&amp;quot; $ do
      it &amp;quot;has audio&amp;quot; $ do
        &amp;quot;@Media:\thas-audio,   audio&amp;quot; `shouldSatisfy` (=~ mediaRegex)
      it &amp;quot;has video&amp;quot; $ do
        &amp;quot;@Media:\thas-video,video&amp;quot; `shouldSatisfy` (=~ mediaRegex)
      it &amp;quot;has audio but missing&amp;quot; $ do
        &amp;quot;@Media:\thas-audio-but-missing, audio, missing&amp;quot; `shouldSatisfy` (=~ mediaRegex)
      it &amp;quot;has video but unlinked&amp;quot; $ do
        &amp;quot;@Media:\thas-video-but-unlinked  , video,      unlinked&amp;quot; `shouldSatisfy` (=~ mediaRegex)
    describe &amp;quot;no match&amp;quot; $ do
      it &amp;quot;no audio or video&amp;quot; $ do
        &amp;quot;@Media:\tno-audio-or-video&amp;quot; `shouldSatisfy` (not . (=~ mediaRegex))
      it &amp;quot;missing media field&amp;quot; $ do
        &amp;quot;@Media:\tmissing-media-field, unlinked&amp;quot; `shouldSatisfy` (not . (=~ mediaRegex))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main thing to understand is that for simplest use (without
fixtures, effects, etc.), a basic description-labeled spec item is
introduced with &lt;code&gt;it&lt;/code&gt;, and a labeled &lt;code&gt;describe&lt;/code&gt; can contain many of
those as well as sub-&lt;code&gt;describe&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Here, we have two sub-&lt;code&gt;Spec&lt;/code&gt;s, one for examples that &lt;em&gt;should match&lt;/em&gt; the regex
and one for examples that &lt;em&gt;should not&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note that we imported and used &lt;code&gt;mediaRegex&lt;/code&gt; from module
&lt;code&gt;PCREHeavyExample&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike in our example program yesterday, which used &lt;code&gt;scan&lt;/code&gt; from
&lt;code&gt;pcre-heavy&lt;/code&gt; to collect match bindings, we only care whether something
matched, so we use its &lt;code&gt;=~&lt;/code&gt; operator instead that takes an input
string and a regex, and returns a &lt;code&gt;Bool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The test code is concise enough, and the problem domain well
understood enough, that even if the syntax looks strange, I hope it is
clear &lt;em&gt;what&lt;/em&gt; is going on, even if not clear &lt;em&gt;how&lt;/em&gt; it&amp;rsquo;s being done.&lt;/p&gt;

&lt;h3 id=&#34;a-note-on-syntax-in-haskell-code:740606311d3fcf0ba2f14607a358bd73&#34;&gt;A note on syntax in Haskell code&lt;/h3&gt;

&lt;p&gt;Now is a good time to talk about the issue of syntax in Haskell code,
because I&amp;rsquo;m expecting that if you are reading this, you might not
already be familiar with HSpec, and I also cannot assume that you are
already a seasoned Haskell developer, because I&amp;rsquo;m writing this article
series not for advanced Haskellers but for those starting to dip into
the library ecosystem and even friends with limited experience with
Haskell.&lt;/p&gt;

&lt;p&gt;It is convenient to use
&lt;a href=&#34;https://wiki.haskell.org/Section_of_an_infix_operator&#34;&gt;operator sectioning syntax&lt;/a&gt;
above, but I could have written&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;text `shouldSatisfy` (\inputString -&amp;gt; inputString =~ mediaRegex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Furthermore, it is also convenient to use
&lt;a href=&#34;https://wiki.haskell.org/Infix_operator&#34;&gt;infix syntax for named functions&lt;/a&gt;
when sensible, but it is not required. I could have written in
bare-bones style&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;shouldSatisfy text (\inputString -&amp;gt; inputString =~ mediaRegex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the cute &lt;code&gt;(not . (=~ mediaRegex))&lt;/code&gt; can be written as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;\inputString -&amp;gt; not (inputString =~ mediaRegex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I mention these facts about syntax because I have often been told by
people looking into Haskell that it&amp;rsquo;s confusing because of all the
operator syntax. But you don&amp;rsquo;t have to use this syntax if you don&amp;rsquo;t
want to: much that looks weird in Haskell is not something about the
language itself, but just about optional syntax for which there is
&amp;ldquo;normal&amp;rdquo; syntax if you prefer that. It&amp;rsquo;s not just about operators, but
about a lot of other optional syntax as well; if you are still
relatively new to Haskell syntax, Gabriel Gonzalez wrote a nice
&amp;ldquo;syntax decoding&amp;rdquo; tutorial covering some of that
&lt;a href=&#34;http://www.haskellforall.com/2014/10/how-to-desugar-haskell-code.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But saying &amp;ldquo;you don&amp;rsquo;t have to write it&amp;rdquo; is no use if &amp;ldquo;everyone is doing
it&amp;rdquo; and you have to &lt;em&gt;read&lt;/em&gt; it anyway. So it is the community as a whole
that sets the tone for what gets written and what gets read.&lt;/p&gt;

&lt;p&gt;One reason I like HSpec is that it does not go overboard with
syntax. &lt;a href=&#34;https://hackage.haskell.org/package/HUnit&#34;&gt;HUnit&lt;/a&gt;, an older
testing framework, provided funny operators that really turned me off,
such as
&lt;a href=&#34;https://hackage.haskell.org/package/HUnit-1.3.0.0/docs/Test-HUnit-Base.html&#34;&gt;&lt;code&gt;~=?&lt;/code&gt;&lt;/a&gt;. I
like Gabriel Gonzalez&amp;rsquo;s article
&lt;a href=&#34;http://www.haskellforall.com/2015/09/how-to-make-your-haskell-code-more.html&#34;&gt;&amp;ldquo;How to make your Haskell code more readable to non-Haskell programmers&amp;rdquo;&lt;/a&gt;. It
applies also to making the code more readable to experienced Haskell
programmers!&lt;/p&gt;

&lt;p&gt;I admit to having been guilty of some practices he calls out. I have
mixed feelings about giving them all up, all the time. For example, it
seems idiomatic to use the infix function operator &lt;code&gt;$&lt;/code&gt; for embedded
DSLs such HSpec, rather than parenthesize everything. I&amp;rsquo;m curious what
you think. Would you prefer to read the following, which is what the
&lt;code&gt;$&lt;/code&gt; operator avoids requiring?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;spec :: Spec
spec =
  describe &amp;quot;pcre-heavy&amp;quot; (do
    describe &amp;quot;match&amp;quot; (do
      it &amp;quot;has audio&amp;quot; (do
        &amp;quot;@Media:\thas-audio,   audio&amp;quot; `shouldSatisfy` (=~ mediaRegex)
        )
      -- ...
      )
    describe &amp;quot;no match&amp;quot; (do
      -- ...
      )
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I personally think that languages with a &lt;code&gt;begin&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; kind of block
(such as Pascal, Ruby) instead of braces or parentheses have an
advantage because that is more readable (to me), and recent research
&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2534973&#34;&gt;&amp;ldquo;An empirical investigation into programming language syntax&amp;rdquo;&lt;/a&gt;
claims to have evidence of this.&lt;/p&gt;

&lt;p&gt;Meanwhile, we make do with the language we have, and learn and teach
its quirks and features. It&amp;rsquo;s regrettable that English and Chinese are
really hard languages to use too, but we make do if we want to be part
of the community in the United States or in China. It goes both ways:
if we want to be part of the community, we have to invest in
understanding how it operates, and if the community wants to grow, it
has to reach out to newcomers rather than just say &amp;ldquo;you&amp;rsquo;re on your
own, deal with it&amp;rdquo;. Think of the immense amount of effort that goes
into promoting universal literacy.&lt;/p&gt;

&lt;h3 id=&#34;a-one-minute-review-of-test-driven-development:740606311d3fcf0ba2f14607a358bd73&#34;&gt;A one-minute review of test-driven development&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s continue with the test writing process.&lt;/p&gt;

&lt;p&gt;When doing test-driven development, we write an HSpec spec first,
&lt;em&gt;before even writing any implementation code&lt;/em&gt;. Test-driven development is
where you show how something is supposed to work before you actually
write that something. In a typed setting, this means we get a
compile-time error when first trying to run the test, which we fix by
creating &lt;code&gt;PCREHeavyExample&lt;/code&gt; as a new module with a stub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module PCREHeavyExample (mediaRegex) where

mediaRegex = undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, every test fails (in the terminal, the failures are
highlighted in red):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack test
PCREHeavyExample
  pcre-heavy
    match
      has audio FAILED [1]
      has video FAILED [2]
      has audio but missing FAILED [3]
      has video but unlinked FAILED [4]
    no match
      no audio or video FAILED [5]
      missing media field FAILED [6]

Failures:

  test/PCREHeavyExampleSpec.hs:13:
  1) PCREHeavyExample.pcre-heavy.match has audio
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:15:
  2) PCREHeavyExample.pcre-heavy.match has video
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:17:
  3) PCREHeavyExample.pcre-heavy.match has audio but missing
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:19:
  4) PCREHeavyExample.pcre-heavy.match has video but unlinked
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:22:
  5) PCREHeavyExample.pcre-heavy, no match, no audio or video
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:24:
  6) PCREHeavyExample.pcre-heavy, no match, missing media field
       uncaught exception: ErrorCall (Prelude.undefined)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-tangent-on-ghc-s-error-reporting:740606311d3fcf0ba2f14607a358bd73&#34;&gt;A tangent on GHC&amp;rsquo;s error reporting&lt;/h4&gt;

&lt;p&gt;A super-annoying thing, and a long-standing embarrassment for GHC, is
that using &lt;code&gt;undefined&lt;/code&gt; doesn&amp;rsquo;t trigger useful error reporting. I
look forward to
&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-8.0.1&#34;&gt;GHC 8.0&lt;/a&gt;&amp;rsquo;s
new feature of
&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/ExplicitCallStack/ImplicitLocations&#34;&gt;implicit parameters providing callstacks/source locations&lt;/a&gt;. This
stuff is important! It&amp;rsquo;s time we got line numbers and call stacks for
errors without having to jump through hoops.&lt;/p&gt;

&lt;h3 id=&#34;skipping-to-the-end-assume-we-finished-the-implementation:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Skipping to the end, assume we finished the implementation&lt;/h3&gt;

&lt;p&gt;OK, let&amp;rsquo;s assume we finished the implementation, which is simply
writing the regex for &lt;code&gt;mediaRegex&lt;/code&gt;. Then the tests pass (and in the
terminal they display in green):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;PCREHeavyExample
  pcre-heavy
    match
      has audio
      has video
      has audio but missing
      has video but unlinked
    no match
      no audio or video
      missing media field

Finished in 0.0010 seconds
6 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tests-are-code-too:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Tests are code too!&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s easy to not take test code seriously and not hold it up to the
same standards as &amp;ldquo;regular&amp;rdquo; code. That is a mistake: test code should
actually be cleaner and tighter than main implementation code because
it is our &lt;em&gt;executable documentation&lt;/em&gt; and what we need to make as easy
to read, write, and modify as requirements change.&lt;/p&gt;

&lt;h3 id=&#34;refactoring-part-1:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Refactoring, part 1&lt;/h3&gt;

&lt;p&gt;Notice the tremendous amount of code duplication in the tests. We can
do better than this item-by-item copy-and-paste job. We can write code
to generate all the matching examples, by refactoring the relevant
data into a table and a function that maps over the table to get a
composite &lt;code&gt;Spec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a table that pairs a test description with each example input
string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;matchExamples :: [(String, String)]
matchExamples =
  [ ( &amp;quot;has audio&amp;quot;
    , &amp;quot;@Media:\thas-audio,   audio&amp;quot;
    )
  , ( &amp;quot;has video&amp;quot;
    , &amp;quot;@Media:\thas-video,video&amp;quot;
    )
  , ( &amp;quot;has audio but missing&amp;quot;
    , &amp;quot;@Media:\thas-audio-but-missing, audio, missing&amp;quot;
    )
  , ( &amp;quot;has video but unlinked&amp;quot;
    , &amp;quot;@Media:\thas-video-but-unlinked  , video,      unlinked&amp;quot;
    )
  ]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a function that generates a spec item given a description/input pair.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;matchSpec :: (String, String) -&amp;gt; Spec
matchSpec (description, text) =
  it description $ do
    text `shouldSatisfy` (=~ mediaRegex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly for the non-matching examples.&lt;/p&gt;

&lt;p&gt;And the refactored &lt;code&gt;Spec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;spec :: Spec
spec =
  describe &amp;quot;pcre-heavy&amp;quot; $ do
    describe &amp;quot;match&amp;quot; $ do
      mapM_ matchSpec matchExamples
    describe &amp;quot;no match&amp;quot; $ do
      mapM_ nonMatchSpec nonMatchExamples
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;refactoring-part-2:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Refactoring, part 2&lt;/h3&gt;

&lt;p&gt;Uh oh, I said &amp;ldquo;similarly&amp;rdquo;. Usually when something is &amp;ldquo;similar&amp;rdquo;,
there&amp;rsquo;s more refactoring that might be doable.&lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;Haskell makes refactoring joyful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Haskell is a expressive language, where &amp;ldquo;might&amp;rdquo; usually means &amp;ldquo;can&amp;rdquo;,
and &amp;ldquo;can&amp;rdquo; often means &amp;ldquo;should&amp;rdquo;. In my experience, Haskell&amp;rsquo;s &lt;em&gt;single
best quality&lt;/em&gt; in terms of user experience is its support for
refactoring at will and with confidence that everything will still
mean exactly the same thing after as before the refactoring.&lt;/p&gt;

&lt;p&gt;I particularly look forward to the
ongoing development of a
&lt;a href=&#34;https://github.com/haskell/haskell-ide-engine&#34;&gt;universal Haskell IDE engine&lt;/a&gt;
refactoring even easier, e.g., folding in
&lt;a href=&#34;http://www.cs.kent.ac.uk/projects/refactor-fp/&#34;&gt;&lt;code&gt;HaRe&lt;/code&gt;&lt;/a&gt; support.&lt;/p&gt;

&lt;p&gt;We see a pattern of positive examples and negative examples using
a predicate and its negation. Let&amp;rsquo;s abstract this pattern out. Let&amp;rsquo;s
collect the positive and negative examples in one place. For
simplicity, let&amp;rsquo;s tuple them.&lt;/p&gt;

&lt;p&gt;And now that we&amp;rsquo;re dealing with arbitrary predicates, we no longer
have to hardcode &lt;code&gt;(=~ mediaRegex)&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; everywhere. We can &lt;em&gt;go
polymorphic&lt;/em&gt; in the predicate type, replacing &lt;code&gt;matchSpec&lt;/code&gt; and
&lt;code&gt;nonMatchSpec&lt;/code&gt; with a single &lt;code&gt;predSpec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The final result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;spec :: Spec
spec =
  describePredicate &amp;quot;pcre-heavy&amp;quot;
    (&amp;quot;match&amp;quot;, (=~ mediaRegex))
    (matchExamples, nonMatchExamples)

describePredicate :: Show a =&amp;gt;
     String                           -- ^ description
  -&amp;gt; (String, a -&amp;gt; Bool)              -- ^ (base description, predicate)
  -&amp;gt; ( [(String, a)], [(String, a)] ) -- ^ positive and negative examples
  -&amp;gt; Spec
describePredicate description
                  (baseDescription, predicate)
                  (positiveExamples, negativeExamples) =
  describe description $ do
    describe baseDescription $ do
      mapM_ (predSpec predicate) positiveExamples
    describe (&amp;quot;not &amp;quot; ++ baseDescription) $ do
      mapM_ (predSpec (not . predicate)) negativeExamples

predSpec :: Show a =&amp;gt; (a -&amp;gt; Bool) -&amp;gt; (String, a) -&amp;gt; Spec
predSpec predicate (description, a) =
  it description $ do
    a `shouldSatisfy` predicate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;describePredicate&lt;/code&gt; and &lt;code&gt;predSpec&lt;/code&gt; can then be pulled out
into a test utilities module for use by other specs using the same
pattern.&lt;/p&gt;

&lt;p&gt;Unfortunately, this refactoring, although good in some ways, came with
a cost. It doesn&amp;rsquo;t look so great to me. Does it to you?&lt;/p&gt;

&lt;h3 id=&#34;refactoring-part-3:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Refactoring, part 3?&lt;/h3&gt;

&lt;p&gt;One reason the refactored code doesn&amp;rsquo;t actually look so great now is
that our refactoring led to many nested primitive types
(&lt;a href=&#34;http://c2.com/cgi/wiki?PrimitiveObsession&#34;&gt;&amp;ldquo;primitive obsession&amp;rdquo;&lt;/a&gt;)
and an explosion in number of positional arguments to our new
&lt;code&gt;describePredicate&lt;/code&gt;. Let&amp;rsquo;s face it, calling &lt;code&gt;describePredicate&lt;/code&gt; is
cryptic, calling out for &amp;ldquo;keyword arguments&amp;rdquo; (in a language that
supports them).&lt;/p&gt;

&lt;p&gt;In Haskell, &amp;ldquo;keyword arguments&amp;rdquo; means there&amp;rsquo;s a configuration data
type crying to be defined. A related code smell is that documenting
the parameters to &lt;code&gt;describePredicate&lt;/code&gt; is now super-awkward. Each of
those parameters should be a thing in itself, not just parenthesized,
bracketed, tupled glop.&lt;/p&gt;

&lt;p&gt;If we are really serious about refactoring, we should wrap these
things into new data types that are an explicit model of what we want
to do when classifying and testing examples.  We might even turn the
whole thing into its own embedded sub-DSL of HSpec.&lt;/p&gt;

&lt;p&gt;This illustrates how refactoring can sometimes lead to new complexity
that didn&amp;rsquo;t exist before. There are tradeoffs constantly. Abstraction
for its own sake does not always make things clearer. For this reason,
I did not actually go this far initially for the example code
yesterday: I did not feel it was worth the trouble. I&amp;rsquo;ve left it in
the &lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage/tree/refactoring-2&#34;&gt;&lt;code&gt;refactoring-2&lt;/code&gt;&lt;/a&gt; branch of the GitHub repo.&lt;/p&gt;

&lt;h2 id=&#34;combining-testing-frameworks:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Combining testing frameworks&lt;/h2&gt;

&lt;p&gt;One last thing about HSpec: you can use it within a larger testing
framework, or you can embed another testing framework into it as
well. For example, I like to use
&lt;a href=&#34;http://hspec.github.io/quickcheck.html&#34;&gt;QuickCheck through HSpec&lt;/a&gt; as
part of &amp;ldquo;type-directed development&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Testing is important, but few love to do it. Making it easy to write
and use tests goes a long way toward actually doing it. I like HSpec
because it&amp;rsquo;s easy to write, and because of auto-discovery. I hope you
consider using it for your own projects if you don&amp;rsquo;t already use it or
some other testing framework.&lt;/p&gt;

&lt;h2 id=&#34;all-the-code:740606311d3fcf0ba2f14607a358bd73&#34;&gt;All the code&lt;/h2&gt;

&lt;p&gt;All my code for my article series are at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>24 days of Hackage, 2015: day 2: Regexes with pcre-heavy; standalone Haskell scripts using Stack</title>
      <link>http://conscientiousprogrammer.com/blog/2015/12/02/24-days-of-hackage-2015-day-2-regexes-with-pcre-heavy-standalone-haskell-scripts-using-stack/</link>
      <pubDate>Wed, 02 Dec 2015 07:50:12 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/12/02/24-days-of-hackage-2015-day-2-regexes-with-pcre-heavy-standalone-haskell-scripts-using-stack/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents-for-the-whole-series:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Table of contents for the whole series&lt;/h2&gt;

&lt;p&gt;A table of contents is at the top of the article for &lt;a href=&#34;./blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;day 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;day-2:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Day 2&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t laugh, but once upon a time, I made Perl my main programming
language of choice (between around 1999 and 2010). There were many
reasons for this, but one reason was that Perl made it very easy to do
text processing using regexes.&lt;/p&gt;

&lt;p&gt;If you are a seasoned Haskeller, you might be thinking, &amp;ldquo;Why not use a
real parser instead?&amp;ldquo;, such as the venerable
&lt;a href=&#34;https://hackage.haskell.org/package/parsec&#34;&gt;parsec&lt;/a&gt;, which was covered in a
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-10-24-days-of-hackage-parsec.html&#34;&gt;2012 day of Hackage&lt;/a&gt;?
(Or, today, one could consider one of several other newer alternative libraries
for parsing. A later day of Hackage will say more about this!)&lt;/p&gt;

&lt;p&gt;After all, Jamie Zawinski famously once wrote, &lt;em&gt;&amp;ldquo;Some people, when
confronted with a problem, think &amp;lsquo;I know, I&amp;rsquo;ll use regular
expressions.&amp;rsquo;  Now they have two problems.&amp;rdquo;&lt;/em&gt; I even gave a talk at
&lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh Tech Fest&lt;/a&gt; in 2013,
&lt;a href=&#34;http://www.slideshare.net/FranklinChen/handout-22302440&#34;&gt;&amp;ldquo;Stop overusing regular expressions!&amp;rdquo;&lt;/a&gt;,
in which I promoted writing parsers rather than writing regexes.&lt;/p&gt;

&lt;p&gt;But, sometimes I do want to use a regex. In that case, I have been
using an obscure but useful package, &lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy&#34;&gt;&lt;code&gt;pcre-heavy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today I&amp;rsquo;ll show how to use &lt;code&gt;pcre-heavy&lt;/code&gt;, and while at it, also show
how to ship &lt;em&gt;one-file standalone Haskell scripts&lt;/em&gt; that only require
Stack.&lt;/p&gt;

&lt;h2 id=&#34;why-use-regexes-at-all:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Why use regexes at all?&lt;/h2&gt;

&lt;p&gt;Before going into &lt;code&gt;pcre-heavy&lt;/code&gt;, I thought I should explain when I use
regexes.&lt;/p&gt;

&lt;p&gt;Back when I was doing a lot of text extraction, cleaning, including
&lt;em&gt;correction&lt;/em&gt;, restructuring of messy data, regexes seemed the only
choice really. I had to not lose any &amp;ldquo;intended&amp;rdquo; information even if it
was obscured by garbage or misspellings or the like. I therefore could
not use some kind of approximate statistical technique, but had to
iteratively do do a lot exploratory work with some interactive
prompting in order to gradually clean up the data. Super-powerful
regex constructs of the Perl variety seemed perfect for this task.&lt;/p&gt;

&lt;p&gt;But even outside of such use cases, there&amp;rsquo;s no hiding from the fact
that regexes can be very convenient for simple tasks. Also,
because regexes are used so much in our programming world in general,
if we are migrating to Haskell some already-working regexes from
already-written code in some other language, it&amp;rsquo;s convenient to just
stick with regexes.&lt;/p&gt;

&lt;h2 id=&#34;which-haskell-regex-library-to-use:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Which Haskell regex library to use?!&lt;/h2&gt;

&lt;p&gt;A newcomer to Haskell must be overwhelmed by the lack of a single
standard library and syntax for regexes. I mean, take a look at this
&lt;a href=&#34;https://wiki.haskell.org/Regular_expressions&#34;&gt;wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, I&amp;rsquo;m presenting
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy&#34;&gt;&lt;code&gt;pcre-heavy&lt;/code&gt;&lt;/a&gt;, a
regex library that I&amp;rsquo;ve been using when I want regexes at all (I try
not to want them). It&amp;rsquo;s pretty new and not even mentioned on that wiki
page.&lt;/p&gt;

&lt;p&gt;Some of my criteria for choosing a regex library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want Perl-style regexes. That&amp;rsquo;s what I&amp;rsquo;m used to and are a kind of
standard across regex support in many programming languages.&lt;/li&gt;
&lt;li&gt;Nice syntax is a plus. One of the selling points of using regexes is
that the conciseness of writing patterns, binding matches,
etc. Without such conciseness, I just think &amp;ldquo;Why not just write a
real parser? It only takes a couple of lines in Haskell anyway.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;High performance is a perfectly legitimate reason to use regexes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given these criteria, using a &lt;a href=&#34;http://www.pcre.org/&#34;&gt;PCRE&lt;/a&gt;-based
library seemed the way to go. OK, the wiki page lists a bunch of
PCRE-based libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/pcre-light&#34;&gt;&lt;code&gt;pcre-light&lt;/code&gt;&lt;/a&gt; is a
good way to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It does require installation of the C library for
PCRE.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m mainly on Mac OS X, so I have PCRE installed through
Homebrew with &lt;code&gt;$ brew install pcre&lt;/code&gt;. I have PCRE working on
Linux. Unfortunately, I don&amp;rsquo;t use Windows, so if someone can verify
that &lt;code&gt;pcre-light&lt;/code&gt; installs OK on Windows, that would be great. I would
feel sad if I picked a library that is problematic for Windows users.&lt;/p&gt;

&lt;p&gt;Recently, out came
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy&#34;&gt;&lt;code&gt;pcre-heavy&lt;/code&gt;&lt;/a&gt;, a
wrapper around &lt;code&gt;pcre-light&lt;/code&gt; that uses
&lt;a href=&#34;https://wiki.haskell.org/Template_Haskell&#34;&gt;Template Haskell&lt;/a&gt;, and I
liked it, so I use it.&lt;/p&gt;

&lt;h2 id=&#34;example-program-using-pcre-heavy:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Example program using &lt;code&gt;pcre-heavy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pcre-heavy&lt;/code&gt; has decent documentation on
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy&#34;&gt;its Hackage page&lt;/a&gt;, so
I recommend reading that for the full details on how to use it. I&amp;rsquo;ll
give just a simple example here in the context of a complete program
that does something.&lt;/p&gt;

&lt;h3 id=&#34;specification-and-some-test-cases:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Specification and some test cases&lt;/h3&gt;

&lt;p&gt;Say we have a file of lines of text that are supposed to have a
comma-separated format of&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a fixed header&lt;/li&gt;
&lt;li&gt;a text transcript&amp;rsquo;s file path&lt;/li&gt;
&lt;li&gt;an &amp;ldquo;audio&amp;rdquo; or &amp;ldquo;video&amp;rdquo; field indicating the type of associated media&lt;/li&gt;
&lt;li&gt;an optional annotation about whether the associated media is missing
or not yet linked into the transcript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I made up this example based on the structured text specification
called CHAT that happens to include a single line of this format,
e.g. &lt;a href=&#34;http://talkbank.org/data-orig/Meeting/SCOTUS/2008/08-205.cha&#34;&gt;this coded Supreme Court oral argument transcript for &amp;ldquo;Citizens United v. Federal Election Commission&amp;rdquo;&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Examples that should match:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@Media:	has-audio,   audio
@Media:	has-video,video
@Media:	has-audio-but-missing, audio, missing
@Media:	has-video-but-unlinked  , video,      unlinked
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples that should fail to match:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@Media:	no-audio-or-video
@Media:	missing-media-field, unlinked
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-regex:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Creating a regex&lt;/h3&gt;

&lt;p&gt;Here is a &lt;code&gt;pcre-heavy&lt;/code&gt; regex, using the
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy-1.0.0.1/docs/Text-Regex-PCRE-Heavy.html#v:re&#34;&gt;&lt;code&gt;re&lt;/code&gt;&lt;/a&gt;
Template Haskell
&lt;a href=&#34;https://wiki.haskell.org/Template_Haskell#QuasiQuoters&#34;&gt;quasiquoter&lt;/a&gt;
that builds a PCRE-compiled
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy-1.0.0.1/docs/Text-Regex-PCRE-Heavy.html#t:Regex&#34;&gt;&lt;code&gt;Regex&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;mediaRegex :: Regex
mediaRegex = [re|^@Media:\t([^ ,]+)\ *,\ *(audio|video)(\ *,\ *(?:missing|unlinked))?|]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;regex-string-validated-at-haskell-compile-time:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Regex string validated at Haskell compile-time&lt;/h2&gt;

&lt;p&gt;One selling point of &lt;code&gt;pcre-heavy&lt;/code&gt; for me is that because it uses
Template Haskell, a bad regex string results in a Haskell-level
compile-time error rather than a runtime error.&lt;/p&gt;

&lt;p&gt;Example of a compile-time error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- This Haskell code fails to compile!
mediaRegex :: Regex
mediaRegex = [re|^@Media:\t([^ ,]+)\ *,\ *(audio|video)(\ *,\ *(?:missing|unlinked)?|]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loading this in GHCi or compiling with GHC results in&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    Exception when trying to run compile-time code:
      Text.Regex.PCRE.Light: Error in regex: missing )
    Code: template-haskell-2.10.0.0:Language.Haskell.TH.Quote.quoteExp
            re
            &amp;quot;^@Media:\\t([^ ,]+)\\ *,\\ *(audio|video)(\\ *,\\ *(?:missing|unlinked)?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-the-regex:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Using the regex&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll use
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy-1.0.0.1/docs/Text-Regex-PCRE-Heavy.html#v:scan&#34;&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/a&gt;
to extract the matches (if any) against our regex on a string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scan&lt;/code&gt; returns a lazy list of all possible matches:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- Simplified type signature for our purposes.
scan :: Regex -&amp;gt; String -&amp;gt; [(String, [String])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each match is a pair &lt;code&gt;(String, [String])&lt;/code&gt;, where the first component
is the whole string that matched, and the second is an ordered list of
parenthesized groupings in the regex. In our regex, we had three
parenthesized groupings, so a match could result in a three-element
grouping list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;*Main&amp;gt; scan mediaRegex &amp;quot;@Media:\tfoo, audio, unlinked&amp;quot;
[(&amp;quot;@Media:\tfoo, audio, unlinked&amp;quot;,[&amp;quot;foo&amp;quot;,&amp;quot;audio&amp;quot;,&amp;quot;, unlinked&amp;quot;])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we only want
the first match (if any), we can just compose it with
&lt;a href=&#34;https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-Maybe.html#v:listToMaybe&#34;&gt;&lt;code&gt;listToMaybe&lt;/code&gt; from &lt;code&gt;Data.Maybe&lt;/code&gt;&lt;/a&gt;,
which has type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;listToMaybe :: [a] -&amp;gt; Maybe a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so &lt;code&gt;listToMaybe . scan mediaRegex&lt;/code&gt; has type &lt;code&gt;String -&amp;gt; Maybe (String, [String])&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;*Main&amp;gt; (listToMaybe . scan mediaRegex) &amp;quot;@Media:\tfoo, audio, unlinked&amp;quot;
Just (&amp;quot;@Media:\tfoo, audio, unlinked&amp;quot;,[&amp;quot;foo&amp;quot;,&amp;quot;audio&amp;quot;,&amp;quot;, unlinked&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;extracting-useful-information:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Extracting useful information&lt;/h2&gt;

&lt;p&gt;Finally, what we really wanted to do after matching is apply
additional business logic and get stuff into a real type as soon as
possible, rather than engage in &amp;ldquo;stringly-typed&amp;rdquo; programming and
context-dependent list lengths.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say that for our task, we only care about matched lines that are
&lt;em&gt;not&lt;/em&gt; missing or unlinked, and skip those that are missing or
unlinked. We define a data type and use pattern matching to get out of
the untyped world into the typed world of our data model.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Info =
    Skip
  | Audio FilePath
  | Video FilePath
    deriving (Eq, Show)

-- | Extract information about a media file if it is present.
extractIfPresent :: (String, [String]) -&amp;gt; Info
extractIfPresent (_, [name, &amp;quot;audio&amp;quot;]) = Audio name
extractIfPresent (_, [name, &amp;quot;video&amp;quot;]) = Video name
extractIfPresent (_, _) = Skip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;presentation-as-a-report:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Presentation as a report&lt;/h2&gt;

&lt;p&gt;Finally, now that we are done with the regex world, and have a data
model, all that is left is a driver to complete an example
command-line program.&lt;/p&gt;

&lt;p&gt;We have all the information needed to print out a report for each line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | Output a report.
reportOnInfo :: Maybe Info -&amp;gt; IO ()
reportOnInfo Nothing = putStrLn &amp;quot;no match&amp;quot;
reportOnInfo (Just Skip) = putStrLn &amp;quot;match, but missing or unlinked&amp;quot;
reportOnInfo (Just (Audio path)) = printf &amp;quot;audio at %s\n&amp;quot; path
reportOnInfo (Just (Video path)) = printf &amp;quot;video at %s\n&amp;quot; path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the final driver, piping everything through from standard input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;main :: IO ()
main = do
  s &amp;lt;- getContents
  mapM_ (reportOnInfo
        . fmap extractIfPresent
        . listToMaybe
        . scan mediaRegex
       ) (lines s)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-stack-to-ship-standalone-scripts:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Using Stack to ship standalone scripts&lt;/h2&gt;

&lt;p&gt;We can try our program from within the GHCi REPL by just typing &lt;code&gt;main&lt;/code&gt;
or &lt;code&gt;:main&lt;/code&gt; at the REPL prompt and typing in lines of text. We can also
do &lt;code&gt;stack build&lt;/code&gt; to native-compile into a shippable binary.&lt;/p&gt;

&lt;p&gt;But another option is to ship the source code as a standalone one-file
script. This can be very convenient in some circumstances, when you
can rely on the recipient simply installing Stack.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how we can turn our program into such a standalone script: just
add the following two lines and make the file executable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;#!/usr/bin/env stack
-- stack --resolver lts-3.16 --install-ghc runghc --package pcre-heavy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stack will read the embedded command in order to install GHC, if
 needed, and first download and install the packages listed (here
 &lt;code&gt;pcre-heavy&lt;/code&gt;), if needed. We have pinned down the exact version of
 LTS in order to guarantee what versions of everything will be used by
 Stack. (Note: in this case, because of FFI with a
 C library, the recipient has to install PCRE first.)&lt;/p&gt;

&lt;p&gt;So if you have short programs that don&amp;rsquo;t need to be organized into
full-scale Cabal projects, you can treat Haskell as a &amp;ldquo;scripting
language&amp;rdquo; with full access to the libraries of Hackage!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ app/PCREHeavyExampleMain.hs &amp;lt; input.txt &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-warning:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;A warning&lt;/h3&gt;

&lt;p&gt;Although this Stack-as-Haskell-interpreter feature is kind of cool, I
prefer to write modular, separately testable libraries, while having
the &lt;code&gt;main&lt;/code&gt; driver of the &lt;code&gt;Main&lt;/code&gt; module of a program just use library
modules that do most of the real work. Furthermore, I prefer to build
and use native-compiled libraries and binaries because they&amp;rsquo;re just
much faster to start up and also run: &lt;code&gt;runghc&lt;/code&gt; is a Haskell
interpreter rather than a native optimizing compiler. But the beauty
of the GHC Haskell world is you can run in either mode, and flip from
one to the other seamlessly.&lt;/p&gt;

&lt;h3 id=&#34;here-s-our-complete-example-standalone-program:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Here&amp;rsquo;s our complete example standalone program&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;#!/usr/bin/env stack
-- stack --install-ghc runghc --package pcre-heavy

{-# LANGUAGE QuasiQuotes #-}

module Main where

import Text.Regex.PCRE.Heavy (Regex, re, scan)
import Data.Maybe (listToMaybe)
import Text.Printf (printf)

-- | Match a media name, audio/video, and optional missing/unlinked.
mediaRegex :: Regex
mediaRegex = [re|^@Media:\t([^ ,]+)\ *,\ *(audio|video)(\ *,\ *(?:missing|unlinked))?|]

data Info =
    Skip
  | Audio FilePath
  | Video FilePath
    deriving (Eq, Show)

-- | Extract information about a media file if it is present.
extractIfPresent :: (String, [String]) -&amp;gt; Info
extractIfPresent (_, [name, &amp;quot;audio&amp;quot;]) = Audio name
extractIfPresent (_, [name, &amp;quot;video&amp;quot;]) = Video name
extractIfPresent (_, _) = Skip

-- | Output a report.
reportOnInfo :: Maybe Info -&amp;gt; IO ()
reportOnInfo Nothing = putStrLn &amp;quot;no match&amp;quot;
reportOnInfo (Just Skip) = putStrLn &amp;quot;match, but missing or unlinked&amp;quot;
reportOnInfo (Just (Audio path)) = printf &amp;quot;audio at %s\n&amp;quot; path
reportOnInfo (Just (Video path)) = printf &amp;quot;video at %s\n&amp;quot; path

-- | Driver, in traditional right-to-left syntax.
main :: IO ()
main = do
  s &amp;lt;- getContents
  mapM_ (reportOnInfo
        . fmap extractIfPresent
        . listToMaybe
        . scan mediaRegex
       ) (lines s)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;some-additional-notes:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Some additional notes&lt;/h2&gt;

&lt;p&gt;One limitation faced by a short expository article with example code
is that we don&amp;rsquo;t like to waste space and attention, and therefore tend
to present quick-and-dirty code, rather than production-level code
(which is efficient, has sensible error recovery, well-commented). I&amp;rsquo;ve
been thinking about the dilemma of &lt;em&gt;how not to give the
wrong impression and set a bad example by showing simplistic example
code&lt;/em&gt;. There&amp;rsquo;s no easy answer, but I felt it might be useful to
provide optional &amp;ldquo;advanced&amp;rdquo; notes sometimes, on how to write real code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pcre-heavy&lt;/code&gt; allows matching not only of &lt;code&gt;String&lt;/code&gt;, but also of
&lt;code&gt;ByteString&lt;/code&gt; and &lt;code&gt;Text&lt;/code&gt; types. In practice, for efficiency, we
want to use
&lt;a href=&#34;http://hackage.haskell.org/package/bytestring&#34;&gt;&lt;code&gt;bytestring&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&#34;http://hackage.haskell.org/package/text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; as much as possible,
rather than the inefficient &lt;code&gt;String&lt;/code&gt; type. (&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-12-24-days-of-hackage-text.html&#34;&gt;A 2012 day of hackage
article talks about &lt;code&gt;text&lt;/code&gt;&lt;/a&gt;.)
Since the underlying PCRE C library uses bytes, I generally hand
bytestrings to &lt;code&gt;pcre-heavy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The sample driver code uses lazy I/O to get the lines from input. This
is superficially elegant and concise for pedagogical purposes, but in
real life is a source of resource leaks and other problems and even
causes people to think &amp;ldquo;Haskell is inefficient&amp;rdquo;. For real work, I like
to use &lt;a href=&#34;http://hackage.haskell.org/package/pipes&#34;&gt;&lt;code&gt;pipes&lt;/code&gt;&lt;/a&gt;, which was
covered in another
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-16-24-days-of-hackage-pipes.html&#34;&gt;2012 day of Hackage&lt;/a&gt;
and also has an
&lt;a href=&#34;https://hackage.haskell.org/package/pipes-4.1.7/docs/Pipes-Tutorial.html&#34;&gt;extensive, beautiful tutorial&lt;/a&gt;
by its author, Gabriel Gonzalez, who also has a fantastic,
long-running, active blog
&lt;a href=&#34;http://www.haskellforall.com/&#34;&gt;&amp;ldquo;Haskell for all&amp;rdquo;&lt;/a&gt; that every
Haskeller should follow.&lt;/p&gt;

&lt;p&gt;Finally, was a regex the right choice here? It was simple enough for
this problem, but you can see from the ad hoc pattern matching and
hardcoded strings and fragile positional ordering and number of groups
that things could get error-prone really quickly if the regex got any
more complex or we wanted to do proper error handling in case of a
failed match.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Regex support is not a strong point of the Haskell ecosystem, which is
geared to more structured parsing, but there are options if you really
want to use regexes, and I like the Perl-style &lt;code&gt;pcre-light&lt;/code&gt; family of
libraries that now includes &lt;code&gt;pcre-heavy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, I showed how to add two lines to the top of a Haskell program to
turn it into a Stack script.&lt;/p&gt;

&lt;h2 id=&#34;all-the-code:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;All the code&lt;/h2&gt;

&lt;p&gt;All my code for my article series are at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskell tidbits: 24 days of Hackage, 2015: day 1: Introduction and Stack</title>
      <link>http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/</link>
      <pubDate>Mon, 30 Nov 2015 16:20:11 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents-for-the-whole-series:c37cfe20acfff0cff8579f026185f721&#34;&gt;Table of contents for the whole series&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Day 1: &lt;a href=&#34;./blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;Introduction and Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 2: &lt;a href=&#34;./blog/2015/12/02/24-days-of-hackage-2015-day-2-regexes-with-pcre-heavy-standalone-haskell-scripts-using-stack/&#34;&gt;Regexes with pcre-heavy; standalone Haskell scripts using Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 3: &lt;a href=&#34;./blog/2015/12/03/24-days-of-hackage-2015-day-3-hspec-the-importance-of-testing/&#34;&gt;HSpec; the importance of testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;day-1:c37cfe20acfff0cff8579f026185f721&#34;&gt;Day 1&lt;/h2&gt;

&lt;p&gt;A couple of days ago, I happened to see a
&lt;a href=&#34;https://twitter.com/acid2/status/669882628695281669&#34;&gt;tweet from Ollie Charles&lt;/a&gt;
that he didn&amp;rsquo;t have time to do his usual annual December &amp;ldquo;24 days of&amp;hellip;&amp;rdquo;
Haskell blog posts this year (2015) and felt sad because I&amp;rsquo;ve
learned a huge amount from
&lt;a href=&#34;https://ocharles.org.uk/blog/&#34;&gt;reading them&lt;/a&gt;. In both 2012 and 2013, he
wrote &amp;ldquo;24 days of Hackage&amp;rdquo;, daily short and sweet blog posts that
showed how to use selected Haskell packages you can get from the
community archive &lt;a href=&#34;http://hackage.haskell.org/&#34;&gt;Hackage&lt;/a&gt;, and in 2014
he covered GHC language extensions.&lt;/p&gt;

&lt;p&gt;With some trepidation, I decided that I would do a &amp;ldquo;24 days of
Hackage&amp;rdquo; series myself to cap off this year, to share a selection of
the huge number of Haskell packages I find useful. I thought it would
be particularly appropriate to do this given that 2015 was the year
that I migrated to &lt;em&gt;using Haskell as my main language&lt;/em&gt; for most new work and
personal projects, and therefore this has been a year of considerable
discovery for me.&lt;/p&gt;

&lt;h2 id=&#34;all-the-code:c37cfe20acfff0cff8579f026185f721&#34;&gt;All the code&lt;/h2&gt;

&lt;p&gt;All my code for my article series will be at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;my-selection-criteria:c37cfe20acfff0cff8579f026185f721&#34;&gt;My selection criteria&lt;/h2&gt;

&lt;p&gt;How to choose what to cover? I like what Ollie wrote in his
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-01-24-days-of-hackage.html&#34;&gt;2012 inaugural post&lt;/a&gt;:
&amp;ldquo;This will be a whirlwind tour of some modules that I use on an almost
daily basis, including modules that have inspired me, modules that
have changed the way I think about code, and some modules that are so
amazing I’m not even smart enough to use them!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;My own intention: some of what I&amp;rsquo;ll cover is already popular and
well-known, some may be just minor but useful utilities, some may be
completely obscure, but the underlying theme will be &amp;ldquo;stuff I use and
can briefly say something useful about&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;stack:c37cfe20acfff0cff8579f026185f721&#34;&gt;Stack&lt;/h2&gt;

&lt;p&gt;It was a no-brainer to choose the first day&amp;rsquo;s topic:
&lt;a href=&#34;http://haskellstack.org/&#34;&gt;Stack&lt;/a&gt;, the main new thing for Haskell in
2015 other than &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; 7.10.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack changed my (Haskell) life.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stack is a game changer for the Haskell community. It is an all-in-one
solution for creating Haskell projects, managing dependencies,
building, and more. Since Stack came out, I&amp;rsquo;ve been slowly migrating
old projects to use it, and I use Stack for all new projects,
including the
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;repo for this article series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not giving a full-blown tutorial on Stack here today, just a
little taste, and you can read the
&lt;a href=&#34;http://haskellstack.org/&#34;&gt;official documentation&lt;/a&gt; for details, but
what I want to emphasize is that Stack is useful not only for
experienced developers, but especially also for newcomers, so part of
today&amp;rsquo;s article is geared specifically to newcomers (or those who
tried Haskell once and are interested in a fresh start with better
tooling).&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-get-started-with-haskell:c37cfe20acfff0cff8579f026185f721&#34;&gt;&amp;ldquo;How do I get started with Haskell&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;When I launched &lt;a href=&#34;http://pittsburghhaskell.org/&#34;&gt;Pittsburgh Haskell&lt;/a&gt;
in February this year (2015), I faced a huge hurdle: helping newcomers
to Haskell get started. I created an introductory workshop session,
but a huge number of people were discouraged by my best shot at
creating &lt;a href=&#34;https://github.com/pittsburgh-haskell/haskell-installation&#34;&gt;a now-obsolete set of Haskell installation instructions&lt;/a&gt; that would work for Mac OS,
Windows, and Linux, and people had major problems installing a basic
tool chain, and versioning issues if they already had an old version
of GHC installed. Too much time was wasted on trying to help people with
installation.&lt;/p&gt;

&lt;p&gt;Pittsburgh Haskell happened to go on hiatus in April as I got busy
with many other things and there was no momentum at the time to keep
it going, but I believe one huge problem in trying to create a new
local Haskell community from newcomers was the tooling/setup
annoyance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack solves this problem.&lt;/strong&gt; If I gave an introductory Haskell workshop again, I would definitely use Stack.&lt;/p&gt;

&lt;h2 id=&#34;an-example-of-getting-started-with-stack-using-a-custom-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;An example of getting started with Stack using a custom template&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t already use Stack,
&lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Stack Web site already has documentation on how to get started
with Stack using a default template. Here, I want to promote the idea
of using and sharing custom templates. This is not documented so well,
but I think will become more and more important for newcomers, and is
also of course useful for any of us who end up creating the same
boilerplate project setups.&lt;/p&gt;

&lt;h3 id=&#34;using-an-official-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;Using an official template&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve created a custom template called &lt;code&gt;franklinchen&lt;/code&gt; that is part of
the official &lt;a href=&#34;https://github.com/commercialhaskell/stack-templates&#34;&gt;&lt;code&gt;stack-templates&lt;/code&gt;&lt;/a&gt;
repo.&lt;/p&gt;

&lt;p&gt;If you run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack new stack-template-demo franklinchen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will be prompted for information to create a new project called &lt;code&gt;stack-template-demo&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;using-your-own-local-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;Using your own local template&lt;/h3&gt;

&lt;p&gt;Note that the template specified does &lt;em&gt;not&lt;/em&gt; have to be in the official
&lt;code&gt;stack-templates&lt;/code&gt; repo. It can also be on your local file system. For
example, before I submitted my template to &lt;code&gt;stack-templates&lt;/code&gt;, I used
to run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack new stack-template-demo /path/on/my/computer/to/franklinchen.hsfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;franklinchen.hsfiles&lt;/code&gt; is my template (read below on creating
your own template).&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;ve put up an instance of the generated project up
&lt;a href=&#34;https://github.com/FranklinChen/stack-template-demo&#34;&gt;on GitHub&lt;/a&gt; if
you want to look at its structure without installing and running Stack
right now.)&lt;/p&gt;

&lt;h3 id=&#34;getting-started-with-the-newly-generated-project:c37cfe20acfff0cff8579f026185f721&#34;&gt;Getting started with the newly generated project&lt;/h3&gt;

&lt;p&gt;Enter the project directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd stack-template-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stack-downloads-ghc-for-you:c37cfe20acfff0cff8579f026185f721&#34;&gt;Stack downloads GHC for you&lt;/h3&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do not already have an appropriate version of GHC installed,
Stack will &lt;em&gt;automatically&lt;/em&gt; download and install it for you, into an
area in Stack&amp;rsquo;s configuration directory &lt;code&gt;~/.stack/&lt;/code&gt;. The important
thing to note is that when using Stack, multiple versions of GHC can
coexist as desired for different build configurations and setups. This
feature is really important, because not everyone uses the same
version of GHC and you can build your project against multiple
versions of GHC easily.&lt;/p&gt;

&lt;p&gt;This automatic-downloading feature is particularly useful for
newcomers who don&amp;rsquo;t need to mess around with some kind of separate
global installation requiring special privileges.&lt;/p&gt;

&lt;p&gt;The output, if Stack needs to download anything:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Preparing to install GHC to an isolated location.
This will not interfere with any system-level installation.
Downloaded ghc-7.10.2.
Installed GHC.
stack will use a locally installed GHC
For more information on paths, see &#39;stack path&#39; and &#39;stack exec env&#39;
To use this GHC and packages outside of a project, consider using:
stack ghc, stack ghci, stack runghc, or stack exec
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;launching-the-ghci-repl:c37cfe20acfff0cff8579f026185f721&#34;&gt;Launching the GHCi REPL&lt;/h3&gt;

&lt;p&gt;The most important thing for a newcomer to Haskell is to get started
with the GHCi REPL, so let&amp;rsquo;s do that right away. Doing this within the
context of a project while preloading the modules of the project is
simple with Stack.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack ghci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;strong&gt;only the first time&lt;/strong&gt; you do this (or other commands that
require getting library dependencies), Stack may take a while to
download and build them. The dependencies will actually end up being
installed and cached such that &lt;em&gt;other projects&lt;/em&gt; in the future that use
them can reuse them. This is a huge advantage of using Stack versus
the old days before Stack, when there was always an issue of
redownloading and recompiling the same libraries for different
projects; that was a tremendous time and space waster! Stack
intelligently figures out for you what can be shared consistently or
not.&lt;/p&gt;

&lt;p&gt;Stack launches a GHCi REPL with our modules preloaded:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Ok, modules loaded: Lib, Main.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;src/Lib.hs&lt;/code&gt; of the sample project, we have a silly module
illustrating some &lt;a href=&#34;https://www.haskell.org/haddock/&#34;&gt;Haddock&lt;/a&gt;
documentation comments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | A library to do stuff.
module Lib
    (
      ourAdd
    ) where

-- | Add two &#39;Int&#39; values.
ourAdd :: Int  -- ^ left
       -&amp;gt; Int  -- ^ right
       -&amp;gt; Int  -- ^ sum
ourAdd x y = x + y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can access the &lt;code&gt;Lib&lt;/code&gt; module from the REPL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;*Main&amp;gt; ourAdd 2 3
5
*Main&amp;gt; Lib.ourAdd 4 5
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also access &lt;code&gt;Main&lt;/code&gt;, which is defined in &lt;code&gt;app/Main.hs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module Main where

import Lib (ourAdd)

import Text.Printf (printf)

main :: IO ()
main = printf &amp;quot;2 + 3 = %d\n&amp;quot; (ourAdd 2 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;*Main&amp;gt; main
2 + 3 = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;building-and-running-the-project:c37cfe20acfff0cff8579f026185f721&#34;&gt;Building and running the project&lt;/h3&gt;

&lt;p&gt;You could have explicitly compiled the project first, before launching
the REPL. In practice in real projects, I start by compiling a project
to get the dependencies compiled, before I use GHCi, but the above
does it for you too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because I defined a native-compiled binary executable named
&lt;code&gt;stack-template-demo&lt;/code&gt; in our Cabal file &lt;code&gt;stack-template-demo.cabal&lt;/code&gt;,
we can run the executable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack exec stack-template-demo
2 + 3 = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I supplied unit tests for &lt;code&gt;Lib&lt;/code&gt; in &lt;code&gt;test/LibSpec.hs&lt;/code&gt; that can be run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack test
Lib
  Lib
    works
    ourAdd is commutative

Finished in 0.0007 seconds
2 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-the-library-and-executable:c37cfe20acfff0cff8579f026185f721&#34;&gt;Installing the library and executable&lt;/h3&gt;

&lt;p&gt;You can now install the library and executable for your own use later:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack install
...
...
Copying from /Users/chen/stack-template-demo/.stack-work/install/x86_64-osx/lts-3.16/7.10.2/bin/stack-template-demo to /Users/chen/.local/bin/stack-template-demo

Copied executables to /Users/chen/.local/bin:
- stack-template-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example (since &lt;code&gt;~/.local/bin&lt;/code&gt; is in my &lt;code&gt;PATH&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack-template-demo
2 + 3 = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;your-own-stack-template-configuration:c37cfe20acfff0cff8579f026185f721&#34;&gt;Your own Stack template configuration&lt;/h3&gt;

&lt;p&gt;When using Stack templates, it&amp;rsquo;s useful to set up a
configuration so that information can automatically be filled out for
you when you generate new projects. The documentation for
configuration is
&lt;a href=&#34;http://docs.haskellstack.org/en/stable/yaml_configuration.html&#34;&gt;here&lt;/a&gt;. Create
a file in
&lt;code&gt;~/.stack/config.yaml&lt;/code&gt;. Mine has:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;templates:
  params:
    author-email: &amp;quot;franklinchen@franklinchen.com&amp;quot;
    author-name: &amp;quot;Franklin Chen&amp;quot;
    category: test
    copyright: &amp;quot;2015&amp;quot;
    github-username: &amp;quot;FranklinChen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;other-bells-and-whistles:c37cfe20acfff0cff8579f026185f721&#34;&gt;Other bells and whistles&lt;/h3&gt;

&lt;p&gt;I try to use &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; for any public
code I put up, so my template generates a &lt;code&gt;.travis.yml&lt;/code&gt; file that uses
Stack. I&amp;rsquo;ve started to migrate my former Travis setups based on
&lt;a href=&#34;https://github.com/hvr/multi-ghc-travis&#34;&gt;&lt;code&gt;multi-ghc-travis&lt;/code&gt;&lt;/a&gt; to use
Stack instead.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-custom-stack-project-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;Creating a custom Stack project template&lt;/h2&gt;

&lt;p&gt;It was surprising to me that how to create a custom template is not
covered in the main Stack documentation. Instead, I found it at the
&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates&#34;&gt;&lt;code&gt;stack-templates&lt;/code&gt;&lt;/a&gt;
site.&lt;/p&gt;

&lt;p&gt;The method of creating a custom template is kind of clumsy, involving
creating a single file with embedded directives to indicate generated
file name and directory structure, but it&amp;rsquo;s a start.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:c37cfe20acfff0cff8579f026185f721&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For day 1 of my &amp;ldquo;24 days of Hackage, 2015&amp;rdquo;, I&amp;rsquo;ve briefly introduced
how to use Stack, the Haskell tool that I&amp;rsquo;m using to build and run all
the sample code for this article series.&lt;/p&gt;

&lt;p&gt;Next up: some real code!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Report on my talk &#34;A gentle conceptual introduction to functional programming&#34;</title>
      <link>http://conscientiousprogrammer.com/blog/2015/10/07/report-on-my-talk-a-gentle-conceptual-introduction-to-functional-programming/</link>
      <pubDate>Wed, 07 Oct 2015 23:25:12 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/10/07/report-on-my-talk-a-gentle-conceptual-introduction-to-functional-programming/</guid>
      <description>

&lt;p&gt;On behalf of the relatively new
&lt;a href=&#34;http://www.meetup.com/Pittsburgh-Functional-Programming-Meetup/&#34;&gt;Pittsburgh Functional Programming&lt;/a&gt;,
I gave an introductory talk held at Google Pittsburgh that I called
&lt;a href=&#34;http://www.meetup.com/Pittsburgh-Functional-Programming-Meetup/events/224593883/&#34;&gt;&amp;ldquo;A gentle conceptual introduction to functional programming&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This presentation is part of an experiment, a big shift in how I&amp;rsquo;m
trying to talk about not only &amp;ldquo;functional programming&amp;rdquo;, but any kind
of programming and more generally any topic at all (whether it&amp;rsquo;s
cooking or music) for a wide audience. As I&amp;rsquo;ve been doing more
teaching and collaboration in many areas of my life, I&amp;rsquo;ve been trying
to figure out ways to better reach people. In particular, when
presenting something new, it&amp;rsquo;s useful to motivate it and somehow
connect it to something they already know, even if it&amp;rsquo;s different.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll write more later about what I did differently in this talk than
I&amp;rsquo;ve done in the past, and why. For now, I&amp;rsquo;ll just say that one big
addition I made was that I prepared feedback forms to be filled out,
both to help me understand what I can do better and also to help
Pittsburgh Functional Programming plan further events and topics that
people want to see. So I will summarize the feedback I got (fifteen
participants filled out feedback forms).&lt;/p&gt;

&lt;h2 id=&#34;slides:d0bf3f7e5dfd4c4da1d64828408ba330&#34;&gt;Slides&lt;/h2&gt;

&lt;p&gt;For those who are curious about an outline of my talk, there are
&lt;a href=&#34;https://github.com/FranklinChen/gentle-conceptual-intro-to-fp-for-humans/raw/master/presentation.pdf&#34;&gt;slides&lt;/a&gt;,
with the caveat that much of what I said or did are not on the
slides. In fact, one of the most commented-on helpful aspects of the
presentation was not on the slides at all: my use of a whiteboard. I
was happy I specifically requested that the venue provide me with a
whiteboard. I knew it was going to make a difference.&lt;/p&gt;

&lt;h2 id=&#34;comments-and-suggestions:d0bf3f7e5dfd4c4da1d64828408ba330&#34;&gt;Comments and suggestions&lt;/h2&gt;

&lt;h3 id=&#34;logistics:d0bf3f7e5dfd4c4da1d64828408ba330&#34;&gt;Logistics&lt;/h3&gt;

&lt;p&gt;Some mentioned that I should have used a microphone. Point taken. This
is not the first time I&amp;rsquo;ve forgotten to ask for a microphone. When
there&amp;rsquo;s a large room and thirty people, even though I think I&amp;rsquo;m
speaking loudly, it may not be loud enough.&lt;/p&gt;

&lt;h3 id=&#34;presentation:d0bf3f7e5dfd4c4da1d64828408ba330&#34;&gt;Presentation&lt;/h3&gt;

&lt;p&gt;I was happy that commenters felt I did a good job providing an
introduction that was not too elementary (I knew that there would be a
wide range of experience among those who attended). They also
appreciated my use of concrete &lt;strong&gt;examples&lt;/strong&gt; and metaphors (such as the
pizza order).&lt;/p&gt;

&lt;p&gt;My use of a &lt;strong&gt;whiteboard&lt;/strong&gt; to draw pictures of immutable data structures
and step through the structural sharing that happens when you update
them was particularly well-received. I&amp;rsquo;m convinced even more than ever
that helping with &lt;strong&gt;visualization&lt;/strong&gt; and &lt;strong&gt;process&lt;/strong&gt; is key.&lt;/p&gt;

&lt;p&gt;My giving &lt;strong&gt;concrete&lt;/strong&gt; pointers to libraries and other resources for
using FP in various languages (such as Python and JavaScript) was
noted. Just saying &amp;ldquo;people are doing this, search for it&amp;rdquo; is not
helpful.&lt;/p&gt;

&lt;p&gt;A few quotes that made me feel I succeeded in my objectives, which
were to give an introduction that would open a world and inspire
further exploration:&lt;/p&gt;

&lt;blockquote&gt;
I much better understand now the paradigm behind FP. So now I have a
reason to explore it.
&lt;/blockquote&gt;

&lt;blockquote&gt;
Thinking about immutable data in new way.
&lt;/blockquote&gt;

&lt;blockquote&gt;
It provided the foundation I was hoping for. I liked the data visualization.
&lt;/blockquote&gt;

&lt;blockquote&gt;
While I have encountered most of these topics before, the speaker did
an excellent job of giving a wide view of functional programming and
details beyond just the theory.
&lt;/blockquote&gt;

&lt;h3 id=&#34;some-things-people-are-interested-in-learning-and-using:d0bf3f7e5dfd4c4da1d64828408ba330&#34;&gt;Some things people are interested in learning and using&lt;/h3&gt;

&lt;p&gt;On the feedback form I requested suggestions for talk topics, hands-on
workshops, and study groups.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use FP in a traditionally OO language&lt;/li&gt;
&lt;li&gt;FP for practical tasks such as command-line and Web&lt;/li&gt;
&lt;li&gt;FP design patterns&lt;/li&gt;
&lt;li&gt;Concurrency in FP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Languages people were interested in learning and using for FP (I list
those with at least two people writing them in):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Haskell (4 responses)&lt;/li&gt;
&lt;li&gt;Clojure (3 responses)&lt;/li&gt;
&lt;li&gt;Elm (2 responses)&lt;/li&gt;
&lt;li&gt;Scala (2 responses)&lt;/li&gt;
&lt;li&gt;Python (2 responses)&lt;/li&gt;
&lt;li&gt;JavaScript (2 responses)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I should note that in the discussions, where not everyone submitted a
written feedback form, I gathered there was a lot of curiosity about
Elm.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:d0bf3f7e5dfd4c4da1d64828408ba330&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This wasn&amp;rsquo;t much of a report on the presentation, and I&amp;rsquo;ll need to
write up details on our session, but I haven&amp;rsquo;t been writing much at
all, so I thought this brief summary of the feedback is better than
nothing, in order to continue to move forward.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m very grateful for the hosting at Google Pittsburgh and all who
came out to attend my presentation and gave me such detailed feedback
in person or on paper.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aegis and Cook: what happens when an open source developer dies?</title>
      <link>http://conscientiousprogrammer.com/blog/2015/06/16/aegis-and-cook-what-happens-when-an-open-source-developer-dies/</link>
      <pubDate>Tue, 16 Jun 2015 21:37:39 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/06/16/aegis-and-cook-what-happens-when-an-open-source-developer-dies/</guid>
      <description>

&lt;p&gt;By sheer accident, while I was looking for something else online, I
came across a Web site for &lt;a href=&#34;http://aegis.sourceforge.net/&#34;&gt;Aegis&lt;/a&gt;, a
distributed version control system I used at work back in 1995-1997. I
was surprised this software was still alive after twenty years. A lot
of software has a very short life span, and since I had not heard
anything about Aegis all this time, I would have guessed that it had
died.&lt;/p&gt;

&lt;p&gt;I remembered that we had used this software along with another tool
the author developed, called
&lt;a href=&#34;https://ftp.gnu.org/non-gnu/cook.README&#34;&gt;Cook&lt;/a&gt;, which was a
replacement for
&lt;a href=&#34;https://en.wikipedia.org/wiki/Make_%28software%29&#34;&gt;Make&lt;/a&gt;. I was
unsuccessful in locating any official Web site for Cook, so I assume
it is more or less dead.&lt;/p&gt;

&lt;p&gt;Meanwhile, I found by coincidence that actually, the author,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Peter_Miller_%28software_engineer%29&#34;&gt;Peter Miller&lt;/a&gt;,
died less than a year ago (July 2014). There was enough memory of him
that someone wrote that Wikipedia page on his contributions to open
source software. However, his Web site &lt;code&gt;http://www.canb.auug.org.au/~millerp/
&lt;/code&gt;, sadly, has died with him, and with that, the site he had on Cook.&lt;/p&gt;

&lt;p&gt;But we know that the Web is &amp;ldquo;forever&amp;rdquo;, right? Let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;I found this old photo, for example.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://web.archive.org/web/20090111230031/http://miller.emu.id.au/pmiller/pmiller-1993-128.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Peter Miller, 1993&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;wayback-machine:a626c37eefef6cb88a3f2de686a3eafc&#34;&gt;Wayback Machine&lt;/h2&gt;

&lt;p&gt;Basically, I checked the Wayback Machine, and it has some snapshots of
&lt;a href=&#34;http://web.archive.org/web/*/http://www.canb.auug.org.au/~millerp/&#34;&gt;his site&lt;/a&gt;. The
last working snapshot was
&lt;a href=&#34;http://web.archive.org/web/20090111230031/http://miller.emu.id.au/pmiller/&#34;&gt;from 2009&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is his old
&lt;a href=&#34;http://web.archive.org/web/20090327074944/http://miller.emu.id.au/pmiller/software/&#34;&gt;software page&lt;/a&gt;. Yes,
it includes a link to a Cook site, but it leads to a nonexistent
snapshot.&lt;/p&gt;

&lt;p&gt;I stopped because I am not that interested in reliving the early
history of Cook. I never met the guy, although I believe I exchanged
email with him when it was just his personal project and he was &amp;ldquo;tech
support&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I wonder how historians fifty years from now will be working. So much
is no longer on paper, but stored in random archives on hard drives
somewhere.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:a626c37eefef6cb88a3f2de686a3eafc&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Software dies, people die. It was just weird for me to accidentally do
a bit of sleuthing to find more information about someone whose
software I once used a lot.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t made a &amp;ldquo;will&amp;rdquo; for my code. I suppose I should have a plan in
place for whatever I value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you have a plan for your Web site or code or writings? Or do you
  expect them to disappear? How do you feel about leaving something
  behind?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;update-of-2015-06-29:a626c37eefef6cb88a3f2de686a3eafc&#34;&gt;(Update of 2015-06-29)&lt;/h3&gt;

&lt;p&gt;By accident, while reading an old blog post by Graydon Hoare about
&lt;a href=&#34;https://github.com/graydon/bors&#34;&gt;bors&lt;/a&gt;, which is used for continuous
integration for the Rust project, I noticed his
&lt;a href=&#34;http://graydon2.dreamwidth.org/1597.html&#34;&gt;shoutout to Peter Miller for Aegis&lt;/a&gt;. It&amp;rsquo;s
great that Peter Miller&amp;rsquo;s work inspired others to build systems that
are used today. One random person&amp;rsquo;s ideas and software made a lasting
difference in the world!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I switched from Octopress 2 to Hugo</title>
      <link>http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/</link>
      <pubDate>Sun, 31 May 2015 12:26:32 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/</guid>
      <description>

&lt;p&gt;Until now, I haven&amp;rsquo;t been publishing anything on any of my three blogs
for half a year now. There are many reasons, but one of them was that
I wanted to migrate away from
&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; 2. Octopress 2 is ancient and slow
and unmaintained, and I&amp;rsquo;d been waiting for
&lt;a href=&#34;https://github.com/octopress/octopress&#34;&gt;Octopress 3&lt;/a&gt; for over three
years
&lt;a href=&#34;http://octopress.org/2015/01/15/octopress-3.0-is-coming/&#34;&gt;to arrive&lt;/a&gt;,
so when I heard that Octopress 3 was finally going to be officially
announced at &lt;a href=&#34;http://jekyllconf.com/&#34;&gt;JekyllConf&lt;/a&gt;, I decided it was
time to migrate my blogs, to Octopress 3 or
&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, or something else entirely.&lt;/p&gt;

&lt;h2 id=&#34;factors-to-consider-when-choosing-a-static-site-generator:26b28caf414f77ef05fac6550ae96388&#34;&gt;Factors to consider when choosing a static site generator&lt;/h2&gt;

&lt;p&gt;Some factors I kept in mind while evaluating a new static site
generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed of full generation&lt;/li&gt;
&lt;li&gt;Speed of incremental generation&lt;/li&gt;
&lt;li&gt;Active progress in bug fixes, improvements, new features&lt;/li&gt;
&lt;li&gt;Availability of themes&lt;/li&gt;
&lt;li&gt;Community sharing, support&lt;/li&gt;
&lt;li&gt;Languages used for using and writing own templates and plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;speed-is-critical-for-me:26b28caf414f77ef05fac6550ae96388&#34;&gt;Speed is critical for me&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; was a huge consideration for me when I evaluated alternative
static site generators, so I was particularly interested in evaluating&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; (written in Go)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jaspervdj.be/hakyll/&#34;&gt;Hakyll&lt;/a&gt; (written in Haskell)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The advantages of these two are that they are implemented in
statically typed languages that compile to native
executables.&lt;/p&gt;

&lt;p&gt;Furthermore, Hakyll is a library, such that your configuration is
actually merely a Haskell program using the library, without the
indirection of configuration languages and interpreters of the
languages, and you can compile your site into a specialized native
executable. (For example, Hakyll uses Pandoc as a library for Markdown processing.)&lt;/p&gt;

&lt;h2 id=&#34;advantages-of-going-to-jekyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;Advantages of going to Jekyll?&lt;/h2&gt;

&lt;p&gt;Jekyll is the most popular static site generator, so I had to evaluate
it despite knowing up front that it was not going to be a speed
winner. It might well be fast &lt;em&gt;enough&lt;/em&gt;. The benefits of using a
platform with a large and passionate community are &lt;em&gt;tremendous&lt;/em&gt;: bugs
get fixed, cool features get added, people step in to help you out if
you have questions, incremental improvements keep happening, themes
abound that you can just take and use. I never evaluate using a
technology based only on one consideration (such as speed).&lt;/p&gt;

&lt;p&gt;Note that Octopress 3 is basically a really cool interface over an
underlying Jekyll setup, so I will only refer to Jekyll below, with
the understanding that all performance matters that apply to Jekyll
apply to Octopress 3 as well.&lt;/p&gt;

&lt;h2 id=&#34;speed-comparisons-octopress-2-jekyll-hugo-hakyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;Speed comparisons: Octopress 2, Jekyll, Hugo, Hakyll&lt;/h2&gt;

&lt;h3 id=&#34;full-generation-from-scratch:26b28caf414f77ef05fac6550ae96388&#34;&gt;Full generation from scratch&lt;/h3&gt;

&lt;p&gt;My &lt;a href=&#34;http://franklinchen.com/&#34;&gt;personal blog&lt;/a&gt; has 585 posts. Here are
the from-scratch full generation times, based on migrations away from
Octopress 2 that I performed using a bunch of Perl scripts. Note that
the sites are not completely equivalent, because I only wanted to get
a rough idea, not compare total equivalence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Octopress 2: 5:39.28&lt;/li&gt;
&lt;li&gt;Jekyll: 15.90&lt;/li&gt;
&lt;li&gt;Hakyll: 14.51&lt;/li&gt;
&lt;li&gt;Hugo: 4.90&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jekyll and Hakyll don&amp;rsquo;t do too badly, but Hugo was by far the fastest.&lt;/p&gt;

&lt;p&gt;Although I suspect that as more features
get added to Hugo, it may slow down some, I also trust that since the
author and the Go community in general are &lt;em&gt;obsessed&lt;/em&gt; with speed, Hugo
is a safe bet for anyone concerned about speed.&lt;/p&gt;

&lt;h3 id=&#34;full-generation-but-not-from-scratch:26b28caf414f77ef05fac6550ae96388&#34;&gt;Full generation but not from scratch&lt;/h3&gt;

&lt;p&gt;Hakyll stores a lot of information in a cache directory. If you&amp;rsquo;ve
done a full generation and change nothing and do a full generation
again (&lt;code&gt;my-compiled-site-builder build&lt;/code&gt;), it comes back almost
instantaneously. If you&amp;rsquo;ve modified a file (as in the incremental,
server mode generation), my result was slightly slower than in server
mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hakyll: 2.23&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;incremental-generation:26b28caf414f77ef05fac6550ae96388&#34;&gt;Incremental generation&lt;/h3&gt;

&lt;p&gt;I brought each generator up in &amp;ldquo;server&amp;rdquo; &amp;ldquo;watching&amp;rdquo; mode, to see what
would happen if I changed a single file, resulting in regeneration of
everything affected. For example, I changed the most recent blog post,
which affects its generation as well as potentially the main
page, RSS, sitemap, archive, tags and categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll: 9.95&lt;/li&gt;
&lt;li&gt;Hugo: 4.11&lt;/li&gt;
&lt;li&gt;Hakyll: 1.50&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s interesting that Hugo&amp;rsquo;s live &amp;ldquo;watch&amp;rdquo; functionality does not really
improve over regenerating the site from scratch.&lt;/p&gt;

&lt;p&gt;For Hakyll, there is tremendous improvement. I believe this may be
because of the use of a cache directory but also because a
Hakyll-compiled generator incurs no &lt;em&gt;interpreter&lt;/em&gt; overhead once you
have it running in server mode watching for changes.&lt;/p&gt;

&lt;p&gt;9.95 seconds is still kind of slow for me, for making a quick change
to a file in progress and wanting to see how it displays in the
browser, so Jekyll is not optimal for me. But Hugo&amp;rsquo;s 4.11 seconds is acceptable.&lt;/p&gt;

&lt;h2 id=&#34;so-why-not-hakyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;So why not Hakyll?&lt;/h2&gt;

&lt;p&gt;So, given that Hakyll looks so promising, and I would far prefer
writing and debugging Haskell code, to hacking in some mixture of Go
templating and other configuration languages, why did I not migrate to
Hakyll?&lt;/p&gt;

&lt;p&gt;There are many considerations that go into what I choose as a
technology to solve a specific problem. For example, there&amp;rsquo;s a reason
I wrote all my one-shot little blog migration scripts in Perl, even
though I no longer write Perl for any other purpose (although Perl was
one of my main languages I used for nontrivial programs from
1999-2010).&lt;/p&gt;

&lt;p&gt;Hakyll has a small community. I&amp;rsquo;m not sure I would even call it a
community. It&amp;rsquo;s basically one guy&amp;rsquo;s project. It is completely
unopinionated, such that to create any reasonable site you have to
write your own code or copy and paste from someone else&amp;rsquo;s. There is no
formal concept of &amp;ldquo;theme&amp;rdquo; or an official theme sharing site.&lt;/p&gt;

&lt;p&gt;Hakyll is pretty confusing to build if you don&amp;rsquo;t use a Cabal sandbox,
and even then, there have perpetually been build problems of some kind
or another, for years. Last year, &lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/302&#34;&gt;I could not get it to build at all&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Meanwhile, the &lt;a href=&#34;https://travis-ci.org/jaspervdj/hakyll&#34;&gt;Travis build&lt;/a&gt;
is perpetually broken and doesn&amp;rsquo;t even test multiple versions of GHC
and Cabal. A call to
&lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/299&#34;&gt;get Hakyll into Stackage&lt;/a&gt;
is still open.&lt;/p&gt;

&lt;p&gt;I ran into a
&lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/225&#34;&gt;serious YAML-handling bug that still has not been addressed after over a year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In other words, just because Hakyll seems to perform well on a
simplistic toy migration of my personal blog (after all the
workarounds for the bugs mentioned above) doesn&amp;rsquo;t mean that I can
trust it to work if I do more complicated things, or that bug reports
will get addressed.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m writing this not to criticize the author of Hakyll, who by the way
writes a lot of quite high-quality
&lt;a href=&#34;http://jaspervdj.be/posts.html&#34;&gt;blog posts on Haskell&lt;/a&gt; and has a day
job developing in Haskell. Open source projects are labors of love
that just cannot be sustained by one person who has many things to do
in life.&lt;/p&gt;

&lt;h2 id=&#34;winner-hugo:26b28caf414f77ef05fac6550ae96388&#34;&gt;Winner: Hugo&lt;/h2&gt;

&lt;p&gt;It would be nice if there were a larger Hakyll community, but the
reality is that there isn&amp;rsquo;t, and therefore as someone who also has
many things to do and prefers to write for my blogs rather than
implement features for the blog engine, I chose Hugo as the clear
winner for my current needs.&lt;/p&gt;

&lt;p&gt;Hugo not only has an entire official
&lt;a href=&#34;http://discuss.gohugo.io/&#34;&gt;discussion site&lt;/a&gt; but also an active
&lt;a href=&#34;https://gitter.im/spf13/hugo&#34;&gt;Gitter room&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The official documentation is pretty good and continues to be updated.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:26b28caf414f77ef05fac6550ae96388&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Choosing a static site generator is like choosing any other software
to perform a task: you have to evaluate many different factors and
tradeoffs among the different choices available. For me, speed is very
important, but also a thriving, growing community of maintainers,
contributors, and users.&lt;/p&gt;

&lt;p&gt;In the end, I chose Hugo, because it is fast, actively maintained, and
has a sizable community revolving around it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to think about Rust ownership versus C&#43;&#43; unique_ptr</title>
      <link>http://conscientiousprogrammer.com/blog/2014/12/21/how-to-think-about-rust-ownership-versus-c-plus-plus-unique-ptr/</link>
      <pubDate>Sun, 21 Dec 2014 14:31:36 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/12/21/how-to-think-about-rust-ownership-versus-c-plus-plus-unique-ptr/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; programming language, which is nearing its important version 1.0 release, but already seen a lot of use, has many interesting features, the most prominent of which is its &lt;a href=&#34;http://doc.rust-lang.org/guide.html#ownership,-borrowing,-and-lifetimes&#34;&gt;ownership&lt;/a&gt; static type system that prevents certain kinds of bugs common in many programs in C or C++.&lt;/p&gt;

&lt;p&gt;For example, it is common in most applications to create graphs of objects pointing to each other, in which it is not clear how many pointers point to a particular object, who is to free the object&amp;rsquo;s memory when it is no longer needed, and what happens to all outstanding pointers to that block. Languages supporting precise &lt;a href=&#34;http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&#34;&gt;garbage collection&lt;/a&gt; use various algorithms to determine when memory can be freed, and have become particularly popular in the past twenty years, but there are still situations in which garbage collection is not ideal, hence the continued relevance of languages such as C++.&lt;/p&gt;

&lt;p&gt;When I was working as a software engineer in the 1990s developing desktop applications with user interfaces for the &lt;a href=&#34;http://en.wikipedia.org/wiki/X_Window_System&#34;&gt;X Window System&lt;/a&gt;, we used frameworks that included C++ &lt;a href=&#34;http://en.wikipedia.org/wiki/Smart_pointer&#34;&gt;smart pointers&lt;/a&gt; that used &lt;a href=&#34;http://en.wikipedia.org/wiki/Reference_counting&#34;&gt;reference counting&lt;/a&gt; to handle graphs of interconnected data. The C++ standard itself lagged behind in standardizing smart pointers; it started with the &lt;a href=&#34;http://www.informit.com/articles/article.aspx?p=30642&amp;amp;seqNum=9&#34;&gt;terribly flawed and unusable&lt;/a&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Auto_ptr&#34;&gt;&lt;code&gt;auto_ptr&lt;/code&gt;&lt;/a&gt; that finally got deprecated in C++11, then moved on finally to &lt;a href=&#34;http://en.wikipedia.org/wiki/Smart_pointer#unique_ptr&#34;&gt;&lt;code&gt;unique_ptr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Smart_pointer#shared_ptr_and_weak_ptr&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt; and &lt;code&gt;weak_ptr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When talking with C++ programmers about Rust, I have found that often they have been puzzled about how Rust&amp;rsquo;s ownership system does anything better than what C++ &lt;code&gt;unique_ptr&lt;/code&gt; already does. Here is an explanation (I will not be discussing analogues of &lt;code&gt;shared_ptr&lt;/code&gt; and &lt;code&gt;weak_ptr&lt;/code&gt; here).&lt;/p&gt;

&lt;h2 id=&#34;simplest-example-compile-time-type-checking-vs-run-time-segmentation-fault:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Simplest example: compile-time type-checking vs. run-time segmentation fault&lt;/h2&gt;

&lt;p&gt;First, go read Steve Klabnik&amp;rsquo;s &lt;a href=&#34;http://www.steveklabnik.com/uniq_ptr_problem/&#34;&gt;article about the simplest possible example illustrating what Rust offers over C++ &lt;code&gt;unique_ptr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, in C++, &lt;code&gt;unique_ptr&lt;/code&gt; is supposed to be a way to indicate that a given pointer is the unique &amp;ldquo;owner&amp;rdquo; of a piece of data. If you want to transfer ownership from one &lt;code&gt;unique_ptr&lt;/code&gt; to another, you have to call &lt;code&gt;move&lt;/code&gt; on it. After that, it is an &lt;em&gt;run-time error&lt;/em&gt; to try to access the data using the original &lt;code&gt;unique_ptr&lt;/code&gt;. This is great, except for two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By &amp;ldquo;it&amp;rsquo;s a run-time error&amp;rdquo;, we mean that the original &lt;code&gt;unique_ptr&lt;/code&gt;&amp;rsquo;s embedded pointer gets mutated to &lt;code&gt;nullptr&lt;/code&gt;, so that you have to perpetually check your &lt;code&gt;unique_ptr&lt;/code&gt; for &lt;code&gt;nullptr&lt;/code&gt;, otherwise get a segmentation fault.&lt;/li&gt;
&lt;li&gt;In many situations, we&amp;rsquo;d prefer to have a &lt;em&gt;compile-time&lt;/em&gt; guarantee that we will never dereference &lt;code&gt;nullptr&lt;/code&gt;, so that we don&amp;rsquo;t have hidden memory safety bugs lying around in our code that don&amp;rsquo;t happen until well into a long-running program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is Steve&amp;rsquo;s example of an unintended segmentation fault from C++:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
    unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; orig(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; stolen &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; move(orig);

    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Steve shows an &amp;ldquo;equivalent&amp;rdquo; Rust program in which code attempts to move ownership fails to compile because of a type error (I edited to correspond more closely with the C++):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;stolen&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;understanding-c-behavior-by-modeling-it-in-rust-safely:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Understanding C++ behavior by modeling it in Rust, safely&lt;/h2&gt;

&lt;p&gt;But it is not quite accurate to call the Rust program &amp;ldquo;equivalent&amp;rdquo; to the original C++ program. It&amp;rsquo;s really a &amp;ldquo;cleaned up&amp;rdquo; or &amp;ldquo;restricted&amp;rdquo; version of that program (and the argument for using a type-safe language like Rust is that we often like these restrictions, as a tradeoff for safety or efficiency).&lt;/p&gt;

&lt;p&gt;Here is a Rust program that more accurately models what the C++ &lt;code&gt;unique_ptr&lt;/code&gt; actually does, which happens &lt;em&gt;dynamically&lt;/em&gt; at run-time, not at compile time, hence the segmentation fault: the transfer of ownership by &lt;code&gt;move&lt;/code&gt; on a &lt;code&gt;unique_ptr&lt;/code&gt; is not type-checked at compile-time.&lt;/p&gt;

&lt;p&gt;For illustration&amp;rsquo;s sake, we have modeled C++ directly in &lt;em&gt;safe&lt;/em&gt; Rust through indirection by treating a C++ pointer to &lt;code&gt;T&lt;/code&gt; (C++ pointers can always be &lt;code&gt;nullptr&lt;/code&gt;) as an &lt;code&gt;Option&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, where &lt;code&gt;nullptr&lt;/code&gt; is modeled as &lt;code&gt;None&lt;/code&gt; and a non-null pointer is modeled as &lt;code&gt;Some(pointer_nonnull)&lt;/code&gt;. This Rust code type-checks, compiles, and simulates a segmentation fault.&lt;/p&gt;

&lt;p&gt;You can play with this code &lt;a href=&#34;http://is.gd/5kEQA8&#34;&gt;at this Rust playground link&lt;/a&gt;. (You may find it interesting to examine the assembly code generated.)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Simulate a segmentation fault.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;seg_fault()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;panic&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;segmentation fault&amp;quot;&lt;/span&gt;);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Rough modeling in Rust of C++ unique_ptr&amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// because C++ pointers can always be null.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Some&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// In C++, deferencing null seg faults.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;seg_fault(),&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Some&lt;/span&gt;(orig_nonnull)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig_nonnull);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// The equivalent of C++ unique_ptr move.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;stolen&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Some&lt;/span&gt;(orig_nonnull);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// We seg fault after the C++ style move.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;seg_fault(),&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Some&lt;/span&gt;(orig_nonnull)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig_nonnull)&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nobody would ever write this kind of code in Rust, but implicitly, all C++ programs are semantically basically doing this, except that for efficiency, the &lt;code&gt;nullptr&lt;/code&gt; checking is not done at the language level but just results in an actual segmentation fault at the operating system level.&lt;/p&gt;

&lt;h2 id=&#34;an-example-of-smart-pointers-inside-a-collection:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;An example of smart pointers inside a collection&lt;/h2&gt;

&lt;p&gt;The single most disturbing failure mode of the C++-based software product I worked on in 1995-1997 in C++ was segmentation faults resulting from mysteriously disappearing pointers. What I mean is, behavior like the following, where a container containing smart pointers to objects was meant to &lt;em&gt;own&lt;/em&gt; them, but there was no compile-time way to verify this fact, because of the nature of the object graph. If someone didn&amp;rsquo;t play by the uncheckable rules and inadvertently took ownership of (instead of &amp;ldquo;borrowing&amp;rdquo; through a raw pointer) something embedded in the collection, then &lt;code&gt;nullptr&lt;/code&gt; appeared, and a segmentation fault happened.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
    vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    v.push_back(make_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++ happily allows this.&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; pointer_to_5 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; move(v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pointer_to_5 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Seg fault.&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You can probably guess what some developers did to &amp;ldquo;fix&amp;rdquo; the segmentation fault. They started adding &lt;code&gt;nullptr&lt;/code&gt; checks everywhere to prevent crashing, but this only resulted in &lt;em&gt;corrupt user data and documents&lt;/em&gt;, because in fact, we lost data in those collections and smart pointers to the data should never have ended up &lt;code&gt;nullptr&lt;/code&gt;!!&lt;/p&gt;

&lt;p&gt;The complexity of the application and the deadline pressures made it impossible to fully figure out what was going wrong and where. I actually ended up writing an external &amp;ldquo;validation&amp;rdquo; utility program in &lt;a href=&#34;http://www.smlnj.org/&#34;&gt;Standard ML of New Jersey&lt;/a&gt; that parsed serialized object graphs and tried to fix them up in some fashion. This particularly helped the QA team a lot when dealing with old documents that were already corrupted.&lt;/p&gt;

&lt;h3 id=&#34;the-rust-version-will-not-compile:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;The Rust version will not compile&lt;/h3&gt;

&lt;p&gt;The Rust type-checker rejects any attempt to move ownership out of a collection. (Try to compile it in &lt;a href=&#34;http://is.gd/Om7wfr&#34;&gt;this playground&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;v&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;vec&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;[&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i];&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Attempted move: type error at compile time.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;pointer_to_5&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;];&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pointer_to_5);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;illegal_move_out_of_vector.rs:7:24: 7:28 error: cannot move out of dereference (dereference is implicit, due to indexing)&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;illegal_move_out_of_vector.rs:7     let pointer_to_5 = v[0];&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;                                                       ^~~~&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;illegal_move_out_of_vector.rs:7:9: 7:21 note: attempting to move value to here&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;illegal_move_out_of_vector.rs:7     let pointer_to_5 = v[0];&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;                                        ^~~~~~~~~~~~&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;often-you-do-want-to-share:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Often, you do want to share&lt;/h3&gt;

&lt;p&gt;I have to be honest: at first, Rust&amp;rsquo;s ownership type system seems like quite a restriction, and adhering to it strictly would require the restructuring of certain kinds of programs. Static type safety of any kind in any language is always a matter of tradeoffs.&lt;/p&gt;

&lt;p&gt;But note that Rust is flexible: you don&amp;rsquo;t have to use Rust&amp;rsquo;s default pointer type! You can use one of Rust&amp;rsquo;s many other pointer types, such as &lt;a href=&#34;http://doc.rust-lang.org/guide.html#rc-and-arc&#34;&gt;&lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt;, that allow reference-counted shared ownership (like C++ &lt;code&gt;shared_ptr&lt;/code&gt;), if that&amp;rsquo;s what you really want. (&lt;a href=&#34;http://is.gd/HNi7SR&#34;&gt;Playground here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Reference-counted smart pointer.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;Rc;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;v&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;vec&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;[Rc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;new(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i)];&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;pointer_to_5&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].clone();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pointer_to_5);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;unsafe:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Unsafe&lt;/h2&gt;

&lt;p&gt;Finally, Rust does allow you to go all out and write &lt;a href=&#34;http://doc.rust-lang.org/guide.html#unsafe&#34;&gt;unsafe&lt;/a&gt; code, if you truly need to for raw C performance or FFI reasons. Most of the time you do not need to, because the whole point of Rust is to compile down to the same kind of assembly code you would get from C.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extern&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;crate&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;libc;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;libc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;{size_t,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;malloc};&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// How ugly it is to pretend Rust is unsafe C.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;unsafe&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;malloc(mem&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_of&lt;span style=&#34;color: #666666&#34;&gt;::&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;size_t)&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;ptr&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;write(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;ptr&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;null&lt;span style=&#34;color: #666666&#34;&gt;::&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// null pointer crash!&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;conclusion:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this little article shows a little bit about what Rust&amp;rsquo;s ownership type system can do to make pointer-heavy code memory safe, unlike C++, and also gives you a taste of how Rust&amp;rsquo;s flexibility also allows you to use C++-style reference-counting if desired, and even raw unsafe code. Personally, I am excited about the upcoming 1.0 release of Rust, and although I have not done low-level systems programming for almost two decades, if I ever was to do it again, I would immediately reach out for Rust as a language of choice for the ultimate combination of safety, expressiveness, and performance (in use of time and space).&lt;/p&gt;

&lt;p&gt;All code for this article is available in a &lt;a href=&#34;https://github.com/FranklinChen/rust-vs-cpp-unique_ptr&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remembering over 20 years of reading Dr. Dobb&#39;s Journal even till today</title>
      <link>http://conscientiousprogrammer.com/blog/2014/12/16/remembering-over-20-years-of-reading-dr-dobbs-journal-even-till-today/</link>
      <pubDate>Tue, 16 Dec 2014 22:23:42 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/12/16/remembering-over-20-years-of-reading-dr-dobbs-journal-even-till-today/</guid>
      <description>

&lt;p&gt;It was with sadness, but not surprise, that I read today about the &lt;a href=&#34;http://www.drdobbs.com/architecture-and-design/farewell-dr-dobbs/240169421&#34;&gt;end of Dr. Dobb&amp;rsquo;s Journal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been reading this magazine for &lt;em&gt;twenty-two years&lt;/em&gt;! I haven&amp;rsquo;t read any other magazine on any topic for this long.&lt;/p&gt;

&lt;h2 id=&#34;rss:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;RSS&lt;/h2&gt;

&lt;p&gt;Of course, it&amp;rsquo;s been years since my last printed copy of &lt;a href=&#34;http://en.wikipedia.org/wiki/Dr._Dobb%27s_Journal&#34;&gt;Dr. Dobb&amp;rsquo;s Journal&lt;/a&gt; (DDJ) entered my mailbox. At some point I was simply regularly reading content from its online &lt;a href=&#34;http://drdobbs.com/rss/all&#34;&gt;RSS feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was particularly sad when reading of the discontinuation of the publication because I had been following for quite some time Andrew Koenig&amp;rsquo;s multi-part article on binary search. In fact, &lt;a href=&#34;http://www.drdobbs.com/cpp/abstractions-for-binary-search-part-9-wh/240169416&#34;&gt;I had just read part 9 and was looking forward to the eventual conclusion of the series&lt;/a&gt;! I&amp;rsquo;ve been waiting to see his punch line, since every article in this series has ended with a cliff-hanger. Here, he had closed with &amp;ldquo;Next week, we shall continue building our tests.&amp;rdquo; I wonder if he be able to post the conclusion?&lt;/p&gt;

&lt;h3 id=&#34;update-of-2014-12-22:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;(Update of 2014-12-22)&lt;/h3&gt;

&lt;p&gt;Andrew Koenig&amp;rsquo;s article series did conclude, after all, &lt;a href=&#34;http://www.drdobbs.com/cpp/abstractions-for-binary-search-part-10-p/240169437&#34;&gt;today&lt;/a&gt;. I&amp;rsquo;ll comment on his concluded article series in a later blog post.&lt;/p&gt;

&lt;h2 id=&#34;how-i-started-reading-ddj:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;How I started reading DDJ&lt;/h2&gt;

&lt;p&gt;In 1992, I was unemployed, a physics grad school dropout, and needed a new career. I had studied some math and passed the first two actuarial exams but frankly, had no interest in doing math and insurance for a living. Friends told me computer programming was a good way to go, so although I had not written a single computer program since high school (where I wrote and ran only COBOL and Pascal programs), I decided to learn C and Unix and Lisp, because these were technologies my friends had learned in their first year in college.&lt;/p&gt;

&lt;p&gt;Meanwhile, this was all before the Web, so the way to get any new and exciting information was from Usenet or from printed magazines. I got some recommendations to check out two magazines in particular: Dr. Dobb&amp;rsquo;s Journal and the &lt;a href=&#34;http://en.wikipedia.org/wiki/C/C%2B%2B_Users_Journal&#34;&gt;C Users Journal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, I did ask, &amp;ldquo;Who the heck is or was Dr. Dobb?!&amp;rdquo; It didn&amp;rsquo;t matter. The magazine was great. It covered all kinds of topics, and had code listings you could type in or download (remember &lt;a href=&#34;http://en.wikipedia.org/wiki/File_Transfer_Protocol#Anonymous_FTP&#34;&gt;anonymous FTP&lt;/a&gt; as the primary way to download stuff?).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/d/d8/Macintosh_classic.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Macintosh Classic&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I got my first job as a software engineer in 1993, after much intense self-study, learning to programm in C on my younger sister&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Macintosh_Classic&#34;&gt;Macintosh Classic&lt;/a&gt; using &lt;a href=&#34;http://en.wikipedia.org/wiki/THINK_C&#34;&gt;THINK C&lt;/a&gt;. What can I say, DDJ was there for me as a useful resource.&lt;/p&gt;

&lt;h2 id=&#34;continuing-to-read-ddj-learning-new-languages:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;Continuing to read DDJ; learning new languages&lt;/h2&gt;

&lt;p&gt;Today I was intrigued to read &lt;a href=&#34;https://twitter.com/bodil/status/545009243272003585&#34;&gt;Bodil Stokke&amp;rsquo;s tweet&lt;/a&gt;, &amp;ldquo;I read about both Haskell and Dylan in Dr Dobbs 1994-ish and was itching to learn both, but couldn&amp;rsquo;t find Amiga impls for either.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I did learn both Haskell and Dylan in 1994, but don&amp;rsquo;t remember whether it was because of mention in DDJ or because of other sources! I do remember that I downloaded quite a bit of &amp;ldquo;freeware&amp;rdquo; and &amp;ldquo;shareware&amp;rdquo; through FTP or bought through CD-ROMs in 1992-1994, before the birth of the &lt;a href=&#34;http://en.wikipedia.org/wiki/World_Wide_Web&#34;&gt;World Wide Web&lt;/a&gt;, which I started using excitedly in 1995.&lt;/p&gt;

&lt;p&gt;1994 was a particularly important year for me, because I discovered and experimented with writing and running programs in a huge variety of programming languages that year.&lt;/p&gt;

&lt;h3 id=&#34;haskell:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;Haskell&lt;/h3&gt;

&lt;p&gt;The most important new language I learned in 1994 was &lt;a href=&#34;http://caml.inria.fr/caml-light/&#34;&gt;Caml Light&lt;/a&gt;, which I came across and learned and used on my Mac SE/30 in 1994, at &lt;a href=&#34;http://caml.inria.fr/pub/old_caml_site/caml-list-ar/0136.html&#34;&gt;version 0.6&lt;/a&gt;. I still remember just finishing working through the &lt;a href=&#34;http://caml.inria.fr/pub/docs/fpcl/&#34;&gt;tutorial&lt;/a&gt; when version 0.7 came out and a lot of stuff changed, annoying me.  How Caml changed the course of my life is the subject of another article.&lt;/p&gt;

&lt;p&gt;I also discovered Haskell in 1994. That took longer for me to get a feel for. It was the dialect &lt;a href=&#34;http://en.wikipedia.org/wiki/Gofer_%28programming_language%29&#34;&gt;Gofer&lt;/a&gt; that I first downloaded and copied to a floppy disk, in the form of &lt;a href=&#34;http://web.cecs.pdx.edu/~mpj/goferarc/macgofer/index.html&#34;&gt;MacGofer&lt;/a&gt;. Later, in 1996, I used &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; briefly for a small internal utility at work in 1996. I see that DDJ &lt;a href=&#34;http://www.drdobbs.com/programming-paradigms/184409831&#34;&gt;mentioned Haskell in February 1996&lt;/a&gt;, but given that I learned it earlier, I don&amp;rsquo;t know if there was any earlier DDJ mention (not Web-searchable currently) that could have influenced me to try Gofer in the first place. (More on the history of my Haskell usage is the subject of another article; Haskell is the only programming language I am still using active twenty years after first learning it.)&lt;/p&gt;

&lt;h3 id=&#34;dylan:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;Dylan&lt;/h3&gt;

&lt;p&gt;I see that there was a &lt;a href=&#34;http://www.drdobbs.com/tools/the-dylan-programming-language/184409404&#34;&gt;DDJ article on Dylan in January 1994&lt;/a&gt;. &amp;ldquo;Dylan, an object-oriented dynamic language developed by Apple Computer, is designed to replace existing static languages for the development of large software systems, yet remains small and efficient enough for the next generation of portable computers. Dylan was developed from the language Scheme, augmented with the Common-Lisp Object System (CLOS).&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I was very excited about &lt;a href=&#34;http://en.wikipedia.org/wiki/Dylan_%28programming_language%29&#34;&gt;Dylan&lt;/a&gt; when I learned about it, because of its ambitions to simultaneously&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have all the nice features of Scheme&lt;/li&gt;
&lt;li&gt;remain dynamically typed, but offer optional typing as a standard part of the language&lt;/li&gt;
&lt;li&gt;provide an object system with multimethods (in 1994, I felt that conventional single-receiver OO was a dead end in the history of programming languages, as evidenced by the horrible &lt;a href=&#34;http://en.wikipedia.org/wiki/Visitor_pattern&#34;&gt;visitor pattern&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Up until I discovered Caml, my favorite language was Scheme, which I had learned in 1992 while working through (the first edition of) &lt;a href=&#34;http://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs&#34;&gt;&amp;ldquo;The Structure and Interpretation of Computer Programs&amp;rdquo;&lt;/a&gt; (SICP), so I felt totally at home in Dylan. In fact, I remember this very article as convincing me to switch from Scheme to Dylan: &lt;a href=&#34;http://www.drdobbs.com/tools/the-dylan-programming-language/184409404#0272_00e9&#34;&gt;Example 5&lt;/a&gt; in the article presented a code snippet from SICP translated into Dylan! Note that this was when Dylan was still using an S-expression syntax carried over from Scheme. Later, Dylan acquired an infix syntax, which I was a big fan of, actually, since I viscerally dislike the parentheses of Lisp languages. I played around with various implementations of Dylan before &lt;a href=&#34;http://en.wikipedia.org/wiki/Apple_Dylan&#34;&gt;Apple&amp;rsquo;s project&lt;/a&gt; was &lt;a href=&#34;http://web.archive.org/web/20060101181134/http://apple.computerhistory.org/discuss/msgReader$186?mode=day&#34;&gt;killed in 1995&lt;/a&gt;. That was a shocker. The news got to me late. I had acquired the Apple Dylan implementation and manual, and it was all for nothing. It was one of the greatest disappointments of my life (topic of another article).&lt;/p&gt;

&lt;h2 id=&#34;conclusion:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve appreciated Dr. Dobb&amp;rsquo;s Journal for over two decades because of the timely information it has brought on all kinds of topics involving software development, from C and assembly code listings to surveys of new languages, libraries, algorithms, etc. It was particularly exciting rediscovering an important article on Dylan that exposed me to a sadly short-lived language, Dylan (although some are trying to revive it as &lt;a href=&#34;http://opendylan.org/&#34;&gt;Open Dylan&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Some nostalgia and detective work have opened up memories and questions of &amp;ldquo;what could have been&amp;rdquo; that I&amp;rsquo;ll explore in later articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is your relationship to Dr. Dobb&amp;rsquo;s Journal? Have you ever been a loyal reader of it? What did you get from it?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When a computer algebra program gives wrong answers</title>
      <link>http://conscientiousprogrammer.com/blog/2014/11/06/when-a-computer-algebra-program-gives-wrong-answers/</link>
      <pubDate>Thu, 06 Nov 2014 20:20:32 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/11/06/when-a-computer-algebra-program-gives-wrong-answers/</guid>
      <description>

&lt;p&gt;I read an interesting and disturbing report, &lt;a href=&#34;http://www.ams.org/notices/201410/rnoti-p1249.pdf&#34;&gt;&amp;ldquo;The Misfortunes of a Trio of Mathematicians Using Computer Algebra Systems. Can We Trust in Them?&amp;rdquo;&lt;/a&gt; published in the Notices of the American Mathematical Society. I feel that all software developers should read this and reflect on the nature of our work, when people who are not programmers depend on it.&lt;/p&gt;

&lt;p&gt;This report was about mathematicians accidentally discovering a bug in a major computer algebra system, Mathematica.&lt;/p&gt;

&lt;h2 id=&#34;a-note-about-scientists-and-mathematicians:260dc6c39a3c815ab72d5109f7c53dfd&#34;&gt;A note about scientists and mathematicians&lt;/h2&gt;

&lt;p&gt;Scientists and mathematicians increasingly depend on computer software for their work, to explore data, analyze it, verify hypotheses, etc. It&amp;rsquo;s gotten to the point where we can no longer pretend, for example, that scientists are not writing substantial computer programs, whether or not they are trained programmers (in fact, &lt;a href=&#34;http://software-carpentry.org/&#34;&gt;Software Carpentry&lt;/a&gt; was created by a physicist to fulfill the need of training scientists in programming).&lt;/p&gt;

&lt;h2 id=&#34;the-discovery-of-the-bug:260dc6c39a3c815ab72d5109f7c53dfd&#34;&gt;The discovery of the bug&lt;/h2&gt;

&lt;p&gt;A bunch of mathematicians used Mathematica to generate and test ideas they had about a mathematical hypothesis. They wanted to find counterexamples to their conjectures and found some with integer arithmetic calculations using Mathematica.&lt;/p&gt;

&lt;p&gt;One of them happened to also be using Maple, and the results differed, so Mathematica or Maple had to be wrong. They isolated the error by &lt;em&gt;generating random test cases&lt;/em&gt; and finding that Mathematica was in error.&lt;/p&gt;

&lt;p&gt;In fact, given the &lt;em&gt;same matrix&lt;/em&gt; and calling Mathematica&amp;rsquo;s matrix determinant function, Mathematica would return different results!! This was a rather serious bug indeed. They found that Mathematica 7 did not have this bug, but 9 and 10 did.&lt;/p&gt;

&lt;h2 id=&#34;wolfram-research-s-lack-of-responsiveness-to-the-problem:260dc6c39a3c815ab72d5109f7c53dfd&#34;&gt;Wolfram Research&amp;rsquo;s lack of responsiveness to the problem&lt;/h2&gt;

&lt;p&gt;They reported the Mathematica bug to Wolfram Research but got no useful reply, and at the next release of Mathematica, the bug was still not fixed.&lt;/p&gt;

&lt;p&gt;There were other bugs they found as well.&lt;/p&gt;

&lt;p&gt;Wolfram Research never gave any feedback, and does not publish a list of known bugs.&lt;/p&gt;

&lt;h2 id=&#34;lessons-to-learn:260dc6c39a3c815ab72d5109f7c53dfd&#34;&gt;Lessons to learn&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When there is a bug in proprietary, closed-source software, you are completely helpless. The bug may not even be acknowledged, much less fixed, and you could not fix it yourself even if you wanted to.&lt;/li&gt;
&lt;li&gt;There is value in having an alternative tool: without independent work using Maple, the bugs in Mathematica may never have been discovered. Diversity is good.&lt;/li&gt;
&lt;li&gt;All scientists should be aware that the tools they use can be buggy, and therefore computational results can only be &lt;em&gt;trusted&lt;/em&gt; as much as the specific versions of software they use can be trusted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Does any of this surprise you? For what you rely on, how do you work around the inevitable fact that software has bugs?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Code and Supply: Making music with Overtone in Clojure; Conveying information through sound</title>
      <link>http://conscientiousprogrammer.com/blog/2014/10/07/pittsburgh-code-and-supply-making-music-with-overtone-in-clojure-conveying-information-through-sound/</link>
      <pubDate>Tue, 07 Oct 2014 21:10:18 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/10/07/pittsburgh-code-and-supply-making-music-with-overtone-in-clojure-conveying-information-through-sound/</guid>
      <description>

&lt;p&gt;I attended &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/202086812&#34;&gt;a fine meeting&lt;/a&gt; of &lt;a href=&#34;http://www.codeandsupply.co/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; dedicated to two related topics: &lt;em&gt;music&lt;/em&gt; and &lt;em&gt;sonification&lt;/em&gt;. I thought it was a great idea to have presentations on both topics in the same session, thereby giving a broad view of what can be done with &lt;em&gt;sound&lt;/em&gt; through computation.&lt;/p&gt;

&lt;h2 id=&#34;erik-swanson-on-overtone-in-clojure:eae2c8db91585e112346d13d734d08c3&#34;&gt;Erik Swanson on Overtone in Clojure&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://overtone.github.io/&#34;&gt;Overtone&lt;/a&gt; is a very interesting environment for programmable music written in Clojure that I&amp;rsquo;d heard of years ago but never gotten around to playing with, simply because my primary interest in music is &lt;a href=&#34;http://franklinchen.com/categories/music/&#34;&gt;playing music on traditional physical instruments with my own hands, the old-fashioned way&lt;/a&gt;. However, I am definitely open to the idea of doing interesting new things with computer aid; it just has not been a priority to explore.&lt;/p&gt;

&lt;p&gt;As preparation for the presentation (I don&amp;rsquo;t like feeling completely lost during live demos; I usually do!), I actually finally set up an Overtone project with Leiningen and walked through a tutorial that simply used the Clojure CIDER mode in Emacs to operate in a REPL. I didn&amp;rsquo;t do any real live-coding, however. I just wanted to get a taste.&lt;/p&gt;

&lt;p&gt;Erik Swanson gave a great presentation in which he described what he was doing as he live-coded some music with Emacs, incrementally creating instruments and generating pitches. Because of his presentation, I feel more comfortable about the prospect of really digging into Overtone if I ever want to.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a video of his presentation:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/w7ARayiKBrE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;keith-callenberg-https-twitter-com-keithcallenberg-on-conveying-information-through-sound:eae2c8db91585e112346d13d734d08c3&#34;&gt;&lt;a href=&#34;https://twitter.com/keithcallenberg&#34;&gt;Keith Callenberg&lt;/a&gt; on conveying information through sound&lt;/h2&gt;

&lt;p&gt;I learned a new word today: &lt;a href=&#34;http://en.wikipedia.org/wiki/Sonification&#34;&gt;&amp;ldquo;sonification&amp;rdquo;&lt;/a&gt;, the use of non-speech audio to convey information.&lt;/p&gt;

&lt;p&gt;I may have vaguely encountered sonification before, but never while fully attentive to it. That changed when Keith Callenberg, a computational scientist, gave a fine presentation in which he gave numerous striking examples of sonification. He made the important distinction between music and sonification: music is sound for an aesthetic purpose, but sonification is for information transfer.&lt;/p&gt;

&lt;p&gt;He convincingly showed why sonification is useful for data analysis, and also noted that our culture is strangely dominated by the &lt;em&gt;visual&lt;/em&gt;, so there remain many opportunities to use sound to understand data. (Also, sonification is used to help the visually impaired.)&lt;/p&gt;

&lt;p&gt;One local example he gave was a particulate monitoring study done at CMU.&lt;/p&gt;

&lt;h2 id=&#34;david-souther-on-web-audio-in-javascript:eae2c8db91585e112346d13d734d08c3&#34;&gt;David Souther on Web Audio in JavaScript&lt;/h2&gt;

&lt;p&gt;I thought we were done for the evening, but David Souther hopped up with an unscheduled lightning talk on using Web Audio in JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:eae2c8db91585e112346d13d734d08c3&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I enjoyed the presentations on music and sound, and got some ideas for stuff I might want to do myself. Another excellent session for Pittsburgh Code and Supply!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Clojure transducers through types</title>
      <link>http://conscientiousprogrammer.com/blog/2014/08/07/understanding-cloure-transducers-through-types/</link>
      <pubDate>Thu, 07 Aug 2014 22:58:16 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/08/07/understanding-cloure-transducers-through-types/</guid>
      <description>

&lt;p&gt;Yesterday, Rich Hickey published a blog post, &lt;a href=&#34;http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming&#34;&gt;&amp;ldquo;Transducers are Coming&amp;rdquo;&lt;/a&gt;, which attracted a lot of attention.&lt;/p&gt;

&lt;p&gt;I have a confession to make, which I have made before: I find it very difficult to understand ideas or code not presented with &lt;em&gt;types&lt;/em&gt;. So I decided that the only way I could possibly understand what &amp;ldquo;transducers&amp;rdquo; are would be to actually implement them in a typed language. I ended up doing so and am sharing my findings here.&lt;/p&gt;

&lt;h2 id=&#34;vague-types-in-the-original-blog-post:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Vague types in the original blog post&lt;/h2&gt;

&lt;p&gt;Rich informally gave some type signatures in his blog post:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;;;reducing function signature
whatever, input -&amp;gt; whatever

;;transducer signature
(whatever, input -&amp;gt; whatever) -&amp;gt; (whatever, input -&amp;gt; whatever)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was, unfortunately, not very helpful. It is hard to make sense of this pseudo-notation for types. What is quantified over what? And what is bound to what? I&amp;rsquo;ll explain later what I mean by these questions.&lt;/p&gt;

&lt;h2 id=&#34;first-discussion-thread-i-saw:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;First discussion thread I saw&lt;/h2&gt;

&lt;p&gt;There was much tweeting online about transducers after Rich Hickey&amp;rsquo;s initial announcement; the tweets did not help me, except for links posted to discussion elsewhere.&lt;/p&gt;

&lt;p&gt;One of them was &lt;a href=&#34;https://news.ycombinator.com/item?id=8143905&#34;&gt;on Hacker News&lt;/a&gt;. I browsed through it but found it mostly not useful. The problem was that although a lot of interesting Haskell code was thrown around, it tended to be &lt;em&gt;related&lt;/em&gt; to transducers but not an &lt;em&gt;exact&lt;/em&gt; translation of the concept. I already had my own intuitions about transducers being related to well-known types such as &lt;a href=&#34;http://www.haskell.org/haskellwiki/Foldable_and_Traversable&#34;&gt;foldables&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Iteratee&#34;&gt;iteratees&lt;/a&gt;, &lt;a href=&#34;https://lens.github.io/&#34;&gt;lenses&lt;/a&gt;, etc. That &amp;ldquo;ordinary function composition&amp;rdquo; was involved immediately suggested the connections, because function composition is huge in these existing Haskell libraries.&lt;/p&gt;

&lt;p&gt;But what I wanted was to understand transducers &lt;em&gt;as they are&lt;/em&gt;, before even thinking about generalizations and comparisons.&lt;/p&gt;

&lt;h3 id=&#34;what-are-the-types:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;What are the types?&lt;/h3&gt;

&lt;p&gt;Rich Hickey &lt;a href=&#34;https://news.ycombinator.com/item?id=8144385&#34;&gt;informally offered some types&lt;/a&gt; (which he said were &amp;ldquo;a la Haskell&amp;rdquo;) to try to help out:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    ;;reducing fn
    x-&amp;gt;a-&amp;gt;x

    ;;transducer fn
    (x-&amp;gt;a-&amp;gt;x)-&amp;gt;(x-&amp;gt;b-&amp;gt;x)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, by using type variables &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt;, that indicates what is bound to what. The blog post should have used this notation rather than&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;;;transducer signature
(whatever, input -&amp;gt; whatever) -&amp;gt; (whatever, input -&amp;gt; whatever)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;sample-clojure-code:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Sample Clojure code&lt;/h3&gt;

&lt;p&gt;He also posted some sample Clojure code:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/b5aefa622180681e1c81.js&#34;&gt;&lt;/script&gt;


&lt;h2 id=&#34;second-discussion-thread-i-saw:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Second discussion thread I saw&lt;/h2&gt;

&lt;p&gt;Then today, I saw a discussion thread on Reddit, titled &lt;a href=&#34;http://www.reddit.com/r/haskell/comments/2cv6l4/clojures_transducers_are_perverse_lenses/&#34;&gt;&amp;ldquo;Clojure&amp;rsquo;s Transducers are Perverse Lenses&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;actual-runnable-haskell-code:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Actual runnable Haskell code&lt;/h3&gt;

&lt;p&gt;Rich finally posted some actual &lt;a href=&#34;http://www.reddit.com/r/haskell/comments/2cv6l4/clojures_transducers_are_perverse_lenses/&#34;&gt;type-checked, runnable Haskell code&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Transducers in Haskell&lt;/span&gt;

&lt;span style=&#34;color: #0000FF&#34;&gt;mapping&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r)
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Original was (b -&amp;gt; a) -&amp;gt; (r -&amp;gt; a -&amp;gt; r) -&amp;gt; (r -&amp;gt; b -&amp;gt; r)&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- but Michael O&amp;#39;Keefe in comment pointed out this is misleading&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;mapping&lt;/span&gt; f xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xf r (f a)

&lt;span style=&#34;color: #0000FF&#34;&gt;filtering&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r)
&lt;span style=&#34;color: #0000FF&#34;&gt;filtering&lt;/span&gt; p xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; p a &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt; xf r a &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; r

&lt;span style=&#34;color: #0000FF&#34;&gt;flatmapping&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [b]) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r)
&lt;span style=&#34;color: #0000FF&#34;&gt;flatmapping&lt;/span&gt; f xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; foldl xf r (f a)

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- for exposition only, yes, conj is gross for lazy lists&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- in Clojure conj and left folds dominate&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;conj&lt;/span&gt; xs x &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; [x]
&lt;span style=&#34;color: #0000FF&#34;&gt;xlist&lt;/span&gt; xf &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; foldl (xf conj) &lt;span style=&#34;color: #B00040&#34;&gt;[]&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- build any old list function with its transducer, all the same way&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xmap&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [b]
&lt;span style=&#34;color: #0000FF&#34;&gt;xmap&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; mapping f

&lt;span style=&#34;color: #0000FF&#34;&gt;xfilter&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [a]
&lt;span style=&#34;color: #0000FF&#34;&gt;xfilter&lt;/span&gt; p &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; filtering p

&lt;span style=&#34;color: #0000FF&#34;&gt;xflatmap&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [b]) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [b]
&lt;span style=&#34;color: #0000FF&#34;&gt;xflatmap&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; flatmapping f

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- again, not interesting for lists, but the same transform&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- can be put to use wherever there&amp;#39;s a step fn&lt;/span&gt;

&lt;span style=&#34;color: #0000FF&#34;&gt;xform&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r)
&lt;span style=&#34;color: #0000FF&#34;&gt;xform&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; mapping (&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; filtering even &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; flatmapping (&lt;span style=&#34;color: #0000FF&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;..&lt;/span&gt; x])


&lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; xlist xform [&lt;span style=&#34;color: #666666&#34;&gt;1..5&lt;/span&gt;]
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- [0,1,2,0,1,2,3,4,0,1,2,3,4,5,6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this post, I knew it would not take me long to figure out transducers.&lt;/p&gt;

&lt;h2 id=&#34;refactoring-his-haskell-code:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Refactoring his Haskell code&lt;/h2&gt;

&lt;p&gt;Two things to notice about the original code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has long, low-level function types rather than types that actually &lt;em&gt;name&lt;/em&gt; the concepts being discussed (&lt;em&gt;reducers&lt;/em&gt; and &lt;em&gt;transducers&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;It uses hardcoded list types &lt;code&gt;[a]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;type-synonyms-and-higher-rank-types:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Type synonyms and higher-rank types&lt;/h3&gt;

&lt;p&gt;Defining lots and lots of types (whether synonyms or &lt;a href=&#34;http://www.haskell.org/haskellwiki/Newtype&#34;&gt;newtypes&lt;/a&gt; is standard practice when programming in a modern typed language. OK, so I defined a type synonym&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Left reduce&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; a r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;But what about transducer? This is trickier.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;invalid&lt;/em&gt; attempt at a type would be&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Illegal!&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; a b &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; a r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; b r
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;because the type variable &lt;code&gt;r&lt;/code&gt; is not bound in the type definition. And it would be incorrect to just randomly add &lt;code&gt;r&lt;/code&gt; on the left hand side as an extra parameter to the &lt;code&gt;Transducer&lt;/code&gt; type, because in fact it is &lt;em&gt;critical&lt;/em&gt; that a transducer &lt;em&gt;does not care&lt;/em&gt; about the underlying reducer&amp;rsquo;s return type &lt;code&gt;r&lt;/code&gt;. How do we write the desired type?&lt;/p&gt;

&lt;p&gt;It turns out you need &lt;a href=&#34;http://www.haskell.org/haskellwiki/Rank-N_types&#34;&gt;higher-rank types&lt;/a&gt;. Rank-1 types are not sufficient; we need a rank-2 type to quantify &lt;code&gt;r&lt;/code&gt;, to say that a transducer from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt; is a transformation that takes a reducer to a specific &lt;code&gt;r&lt;/code&gt; and returns another reducer to the &lt;em&gt;same&lt;/em&gt; &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Here&amp;#39;s where the rank-2 type is needed&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; a b &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; forall r &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; a r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; b r
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now we can see more clearly some &lt;em&gt;completely generic&lt;/em&gt; ways to create a transducer:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;mapping&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; b a
&lt;span style=&#34;color: #0000FF&#34;&gt;mapping&lt;/span&gt; f xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xf r (f a)

&lt;span style=&#34;color: #0000FF&#34;&gt;filtering&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; a a
&lt;span style=&#34;color: #0000FF&#34;&gt;filtering&lt;/span&gt; p xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; p a &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt; xf r a &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; r
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;a-bit-of-history:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;A bit of history&lt;/h4&gt;

&lt;p&gt;Higher-rank types are a powerful technique for expressing &amp;ldquo;hiding&amp;rdquo; of unnecessary details about types going on somewhere. My first recollection of the real world use of rank-2 types is from 1994 (the year I started using Haskell, although I did not actually use it in my work as a software engineer until 1995), when I was excited to read a paper by John Launchbury and Simon Peyton Jones that solved, using a rank-2 type, a specific, important, practical problem, &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.3299&#34;&gt;&amp;ldquo;Lazy Functional State Threads&amp;rdquo;&lt;/a&gt;; twenty years later, their &lt;a href=&#34;http://hackage.haskell.org/package/base-4.7.0.1/docs/Control-Monad-ST.html&#34;&gt;ST monad&lt;/a&gt; is still part of the standard library!&lt;/p&gt;

&lt;h3 id=&#34;introducing-type-classes:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Introducing type classes&lt;/h3&gt;

&lt;p&gt;Clojure uses &lt;a href=&#34;http://clojure.org/protocols&#34;&gt;protocols&lt;/a&gt; as an abstraction mechanism, and the &amp;ldquo;magic&amp;rdquo; of transducers uses protocols. In Haskell, type classes are the major abstraction mechanism (this is true of Scala also).&lt;/p&gt;

&lt;p&gt;So I abstracted away from the hardcoded list-oriented functions and values in Rich Hickey&amp;rsquo;s Haskell code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foldl&lt;/code&gt; abstracted to a &lt;code&gt;class Foldable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conj&lt;/code&gt; and empty list &lt;code&gt;[]&lt;/code&gt; abstracted to a &lt;code&gt;class Conjable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Left fold&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  fold &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; a (f a)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  empty &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; f a
  conj &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; a (f a)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Note our reliance on transducing and reducing from one type &lt;code&gt;a&lt;/code&gt; to another, &lt;code&gt;f a&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;foldable-constraint:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;&lt;code&gt;Foldable&lt;/code&gt; constraint&lt;/h4&gt;

&lt;p&gt;Unlike &lt;code&gt;mapping&lt;/code&gt; and &lt;code&gt;filtering&lt;/code&gt;, &lt;code&gt;flatmapping&lt;/code&gt; is &lt;em&gt;not completely generic&lt;/em&gt;, because it depends on something being &lt;code&gt;Foldable&lt;/code&gt; (implementing a &lt;code&gt;fold&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;flatmapping&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; b a
&lt;span style=&#34;color: #0000FF&#34;&gt;flatmapping&lt;/span&gt; f xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; fold xf r (f a)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;conjable-constraint:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;&lt;code&gt;Conjable&lt;/code&gt; constraint&lt;/h4&gt;

&lt;p&gt;Finally, here&amp;rsquo;s the originally list-specific code that now depends only on &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Conjable&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- I changed Rich Hickey&amp;#39;s code to be more general than just list&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- but accept anything Conjable&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xlist&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; b a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;span style=&#34;color: #0000FF&#34;&gt;xlist&lt;/span&gt; xf &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; fold (xf conj) empty

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- build any old Foldable function with its transducer, all the same way&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xmap&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;span style=&#34;color: #0000FF&#34;&gt;xmap&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; mapping f

&lt;span style=&#34;color: #0000FF&#34;&gt;xfilter&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a
&lt;span style=&#34;color: #0000FF&#34;&gt;xfilter&lt;/span&gt; p &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; filtering p

&lt;span style=&#34;color: #0000FF&#34;&gt;xflatmap&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;span style=&#34;color: #0000FF&#34;&gt;xflatmap&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; flatmapping f
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;list-specific-stuff:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;List-specific stuff&lt;/h3&gt;

&lt;p&gt;Here is the list-specific code:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Stuff specialized to lists.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- To use another type, just make it a Foldable and Conjable.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  fold &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; foldl

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- for exposition only, yes, conj is gross for lazy lists&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- in Clojure conj and left folds dominate&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  empty &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;[]&lt;/span&gt;
  conj xs x &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; [x]

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Note: the type does not say anything about Foldable or Conjable,&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- even though the implementation just happens to use a list!&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xform&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xform&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; mapping (&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; filtering even &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; flatmapping (&lt;span style=&#34;color: #0000FF&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;..&lt;/span&gt; x])

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Again, this can munge anything Foldable and Conjable, not just a list.&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;munge&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;munge&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist xform
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Notice some very important properties of this code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xform&lt;/code&gt; has a type that does not mention lists at all, even though it is implemented using a list and cannot compile without the list &lt;code&gt;instance&lt;/code&gt; implementations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;munge&lt;/code&gt; also does not mention lists, and can transform anything that is &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Conjable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- munge a list&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- [0,1,2,0,1,2,3,4,0,1,2,3,4,5,6]&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;example1&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt;]
&lt;span style=&#34;color: #0000FF&#34;&gt;example1&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; munge [&lt;span style=&#34;color: #666666&#34;&gt;1..5&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;implementing-another-type-to-illustrate-the-genericity-of-transducers:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Implementing another type to illustrate the genericity of transducers&lt;/h3&gt;

&lt;p&gt;To illustrate Rich Hickey&amp;rsquo;s main point, I implemented instances of &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Conjable&lt;/code&gt; for a standard Haskell &lt;code&gt;Vector&lt;/code&gt; library as an alternate &amp;ldquo;collection-like&amp;rdquo; type.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- For example using Vector instead of list&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;qualified&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data.Vector&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; V

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Implement Foldable, Conjable type classes for Vector&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  fold &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;foldl

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  empty &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;empty
  conj &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;snoc
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And we can run &lt;code&gt;munge&lt;/code&gt; directly on a vector instead of a list, &lt;em&gt;without making any changes&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- return a vector rather than a list; note the fact that munge actually&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- internally uses a list&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;example2&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;example2&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; munge &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;enumFromN &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;code reuse&lt;/em&gt; at its best.&lt;/p&gt;

&lt;p&gt;Note that there is nothing that ties transducers to any concrete &amp;ldquo;collection&amp;rdquo; type. We could write instances of &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Conjable&lt;/code&gt; for some kind of &amp;ldquo;channel&amp;rdquo; abstraction, for example, and instantaneously be able to munge data coming from it and to another. In fact, this is already what is done in the real world, where Haskell and Scala are used in production at places like Facebook and Twitter to efficiently handle large amounts of data.&lt;/p&gt;

&lt;h2 id=&#34;my-code-repository:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;My code repository&lt;/h2&gt;

&lt;p&gt;My complete code is available &lt;a href=&#34;https://github.com/FranklinChen/clojure-transducers-in-haskell&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was pretty exciting to see the announcement of the transducers library for Clojure, because it represents a level of abstraction that I think has not been expressed much in the world of dynamically typed languages, although the techniques are two decades old in the Haskell community in a statically typed setting. And I hope that I was able to convey the sheer elegance of Haskell as a way to express interesting types with practical ramifications for abstraction and pluggability.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Code and Supply: Programming in journalism</title>
      <link>http://conscientiousprogrammer.com/blog/2014/07/17/pittsburgh-code-and-supply-programming-in-journalism/</link>
      <pubDate>Thu, 17 Jul 2014 21:21:19 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/07/17/pittsburgh-code-and-supply-programming-in-journalism/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://static.squarespace.com/static/538f3cc8e4b00f52172b5560/t/53a4ec76e4b0488fb14c5a29/1403317372203/sign.png?format=500w&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I finally attended my first ever &lt;a href=&#34;http://www.codeandsupply.co/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; meeting! The group, which posts its &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/&#34;&gt;events on Meetup&lt;/a&gt;, was created by local Pittsburgh software developer &lt;a href=&#34;https://twitter.com/justinxreese&#34;&gt;Justin Reese&lt;/a&gt; just a few months ago, in March 2014. His vision is to create a local community that, unlike conventional specific language/technology-based meetups, is much more universal and broad. If you haven&amp;rsquo;t do so already, read more about the &lt;a href=&#34;http://www.codeandsupply.co/about&#34;&gt;goals of Pittsburgh Code and Supply&lt;/a&gt;. I&amp;rsquo;m very excited about this new group!&lt;/p&gt;

&lt;p&gt;The Code and Supply meetup I just attended was about &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/186766512/&#34;&gt;&amp;ldquo;Programming in journalism&amp;rdquo;&lt;/a&gt;. This is a topic of huge importance, and I was excited to attend to hear more about what some local journalist/programmers are doing.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-about-sponsors:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;A bit about sponsors&lt;/h2&gt;

&lt;p&gt;Justin opened by briefly saying a few words about the goals of Pittsburgh Code and Supply. He then noted that this month, the group did not have sponsors, unfortunately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pittsburgh Code and Supply needs sponsors!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you like what Code and Supply is doing, please consider seeing if your employer would be willing to step up as a sponsor for the group.&lt;/p&gt;

&lt;h2 id=&#34;contribute:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Contribute!&lt;/h2&gt;

&lt;p&gt;Also, in any case, spread the word about the group.&lt;/p&gt;

&lt;p&gt;This is my first meeting, and next Monday, I am actually going to give my first presentation for the group, on &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/&#34;&gt;&amp;ldquo;Type-Directed TDD in Rust&amp;rdquo;&lt;/a&gt;. The group is always looking for people to speak about something or facilitate other formats of meetings, so &lt;a href=&#34;http://www.codeandsupply.co/speak/&#34;&gt;sign up&lt;/a&gt; if you have an idea! I personally have some ideas I&amp;rsquo;d like to propose for future meetings, such as discussions about technology-related topics such as philosophy, history, and education.&lt;/p&gt;

&lt;h2 id=&#34;amyjo-brown:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;AmyJo Brown&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/DaOxhNkHvvw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://amyjobrown.com/&#34;&gt;AmyJo Brown&lt;/a&gt;, an independent journalist, gave a great talk about the kind of work that she does, and why it is important. She gave an overview of how journalism has changed because of the availability of data and because of the complexity of the world, both of which lead to the necessity of telling stories differently, as evidenced by what &lt;a href=&#34;http://www.propublica.org/&#34;&gt;ProPublica&lt;/a&gt;, the &lt;a href=&#34;http://www.nytimes.com/&#34;&gt;New York Times&lt;/a&gt;, and the &lt;a href=&#34;http://www.latimes.com/&#34;&gt;Los Angeles Times&lt;/a&gt; have been doing.&lt;/p&gt;

&lt;p&gt;Her own work involves tracking political donations (&amp;ldquo;follow the money&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;She gave examples of software tools she uses to get data, clean it, analyze it, and archive the whole process. On the programming end, she programs in Python, for example (Django for Web development), and uses &lt;a href=&#34;http://www.documentcloud.org/&#34;&gt;DocumentCloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;She talked about many things to keep in mind while doing this kind of data journalism. First of all, you have to know the limitations of the data you&amp;rsquo;re getting. She has to deal with handwritten documents, and data in different formats. Data that is clearly incomplete or entered wrong (whether accidentally or maliciously). It is necessary to know the domain, know the context in which data was collected or required or submitted, to not fall into the trap of just blindly treating data as a record of the full truth and just get into programmatically processing it. There&amp;rsquo;s a lot that involves human judgment calls. And this is why it is so important to save all the original information and document each step of data &amp;ldquo;cleaning&amp;rdquo; and interpretation.&lt;/p&gt;

&lt;p&gt;Near the end of her talk, AmyJo had her colleague Katrina speak a bit also. Katrina was not originally trained as a programmer, but was always interested in politics. She ended up getting into programming later.&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;m always very excited and impressed to hear of people with domain knowledge and passion who take up computer programming as a useful skill to apply to their domain. Sometimes I hear people saying &amp;ldquo;please don&amp;rsquo;t code&amp;rdquo;; I totally disagree with this sentiment and believe that &lt;a href=&#34;http://franklinchen.com/blog/2011/12/09/why-everyone-should-learn-computer-science/&#34;&gt;everyone can benefit from learning the fundamentals of computer science and programming&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;andrew-mcgill:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Andrew McGill&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/0iT9rhwRXVs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://www.andrewrmcgill.com/&#34;&gt;Andrew McGill&lt;/a&gt; bills himself as &amp;ldquo;your friendly neighborhood journalist&amp;rdquo;, and works for the &lt;a href=&#34;http://www.post-gazette.com/&#34;&gt;Pittsburgh Post-Gazette&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He started by talking about his interesting career path, which involved being into computers before college, but then going to college and then finding other interests and abandoning programming, and then only later taking it back up, in the service of journalism, to enable him to find data and tell stories through visualization.&lt;/p&gt;

&lt;p&gt;He showed us specific Web sites and articles he has created to provide better visualizations of data than what is available in raw form. For example, on the funny side, there is &lt;a href=&#34;http://newsinteractive.post-gazette.com/wheresbill/&#34;&gt;&amp;ldquo;Where&amp;rsquo;s Bill?&amp;rdquo;&lt;/a&gt;, which he created because he was not happy with the &amp;ldquo;official&amp;rdquo; boring text news feed of Mayor Bill Peduto&amp;rsquo;s calendar. He scraped the official site with PHP. He also created a Bill Peduto Twitter bot using Python.&lt;/p&gt;

&lt;p&gt;He also showed a D3-based visualization of &lt;a href=&#34;http://newsinteractive.post-gazette.com/plugged-wells/&#34;&gt;&amp;ldquo;The Mystery of the Plugged Wells&amp;rdquo;&lt;/a&gt;. Again, the point was to take already available data but to tell a story better with it than just giving raw tables or a purely text-based narrative.&lt;/p&gt;

&lt;p&gt;He showed some other projects, such as a visualization of school comparisons based on &lt;a href=&#34;http://en.wikipedia.org/wiki/Pennsylvania_System_of_School_Assessment&#34;&gt;PSSA&lt;/a&gt; data.&lt;/p&gt;

&lt;h2 id=&#34;questions-and-answers:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Questions and answers&lt;/h2&gt;

&lt;p&gt;There were quite a lot of questions posed to the presenters throughout the evening, on the technologies used, on work with graphic designers, on the process of obtaining data, and political implications of the work. Great discussions.&lt;/p&gt;

&lt;h2 id=&#34;technologies-used:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Technologies used&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s something resembling a summary of technologies mentioned that the presenters use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;DocumentCloud&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;OpenRefine&lt;/li&gt;
&lt;li&gt;D3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interesting-articles:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Interesting articles&lt;/h2&gt;

&lt;p&gt;Before the meetup, I posted to the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/186766512/&#34;&gt;event page&lt;/a&gt; a link to a provocative (perhaps too harsh and ranty) article warning about dangers in data journalism, &lt;a href=&#34;http://www.niemanlab.org/2014/07/alberto-cairo-data-journalism-needs-to-up-its-own-standards/&#34;&gt;by visualization expert Alberto Cairo&lt;/a&gt;. It got no response.&lt;/p&gt;

&lt;p&gt;Later, I also posted a link to a thoughtful examination of the question of &lt;a href=&#34;http://source.opennews.org/en-US/learning/true-facts-maybe/&#34;&gt;epistemology in data journalism&lt;/a&gt;. I totally recommend reading that article.&lt;/p&gt;

&lt;p&gt;AmyJo after the meetup posted some more links on the event page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jeremybowers/why-im-a-newsroom-coder-860d9d49f684&#34;&gt;&amp;ldquo;Why I&amp;rsquo;m a newsroom coder&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://source.opennews.org/en-US/articles/planting-next-crop-newsroom-coders/&#34;&gt;&amp;ldquo;Planting the next crop of newsroom coders&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nytimes.com/2014/07/17/opinion/the-fec-lags-on-campaign-finance-disclosures.html&#34;&gt;&amp;ldquo;Data delayed is democracy denied&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I was very excited to attend my first Pittsburgh Code and Supply meetup, on the fascinating topic of programming in journalism. I felt I learned a lot about what is at stake and how programming is being used in journalism to better inform people of what is going on in the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why programming puzzlers make me sad</title>
      <link>http://conscientiousprogrammer.com/blog/2014/07/17/why-programming-puzzlers-make-me-sad/</link>
      <pubDate>Thu, 17 Jul 2014 23:01:52 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/07/17/why-programming-puzzlers-make-me-sad/</guid>
      <description>

&lt;p&gt;I recently saw a
&lt;a href=&#34;http://blog.plover.com/2014/07/17/&#34;&gt;&amp;ldquo;guess what this does&amp;rdquo; article&lt;/a&gt;
on a blog I follow, and this post presents mysterious Perl code for
which the reader is asked to guess what it does:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;perl -le &#39;print(two + two == five ? &amp;quot;true&amp;quot; : &amp;quot;false&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I looked at it briefly, got a headache, and didn&amp;rsquo;t even want to solve
it. This despite using Perl as one of my main programming languages
from 1993-2010 and considering myself fairly proficient at Perl.&lt;/p&gt;

&lt;p&gt;Programming puzzlers just in general make me sad.&lt;/p&gt;

&lt;h2 id=&#34;i-know-every-programming-language-has-quirks:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;I know every programming language has quirks&lt;/h2&gt;

&lt;p&gt;It is a human reality, given human imperfection, that the languages we
invent have quirks of some kind. You might expect that, unlike natural
languages like English and Chinese, which have the burden of no
centralized design and hundreds or thousands of year of history and
random evolution, computer languages would be designed up front to
avoid ambiguity and just plain confusion. But the human desire to make
some things &amp;ldquo;easy&amp;rdquo; through clever defaults or implicit assumptions
always results in an invented computer language that has
irregularities or unexpected behavior somewhere.&lt;/p&gt;

&lt;h2 id=&#34;the-strange-love-of-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;The strange love of puzzlers&lt;/h2&gt;

&lt;p&gt;Still, it makes me sad when I see &amp;ldquo;puzzlers&amp;rdquo;, and especially how they
are used. For some reason, in some circles, it is considered a sign of
intelligence or competence to be able to decode strange
puzzlers. Many academic homework assignments and exams tend to focus
on weird puzzlers as a way of supposedly testing proficiency in
programming. Java certification exams and job interview questions
often throw in puzzlers. I deplore this situation.&lt;/p&gt;

&lt;p&gt;I understand that in specialized circumstances, you would want to
value someone who was really good at puzzlers: someone who could write
a conforming compiler for a language, diagnose strange bugs, etc. But
that is not what most of us do or need to do. And too many puzzlers
makes non-programmers wince and stay away from a field they consider
to be pointlessly capricious.&lt;/p&gt;

&lt;h2 id=&#34;when-to-understand-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;When to understand puzzlers&lt;/h2&gt;

&lt;p&gt;The exception I make is when a &amp;ldquo;puzzler&amp;rdquo; is not actually rare code,
but typical code that has some kind of mistake. Some languages have
more of these puzzlers that are actually critical to understand in
order to be functional at working with code in them. For example,
almost all normally used features of C could be considered puzzlers!&lt;/p&gt;

&lt;h2 id=&#34;languages-with-puzzler-books:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;Languages with &amp;ldquo;puzzler&amp;rdquo; books&lt;/h2&gt;

&lt;p&gt;Many languages have spawned &amp;ldquo;puzzler&amp;rdquo; books or sites. You can look
them up for yourself if you are curious about puzzlers in your
favorite languages. I won&amp;rsquo;t list any here because I wouldn&amp;rsquo;t know
where to stop. I didn&amp;rsquo;t mean to pick on Perl, of course, when writing
this article.&lt;/p&gt;

&lt;h2 id=&#34;an-idea-how-about-learning-from-all-the-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;An idea: how about learning from all the puzzlers?&lt;/h2&gt;

&lt;p&gt;I have an idea: how about pooling together all the puzzlers in all the
languages that currently exist, classifying the language misfeatures
that resulted in those puzzlers, and coming up with a plan to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;teach the puzzlers in a systematic polyglot way&lt;/li&gt;
&lt;li&gt;fix as many of these puzzlers as possible in the languages (I expect
this to be very difficult because of compatibility needs)&lt;/li&gt;
&lt;li&gt;write up a guide to what &lt;em&gt;not&lt;/em&gt; to do in future &lt;em&gt;new&lt;/em&gt; languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you think there would be value in mining existing puzzlers for
  the purpose of a systematic resource for learning about programming
  language design?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t like programming puzzlers. They are supposed to be funny, and
maybe sometimes they are, but often they are abused for status and
mistaken as an accurate gauge of competence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you feel about puzzlers? Do you use them for assessing your
  own or others&amp;rsquo; knowledge? Do you solve them for entertainment? Do
  you think minimizing the existence of puzzlers should be a criterion
  for design of any new programming languages?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Scala Meetup: Exploring type-directed, test-driven development using FizzBuzz (my practice talk)</title>
      <link>http://conscientiousprogrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed/</link>
      <pubDate>Thu, 15 May 2014 22:49:48 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt; met, with me presenting a &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/&#34;&gt;practice talk&lt;/a&gt; for &amp;ldquo;Exploring type-directed, test-driven development using FizzBuzz&amp;rdquo;, which I am presenting at the upcoming local &lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh TechFest&lt;/a&gt; conference.&lt;/p&gt;

&lt;h2 id=&#34;presentation:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;Presentation&lt;/h2&gt;

&lt;p&gt;I have only recently completed the slides and code for my talk, and had not actually given the talk yet, so this was a practice talk that did not go so well, unfortunately.&lt;/p&gt;

&lt;p&gt;I spoke too quickly and had too much material to cover, and also got lost in some of my own slides. Oops. I think reaction to my talk was mixed. Some enjoyed it, while others seemed lost at places.&lt;/p&gt;

&lt;p&gt;After going home, I frankly felt that I had &lt;em&gt;failed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But I believe I can do much better. I have plenty of time to do a thorough revision before Pittsburgh TechFest in three weeks. I need to cut out material that is not needed for the core of what I am trying to achieve and make some things clearer (especially for the intended Pittsburgh TechFest audience, which I do not expect to even know Scala).&lt;/p&gt;

&lt;h2 id=&#34;supporting-material:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;Supporting material&lt;/h2&gt;

&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t recommend looking at them, but for historical purposes, here are slides of the presentation &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/meetup/doc/presentation.pdf&#34;&gt;as it was given in the first draft&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-05-16:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-05-16)&lt;/h2&gt;

&lt;p&gt;One day makes a difference in my confidence and determination! I noticed that the new &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; group (which I have not yet attended) is soon having its inaugural &lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/181773312/&#34;&gt;soon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I decided to offer to do a version of my talk for Pittsburgh Code and Supply using Rust as the programming language (rather than Scala). I want to spread the news about how to effectively use a sufficiently typed programming language, whether it&amp;rsquo;s Scala or Rust or anything else sufficiently derived from the ML family of type systems.&lt;/p&gt;

&lt;p&gt;Justin will schedule it for some time in July. That should give me enough time, after Pittsburgh TechFest in early June, to learn enough Rust to convert my Scala code over properly!&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-06-07:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-06-07)&lt;/h2&gt;

&lt;p&gt;I much improved the presentation for Pittsburgh TechFest, which I &lt;a href=&#34;./blog/2014/06/07/report-on-the-2014-pittsburgh-techfest-my-third-year/&#34;&gt;attended for the third year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recommend reading the &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/master/doc/article.pdf&#34;&gt;article version of the presentation&lt;/a&gt;, rather than the slides. This is the first time I&amp;rsquo;ve created both an article version of a presentation and slides for use during the live presentation. I will do this in the future as well. Slides are not meant to stand alone or even be read alone, but in case you really want to see them, they are here:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/37257104&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/FranklinChen/presentation-37257104&#34; title=&#34;Exploring type-directed, test-driven development: a case study using FizzBuzz&#34; target=&#34;_blank&#34;&gt;Exploring type-directed, test-driven development: a case study using FizzBuzz&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/FranklinChen&#34; target=&#34;_blank&#34;&gt;Franklin Chen&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-07-17:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-07-17)&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s crunch time. My Rust version of the talk, &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/&#34;&gt;&amp;ldquo;Type-Directed TDD in Rust&amp;rdquo;&lt;/a&gt; is coming next week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenHack Pittsburgh: working on a private project</title>
      <link>http://conscientiousprogrammer.com/blog/2014/02/24/openhack-pittsburgh-working-on-a-private-project/</link>
      <pubDate>Mon, 24 Feb 2014 18:46:39 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/02/24/openhack-pittsburgh-working-on-a-private-project/</guid>
      <description>&lt;p&gt;Last month at OpenHack Pittsburgh, I had a rather &lt;a href=&#34;./blog/2014/01/27/openhack-pittsburgh-a-great-place-to-share-and-learn/&#34;&gt;social time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/163727212/&#34;&gt;This month&lt;/a&gt;, I kept entirely to myself. I didn&amp;rsquo;t even speak up to say what I was working on. I was in a somber mood, and didn&amp;rsquo;t really want to talk. I worked on a private project that I will share when I am ready.&lt;/p&gt;

&lt;p&gt;It did feel consoling to be around other people, even while keeping to myself. Sometimes I just need to know that I am not alone.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>