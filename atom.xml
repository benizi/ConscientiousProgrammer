<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Conscientious Programmer</title>
    <link>http://ConscientiousProgrammer.com/</link>
    <description>Recent content on The Conscientious Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Jun 2015 21:37:39 -0400</lastBuildDate>
    <atom:link href="http://ConscientiousProgrammer.com/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Aegis and Cook: what happens when an open source developer dies?</title>
      <link>http://conscientiousprogrammer.com/blog/2015/06/16/aegis-and-cook-what-happens-when-an-open-source-developer-dies/</link>
      <pubDate>Tue, 16 Jun 2015 21:37:39 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/06/16/aegis-and-cook-what-happens-when-an-open-source-developer-dies/</guid>
      <description>

&lt;p&gt;By sheer accident, while I was looking for something else online, I
came across a Web site for &lt;a href=&#34;http://aegis.sourceforge.net/&#34;&gt;Aegis&lt;/a&gt;, a
distributed version control system I used at work back in 1995-1997. I
was surprised this software was still alive after twenty years. A lot
of software has a very short life span, and since I had not heard
anything about Aegis all this time, I would have guessed that it had
died.&lt;/p&gt;

&lt;p&gt;I remembered that we had used this software along with another tool
the author developed, called
&lt;a href=&#34;https://ftp.gnu.org/non-gnu/cook.README&#34;&gt;Cook&lt;/a&gt;, which was a
replacement for
&lt;a href=&#34;https://en.wikipedia.org/wiki/Make_%28software%29&#34;&gt;Make&lt;/a&gt;. I was
unsuccessful in locating any official Web site for Cook, so I assume
it is more or less dead.&lt;/p&gt;

&lt;p&gt;Meanwhile, I found by coincidence that actually, the author,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Peter_Miller_%28software_engineer%29&#34;&gt;Peter Miller&lt;/a&gt;,
died less than a year ago (July 2014). There was enough memory of him
that someone wrote that Wikipedia page on his contributions to open
source software. However, his Web site &lt;code&gt;http://www.canb.auug.org.au/~millerp/
&lt;/code&gt;, sadly, has died with him, and with that, the site he had on Cook.&lt;/p&gt;

&lt;p&gt;But we know that the Web is &amp;ldquo;forever&amp;rdquo;, right? Let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;I found this old photo, for example.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://web.archive.org/web/20090111230031/http://miller.emu.id.au/pmiller/pmiller-1993-128.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Peter Miller, 1993&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;wayback-machine:a626c37eefef6cb88a3f2de686a3eafc&#34;&gt;Wayback Machine&lt;/h2&gt;

&lt;p&gt;Basically, I checked the Wayback Machine, and it has some snapshots of
&lt;a href=&#34;http://web.archive.org/web/*/http://www.canb.auug.org.au/~millerp/&#34;&gt;his site&lt;/a&gt;. The
last working snapshot was
&lt;a href=&#34;http://web.archive.org/web/20090111230031/http://miller.emu.id.au/pmiller/&#34;&gt;from 2009&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is his old
&lt;a href=&#34;http://web.archive.org/web/20090327074944/http://miller.emu.id.au/pmiller/software/&#34;&gt;software page&lt;/a&gt;. Yes,
it includes a link to a Cook site, but it leads to a nonexistent
snapshot.&lt;/p&gt;

&lt;p&gt;I stopped because I am not that interested in reliving the early
history of Cook. I never met the guy, although I believe I exchanged
email with him when it was just his personal project and he was &amp;ldquo;tech
support&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I wonder how historians fifty years from now will be working. So much
is no longer on paper, but stored in random archives on hard drives
somewhere.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:a626c37eefef6cb88a3f2de686a3eafc&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Software dies, people die. It was just weird for me to accidentally do
a bit of sleuthing to find more information about someone whose
software I once used a lot.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t made a &amp;ldquo;will&amp;rdquo; for my code. I suppose I should have a plan in
place for whatever I value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you have a plan for your Web site or code or writings? Or do you
  expect them to disappear? How do you feel about leaving something
  behind?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;update-of-2015-06-29:a626c37eefef6cb88a3f2de686a3eafc&#34;&gt;(Update of 2015-06-29)&lt;/h3&gt;

&lt;p&gt;By accident, while reading an old blog post by Graydon Hoare about
&lt;a href=&#34;https://github.com/graydon/bors&#34;&gt;bors&lt;/a&gt;, which is used for continuous
integration for the Rust project, I noticed his
&lt;a href=&#34;http://graydon2.dreamwidth.org/1597.html&#34;&gt;shoutout to Peter Miller for Aegis&lt;/a&gt;. It&amp;rsquo;s
great that Peter Miller&amp;rsquo;s work inspired others to build systems that
are used today. One random person&amp;rsquo;s ideas and software made a lasting
difference in the world!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I switched from Octopress 2 to Hugo</title>
      <link>http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/</link>
      <pubDate>Sun, 31 May 2015 12:26:32 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/</guid>
      <description>

&lt;p&gt;Until now, I haven&amp;rsquo;t been publishing anything on any of my three blogs
for half a year now. There are many reasons, but one of them was that
I wanted to migrate away from
&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; 2. Octopress 2 is ancient and slow
and unmaintained, and I&amp;rsquo;d been waiting for
&lt;a href=&#34;https://github.com/octopress/octopress&#34;&gt;Octopress 3&lt;/a&gt; for over three
years
&lt;a href=&#34;http://octopress.org/2015/01/15/octopress-3.0-is-coming/&#34;&gt;to arrive&lt;/a&gt;,
so when I heard that Octopress 3 was finally going to be officially
announced at &lt;a href=&#34;http://jekyllconf.com/&#34;&gt;JekyllConf&lt;/a&gt;, I decided it was
time to migrate my blogs, to Octopress 3 or
&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, or something else entirely.&lt;/p&gt;

&lt;h2 id=&#34;factors-to-consider-when-choosing-a-static-site-generator:26b28caf414f77ef05fac6550ae96388&#34;&gt;Factors to consider when choosing a static site generator&lt;/h2&gt;

&lt;p&gt;Some factors I kept in mind while evaluating a new static site
generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed of full generation&lt;/li&gt;
&lt;li&gt;Speed of incremental generation&lt;/li&gt;
&lt;li&gt;Active progress in bug fixes, improvements, new features&lt;/li&gt;
&lt;li&gt;Availability of themes&lt;/li&gt;
&lt;li&gt;Community sharing, support&lt;/li&gt;
&lt;li&gt;Languages used for using and writing own templates and plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;speed-is-critical-for-me:26b28caf414f77ef05fac6550ae96388&#34;&gt;Speed is critical for me&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; was a huge consideration for me when I evaluated alternative
static site generators, so I was particularly interested in evaluating&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; (written in Go)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jaspervdj.be/hakyll/&#34;&gt;Hakyll&lt;/a&gt; (written in Haskell)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The advantages of these two are that they are implemented in
statically typed languages that compile to native
executables.&lt;/p&gt;

&lt;p&gt;Furthermore, Hakyll is a library, such that your configuration is
actually merely a Haskell program using the library, without the
indirection of configuration languages and interpreters of the
languages, and you can compile your site into a specialized native
executable. (For example, Hakyll uses Pandoc as a library for Markdown processing.)&lt;/p&gt;

&lt;h2 id=&#34;advantages-of-going-to-jekyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;Advantages of going to Jekyll?&lt;/h2&gt;

&lt;p&gt;Jekyll is the most popular static site generator, so I had to evaluate
it despite knowing up front that it was not going to be a speed
winner. It might well be fast &lt;em&gt;enough&lt;/em&gt;. The benefits of using a
platform with a large and passionate community are &lt;em&gt;tremendous&lt;/em&gt;: bugs
get fixed, cool features get added, people step in to help you out if
you have questions, incremental improvements keep happening, themes
abound that you can just take and use. I never evaluate using a
technology based only on one consideration (such as speed).&lt;/p&gt;

&lt;p&gt;Note that Octopress 3 is basically a really cool interface over an
underlying Jekyll setup, so I will only refer to Jekyll below, with
the understanding that all performance matters that apply to Jekyll
apply to Octopress 3 as well.&lt;/p&gt;

&lt;h2 id=&#34;speed-comparisons-octopress-2-jekyll-hugo-hakyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;Speed comparisons: Octopress 2, Jekyll, Hugo, Hakyll&lt;/h2&gt;

&lt;h3 id=&#34;full-generation-from-scratch:26b28caf414f77ef05fac6550ae96388&#34;&gt;Full generation from scratch&lt;/h3&gt;

&lt;p&gt;My &lt;a href=&#34;http://franklinchen.com/&#34;&gt;personal blog&lt;/a&gt; has 585 posts. Here are
the from-scratch full generation times, based on migrations away from
Octopress 2 that I performed using a bunch of Perl scripts. Note that
the sites are not completely equivalent, because I only wanted to get
a rough idea, not compare total equivalence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Octopress 2: 5:39.28&lt;/li&gt;
&lt;li&gt;Jekyll: 15.90&lt;/li&gt;
&lt;li&gt;Hakyll: 14.51&lt;/li&gt;
&lt;li&gt;Hugo: 4.90&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jekyll and Hakyll don&amp;rsquo;t do too badly, but Hugo was by far the fastest.&lt;/p&gt;

&lt;p&gt;Although I suspect that as more features
get added to Hugo, it may slow down some, I also trust that since the
author and the Go community in general are &lt;em&gt;obsessed&lt;/em&gt; with speed, Hugo
is a safe bet for anyone concerned about speed.&lt;/p&gt;

&lt;h3 id=&#34;full-generation-but-not-from-scratch:26b28caf414f77ef05fac6550ae96388&#34;&gt;Full generation but not from scratch&lt;/h3&gt;

&lt;p&gt;Hakyll stores a lot of information in a cache directory. If you&amp;rsquo;ve
done a full generation and change nothing and do a full generation
again (&lt;code&gt;my-compiled-site-builder build&lt;/code&gt;), it comes back almost
instantaneously. If you&amp;rsquo;ve modified a file (as in the incremental,
server mode generation), my result was slightly slower than in server
mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hakyll: 2.23&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;incremental-generation:26b28caf414f77ef05fac6550ae96388&#34;&gt;Incremental generation&lt;/h3&gt;

&lt;p&gt;I brought each generator up in &amp;ldquo;server&amp;rdquo; &amp;ldquo;watching&amp;rdquo; mode, to see what
would happen if I changed a single file, resulting in regeneration of
everything affected. For example, I changed the most recent blog post,
which affects its generation as well as potentially the main
page, RSS, sitemap, archive, tags and categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll: 9.95&lt;/li&gt;
&lt;li&gt;Hugo: 4.11&lt;/li&gt;
&lt;li&gt;Hakyll: 1.50&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s interesting that Hugo&amp;rsquo;s live &amp;ldquo;watch&amp;rdquo; functionality does not really
improve over regenerating the site from scratch.&lt;/p&gt;

&lt;p&gt;For Hakyll, there is tremendous improvement. I believe this may be
because of the use of a cache directory but also because a
Hakyll-compiled generator incurs no &lt;em&gt;interpreter&lt;/em&gt; overhead once you
have it running in server mode watching for changes.&lt;/p&gt;

&lt;p&gt;9.95 seconds is still kind of slow for me, for making a quick change
to a file in progress and wanting to see how it displays in the
browser, so Jekyll is not optimal for me. But Hugo&amp;rsquo;s 4.11 seconds is acceptable.&lt;/p&gt;

&lt;h2 id=&#34;so-why-not-hakyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;So why not Hakyll?&lt;/h2&gt;

&lt;p&gt;So, given that Hakyll looks so promising, and I would far prefer
writing and debugging Haskell code, to hacking in some mixture of Go
templating and other configuration languages, why did I not migrate to
Hakyll?&lt;/p&gt;

&lt;p&gt;There are many considerations that go into what I choose as a
technology to solve a specific problem. For example, there&amp;rsquo;s a reason
I wrote all my one-shot little blog migration scripts in Perl, even
though I no longer write Perl for any other purpose (although Perl was
one of my main languages I used for nontrivial programs from
1999-2010).&lt;/p&gt;

&lt;p&gt;Hakyll has a small community. I&amp;rsquo;m not sure I would even call it a
community. It&amp;rsquo;s basically one guy&amp;rsquo;s project. It is completely
unopinionated, such that to create any reasonable site you have to
write your own code or copy and paste from someone else&amp;rsquo;s. There is no
formal concept of &amp;ldquo;theme&amp;rdquo; or an official theme sharing site.&lt;/p&gt;

&lt;p&gt;Hakyll is pretty confusing to build if you don&amp;rsquo;t use a Cabal sandbox,
and even then, there have perpetually been build problems of some kind
or another, for years. Last year, &lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/302&#34;&gt;I could not get it to build at all&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Meanwhile, the &lt;a href=&#34;https://travis-ci.org/jaspervdj/hakyll&#34;&gt;Travis build&lt;/a&gt;
is perpetually broken and doesn&amp;rsquo;t even test multiple versions of GHC
and Cabal. A call to
&lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/299&#34;&gt;get Hakyll into Stackage&lt;/a&gt;
is still open.&lt;/p&gt;

&lt;p&gt;I ran into a
&lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/225&#34;&gt;serious YAML-handling bug that still has not been addressed after over a year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In other words, just because Hakyll seems to perform well on a
simplistic toy migration of my personal blog (after all the
workarounds for the bugs mentioned above) doesn&amp;rsquo;t mean that I can
trust it to work if I do more complicated things, or that bug reports
will get addressed.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m writing this not to criticize the author of Hakyll, who by the way
writes a lot of quite high-quality
&lt;a href=&#34;http://jaspervdj.be/posts.html&#34;&gt;blog posts on Haskell&lt;/a&gt; and has a day
job developing in Haskell. Open source projects are labors of love
that just cannot be sustained by one person who has many things to do
in life.&lt;/p&gt;

&lt;h2 id=&#34;winner-hugo:26b28caf414f77ef05fac6550ae96388&#34;&gt;Winner: Hugo&lt;/h2&gt;

&lt;p&gt;It would be nice if there were a larger Hakyll community, but the
reality is that there isn&amp;rsquo;t, and therefore as someone who also has
many things to do and prefers to write for my blogs rather than
implement features for the blog engine, I chose Hugo as the clear
winner for my current needs.&lt;/p&gt;

&lt;p&gt;Hugo not only has an entire official
&lt;a href=&#34;http://discuss.gohugo.io/&#34;&gt;discussion site&lt;/a&gt; but also an active
&lt;a href=&#34;https://gitter.im/spf13/hugo&#34;&gt;Gitter room&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The official documentation is pretty good and continues to be updated.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:26b28caf414f77ef05fac6550ae96388&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Choosing a static site generator is like choosing any other software
to perform a task: you have to evaluate many different factors and
tradeoffs among the different choices available. For me, speed is very
important, but also a thriving, growing community of maintainers,
contributors, and users.&lt;/p&gt;

&lt;p&gt;In the end, I chose Hugo, because it is fast, actively maintained, and
has a sizable community revolving around it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to think about Rust ownership versus C&#43;&#43; unique_ptr</title>
      <link>http://conscientiousprogrammer.com/blog/2014/12/21/how-to-think-about-rust-ownership-versus-c-plus-plus-unique-ptr/</link>
      <pubDate>Sun, 21 Dec 2014 14:31:36 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/12/21/how-to-think-about-rust-ownership-versus-c-plus-plus-unique-ptr/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; programming language, which is nearing its important version 1.0 release, but already seen a lot of use, has many interesting features, the most prominent of which is its &lt;a href=&#34;http://doc.rust-lang.org/guide.html#ownership,-borrowing,-and-lifetimes&#34;&gt;ownership&lt;/a&gt; static type system that prevents certain kinds of bugs common in many programs in C or C++.&lt;/p&gt;

&lt;p&gt;For example, it is common in most applications to create graphs of objects pointing to each other, in which it is not clear how many pointers point to a particular object, who is to free the object&amp;rsquo;s memory when it is no longer needed, and what happens to all outstanding pointers to that block. Languages supporting precise &lt;a href=&#34;http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&#34;&gt;garbage collection&lt;/a&gt; use various algorithms to determine when memory can be freed, and have become particularly popular in the past twenty years, but there are still situations in which garbage collection is not ideal, hence the continued relevance of languages such as C++.&lt;/p&gt;

&lt;p&gt;When I was working as a software engineer in the 1990s developing desktop applications with user interfaces for the &lt;a href=&#34;http://en.wikipedia.org/wiki/X_Window_System&#34;&gt;X Window System&lt;/a&gt;, we used frameworks that included C++ &lt;a href=&#34;http://en.wikipedia.org/wiki/Smart_pointer&#34;&gt;smart pointers&lt;/a&gt; that used &lt;a href=&#34;http://en.wikipedia.org/wiki/Reference_counting&#34;&gt;reference counting&lt;/a&gt; to handle graphs of interconnected data. The C++ standard itself lagged behind in standardizing smart pointers; it started with the &lt;a href=&#34;http://www.informit.com/articles/article.aspx?p=30642&amp;amp;seqNum=9&#34;&gt;terribly flawed and unusable&lt;/a&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Auto_ptr&#34;&gt;&lt;code&gt;auto_ptr&lt;/code&gt;&lt;/a&gt; that finally got deprecated in C++11, then moved on finally to &lt;a href=&#34;http://en.wikipedia.org/wiki/Smart_pointer#unique_ptr&#34;&gt;&lt;code&gt;unique_ptr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Smart_pointer#shared_ptr_and_weak_ptr&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt; and &lt;code&gt;weak_ptr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When talking with C++ programmers about Rust, I have found that often they have been puzzled about how Rust&amp;rsquo;s ownership system does anything better than what C++ &lt;code&gt;unique_ptr&lt;/code&gt; already does. Here is an explanation (I will not be discussing analogues of &lt;code&gt;shared_ptr&lt;/code&gt; and &lt;code&gt;weak_ptr&lt;/code&gt; here).&lt;/p&gt;

&lt;h2 id=&#34;simplest-example-compile-time-type-checking-vs-run-time-segmentation-fault:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Simplest example: compile-time type-checking vs. run-time segmentation fault&lt;/h2&gt;

&lt;p&gt;First, go read Steve Klabnik&amp;rsquo;s &lt;a href=&#34;http://www.steveklabnik.com/uniq_ptr_problem/&#34;&gt;article about the simplest possible example illustrating what Rust offers over C++ &lt;code&gt;unique_ptr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, in C++, &lt;code&gt;unique_ptr&lt;/code&gt; is supposed to be a way to indicate that a given pointer is the unique &amp;ldquo;owner&amp;rdquo; of a piece of data. If you want to transfer ownership from one &lt;code&gt;unique_ptr&lt;/code&gt; to another, you have to call &lt;code&gt;move&lt;/code&gt; on it. After that, it is an &lt;em&gt;run-time error&lt;/em&gt; to try to access the data using the original &lt;code&gt;unique_ptr&lt;/code&gt;. This is great, except for two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By &amp;ldquo;it&amp;rsquo;s a run-time error&amp;rdquo;, we mean that the original &lt;code&gt;unique_ptr&lt;/code&gt;&amp;rsquo;s embedded pointer gets mutated to &lt;code&gt;nullptr&lt;/code&gt;, so that you have to perpetually check your &lt;code&gt;unique_ptr&lt;/code&gt; for &lt;code&gt;nullptr&lt;/code&gt;, otherwise get a segmentation fault.&lt;/li&gt;
&lt;li&gt;In many situations, we&amp;rsquo;d prefer to have a &lt;em&gt;compile-time&lt;/em&gt; guarantee that we will never dereference &lt;code&gt;nullptr&lt;/code&gt;, so that we don&amp;rsquo;t have hidden memory safety bugs lying around in our code that don&amp;rsquo;t happen until well into a long-running program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is Steve&amp;rsquo;s example of an unintended segmentation fault from C++:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
    unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; orig(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; stolen &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; move(orig);

    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Steve shows an &amp;ldquo;equivalent&amp;rdquo; Rust program in which code attempts to move ownership fails to compile because of a type error (I edited to correspond more closely with the C++):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;stolen&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;understanding-c-behavior-by-modeling-it-in-rust-safely:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Understanding C++ behavior by modeling it in Rust, safely&lt;/h2&gt;

&lt;p&gt;But it is not quite accurate to call the Rust program &amp;ldquo;equivalent&amp;rdquo; to the original C++ program. It&amp;rsquo;s really a &amp;ldquo;cleaned up&amp;rdquo; or &amp;ldquo;restricted&amp;rdquo; version of that program (and the argument for using a type-safe language like Rust is that we often like these restrictions, as a tradeoff for safety or efficiency).&lt;/p&gt;

&lt;p&gt;Here is a Rust program that more accurately models what the C++ &lt;code&gt;unique_ptr&lt;/code&gt; actually does, which happens &lt;em&gt;dynamically&lt;/em&gt; at run-time, not at compile time, hence the segmentation fault: the transfer of ownership by &lt;code&gt;move&lt;/code&gt; on a &lt;code&gt;unique_ptr&lt;/code&gt; is not type-checked at compile-time.&lt;/p&gt;

&lt;p&gt;For illustration&amp;rsquo;s sake, we have modeled C++ directly in &lt;em&gt;safe&lt;/em&gt; Rust through indirection by treating a C++ pointer to &lt;code&gt;T&lt;/code&gt; (C++ pointers can always be &lt;code&gt;nullptr&lt;/code&gt;) as an &lt;code&gt;Option&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, where &lt;code&gt;nullptr&lt;/code&gt; is modeled as &lt;code&gt;None&lt;/code&gt; and a non-null pointer is modeled as &lt;code&gt;Some(pointer_nonnull)&lt;/code&gt;. This Rust code type-checks, compiles, and simulates a segmentation fault.&lt;/p&gt;

&lt;p&gt;You can play with this code &lt;a href=&#34;http://is.gd/5kEQA8&#34;&gt;at this Rust playground link&lt;/a&gt;. (You may find it interesting to examine the assembly code generated.)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Simulate a segmentation fault.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;seg_fault()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;panic&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;segmentation fault&amp;quot;&lt;/span&gt;);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Rough modeling in Rust of C++ unique_ptr&amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// because C++ pointers can always be null.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Some&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// In C++, deferencing null seg faults.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;seg_fault(),&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Some&lt;/span&gt;(orig_nonnull)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig_nonnull);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// The equivalent of C++ unique_ptr move.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;stolen&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Some&lt;/span&gt;(orig_nonnull);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// We seg fault after the C++ style move.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;seg_fault(),&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;Some&lt;/span&gt;(orig_nonnull)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig_nonnull)&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nobody would ever write this kind of code in Rust, but implicitly, all C++ programs are semantically basically doing this, except that for efficiency, the &lt;code&gt;nullptr&lt;/code&gt; checking is not done at the language level but just results in an actual segmentation fault at the operating system level.&lt;/p&gt;

&lt;h2 id=&#34;an-example-of-smart-pointers-inside-a-collection:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;An example of smart pointers inside a collection&lt;/h2&gt;

&lt;p&gt;The single most disturbing failure mode of the C++-based software product I worked on in 1995-1997 in C++ was segmentation faults resulting from mysteriously disappearing pointers. What I mean is, behavior like the following, where a container containing smart pointers to objects was meant to &lt;em&gt;own&lt;/em&gt; them, but there was no compile-time way to verify this fact, because of the nature of the object graph. If someone didn&amp;rsquo;t play by the uncheckable rules and inadvertently took ownership of (instead of &amp;ldquo;borrowing&amp;rdquo; through a raw pointer) something embedded in the collection, then &lt;code&gt;nullptr&lt;/code&gt; appeared, and a segmentation fault happened.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
    vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    v.push_back(make_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++ happily allows this.&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; pointer_to_5 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; move(v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pointer_to_5 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Seg fault.&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can probably guess what some developers did to &amp;ldquo;fix&amp;rdquo; the segmentation fault. They started adding &lt;code&gt;nullptr&lt;/code&gt; checks everywhere to prevent crashing, but this only resulted in &lt;em&gt;corrupt user data and documents&lt;/em&gt;, because in fact, we lost data in those collections and smart pointers to the data should never have ended up &lt;code&gt;nullptr&lt;/code&gt;!!&lt;/p&gt;

&lt;p&gt;The complexity of the application and the deadline pressures made it impossible to fully figure out what was going wrong and where. I actually ended up writing an external &amp;ldquo;validation&amp;rdquo; utility program in &lt;a href=&#34;http://www.smlnj.org/&#34;&gt;Standard ML of New Jersey&lt;/a&gt; that parsed serialized object graphs and tried to fix them up in some fashion. This particularly helped the QA team a lot when dealing with old documents that were already corrupted.&lt;/p&gt;

&lt;h3 id=&#34;the-rust-version-will-not-compile:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;The Rust version will not compile&lt;/h3&gt;

&lt;p&gt;The Rust type-checker rejects any attempt to move ownership out of a collection. (Try to compile it in &lt;a href=&#34;http://is.gd/Om7wfr&#34;&gt;this playground&lt;/a&gt;.)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;v&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;vec&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;[&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;box&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i];&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Attempted move: type error at compile time.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;pointer_to_5&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;];&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pointer_to_5);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;illegal_move_out_of_vector.rs:7:24: 7:28 error: cannot move out of dereference (dereference is implicit, due to indexing)&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;illegal_move_out_of_vector.rs:7     let pointer_to_5 = v[0];&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;                                                       ^~~~&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;illegal_move_out_of_vector.rs:7:9: 7:21 note: attempting to move value to here&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;illegal_move_out_of_vector.rs:7     let pointer_to_5 = v[0];&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;                                        ^~~~~~~~~~~~&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;often-you-do-want-to-share:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Often, you do want to share&lt;/h3&gt;

&lt;p&gt;I have to be honest: at first, Rust&amp;rsquo;s ownership type system seems like quite a restriction, and adhering to it strictly would require the restructuring of certain kinds of programs. Static type safety of any kind in any language is always a matter of tradeoffs.&lt;/p&gt;

&lt;p&gt;But note that Rust is flexible: you don&amp;rsquo;t have to use Rust&amp;rsquo;s default pointer type! You can use one of Rust&amp;rsquo;s many other pointer types, such as &lt;a href=&#34;http://doc.rust-lang.org/guide.html#rc-and-arc&#34;&gt;&lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt;, that allow reference-counted shared ownership (like C++ &lt;code&gt;shared_ptr&lt;/code&gt;), if that&amp;rsquo;s what you really want. (&lt;a href=&#34;http://is.gd/HNi7SR&#34;&gt;Playground here&lt;/a&gt;.)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Reference-counted smart pointer.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;Rc;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;v&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;vec&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;[Rc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;new(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i)];&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;pointer_to_5&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].clone();&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pointer_to_5);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;unsafe:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Unsafe&lt;/h2&gt;

&lt;p&gt;Finally, Rust does allow you to go all out and write &lt;a href=&#34;http://doc.rust-lang.org/guide.html#unsafe&#34;&gt;unsafe&lt;/a&gt; code, if you truly need to for raw C performance or FFI reasons. Most of the time you do not need to, because the whole point of Rust is to compile down to the same kind of assembly code you would get from C.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extern&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;crate&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;libc;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;libc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;{size_t,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;malloc};&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// How ugly it is to pretend Rust is unsafe C.&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;unsafe&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;orig&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;malloc(mem&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_of&lt;span style=&#34;color: #666666&#34;&gt;::&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;size_t)&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;ptr&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;write(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;i);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;orig&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;ptr&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;null&lt;span style=&#34;color: #666666&#34;&gt;::&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// null pointer crash!&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;orig);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;conclusion:e300201b2ae8bf2fc96c870d894e0bf5&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this little article shows a little bit about what Rust&amp;rsquo;s ownership type system can do to make pointer-heavy code memory safe, unlike C++, and also gives you a taste of how Rust&amp;rsquo;s flexibility also allows you to use C++-style reference-counting if desired, and even raw unsafe code. Personally, I am excited about the upcoming 1.0 release of Rust, and although I have not done low-level systems programming for almost two decades, if I ever was to do it again, I would immediately reach out for Rust as a language of choice for the ultimate combination of safety, expressiveness, and performance (in use of time and space).&lt;/p&gt;

&lt;p&gt;All code for this article is available in a &lt;a href=&#34;https://github.com/FranklinChen/rust-vs-cpp-unique_ptr&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remembering over 20 years of reading Dr. Dobb&#39;s Journal even till today</title>
      <link>http://conscientiousprogrammer.com/blog/2014/12/16/remembering-over-20-years-of-reading-dr-dobbs-journal-even-till-today/</link>
      <pubDate>Tue, 16 Dec 2014 22:23:42 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/12/16/remembering-over-20-years-of-reading-dr-dobbs-journal-even-till-today/</guid>
      <description>

&lt;p&gt;It was with sadness, but not surprise, that I read today about the &lt;a href=&#34;http://www.drdobbs.com/architecture-and-design/farewell-dr-dobbs/240169421&#34;&gt;end of Dr. Dobb&amp;rsquo;s Journal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been reading this magazine for &lt;em&gt;twenty-two years&lt;/em&gt;! I haven&amp;rsquo;t read any other magazine on any topic for this long.&lt;/p&gt;

&lt;h2 id=&#34;rss:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;RSS&lt;/h2&gt;

&lt;p&gt;Of course, it&amp;rsquo;s been years since my last printed copy of &lt;a href=&#34;http://en.wikipedia.org/wiki/Dr._Dobb%27s_Journal&#34;&gt;Dr. Dobb&amp;rsquo;s Journal&lt;/a&gt; (DDJ) entered my mailbox. At some point I was simply regularly reading content from its online &lt;a href=&#34;http://drdobbs.com/rss/all&#34;&gt;RSS feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was particularly sad when reading of the discontinuation of the publication because I had been following for quite some time Andrew Koenig&amp;rsquo;s multi-part article on binary search. In fact, &lt;a href=&#34;http://www.drdobbs.com/cpp/abstractions-for-binary-search-part-9-wh/240169416&#34;&gt;I had just read part 9 and was looking forward to the eventual conclusion of the series&lt;/a&gt;! I&amp;rsquo;ve been waiting to see his punch line, since every article in this series has ended with a cliff-hanger. Here, he had closed with &amp;ldquo;Next week, we shall continue building our tests.&amp;rdquo; I wonder if he be able to post the conclusion?&lt;/p&gt;

&lt;h3 id=&#34;update-of-2014-12-22:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;(Update of 2014-12-22)&lt;/h3&gt;

&lt;p&gt;Andrew Koenig&amp;rsquo;s article series did conclude, after all, &lt;a href=&#34;http://www.drdobbs.com/cpp/abstractions-for-binary-search-part-10-p/240169437&#34;&gt;today&lt;/a&gt;. I&amp;rsquo;ll comment on his concluded article series in a later blog post.&lt;/p&gt;

&lt;h2 id=&#34;how-i-started-reading-ddj:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;How I started reading DDJ&lt;/h2&gt;

&lt;p&gt;In 1992, I was unemployed, a physics grad school dropout, and needed a new career. I had studied some math and passed the first two actuarial exams but frankly, had no interest in doing math and insurance for a living. Friends told me computer programming was a good way to go, so although I had not written a single computer program since high school (where I wrote and ran only COBOL and Pascal programs), I decided to learn C and Unix and Lisp, because these were technologies my friends had learned in their first year in college.&lt;/p&gt;

&lt;p&gt;Meanwhile, this was all before the Web, so the way to get any new and exciting information was from Usenet or from printed magazines. I got some recommendations to check out two magazines in particular: Dr. Dobb&amp;rsquo;s Journal and the &lt;a href=&#34;http://en.wikipedia.org/wiki/C/C%2B%2B_Users_Journal&#34;&gt;C Users Journal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, I did ask, &amp;ldquo;Who the heck is or was Dr. Dobb?!&amp;rdquo; It didn&amp;rsquo;t matter. The magazine was great. It covered all kinds of topics, and had code listings you could type in or download (remember &lt;a href=&#34;http://en.wikipedia.org/wiki/File_Transfer_Protocol#Anonymous_FTP&#34;&gt;anonymous FTP&lt;/a&gt; as the primary way to download stuff?).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/d/d8/Macintosh_classic.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Macintosh Classic&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I got my first job as a software engineer in 1993, after much intense self-study, learning to programm in C on my younger sister&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Macintosh_Classic&#34;&gt;Macintosh Classic&lt;/a&gt; using &lt;a href=&#34;http://en.wikipedia.org/wiki/THINK_C&#34;&gt;THINK C&lt;/a&gt;. What can I say, DDJ was there for me as a useful resource.&lt;/p&gt;

&lt;h2 id=&#34;continuing-to-read-ddj-learning-new-languages:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;Continuing to read DDJ; learning new languages&lt;/h2&gt;

&lt;p&gt;Today I was intrigued to read &lt;a href=&#34;https://twitter.com/bodil/status/545009243272003585&#34;&gt;Bodil Stokke&amp;rsquo;s tweet&lt;/a&gt;, &amp;ldquo;I read about both Haskell and Dylan in Dr Dobbs 1994-ish and was itching to learn both, but couldn&amp;rsquo;t find Amiga impls for either.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I did learn both Haskell and Dylan in 1994, but don&amp;rsquo;t remember whether it was because of mention in DDJ or because of other sources! I do remember that I downloaded quite a bit of &amp;ldquo;freeware&amp;rdquo; and &amp;ldquo;shareware&amp;rdquo; through FTP or bought through CD-ROMs in 1992-1994, before the birth of the &lt;a href=&#34;http://en.wikipedia.org/wiki/World_Wide_Web&#34;&gt;World Wide Web&lt;/a&gt;, which I started using excitedly in 1995.&lt;/p&gt;

&lt;p&gt;1994 was a particularly important year for me, because I discovered and experimented with writing and running programs in a huge variety of programming languages that year.&lt;/p&gt;

&lt;h3 id=&#34;haskell:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;Haskell&lt;/h3&gt;

&lt;p&gt;The most important new language I learned in 1994 was &lt;a href=&#34;http://caml.inria.fr/caml-light/&#34;&gt;Caml Light&lt;/a&gt;, which I came across and learned and used on my Mac SE/30 in 1994, at &lt;a href=&#34;http://caml.inria.fr/pub/old_caml_site/caml-list-ar/0136.html&#34;&gt;version 0.6&lt;/a&gt;. I still remember just finishing working through the &lt;a href=&#34;http://caml.inria.fr/pub/docs/fpcl/&#34;&gt;tutorial&lt;/a&gt; when version 0.7 came out and a lot of stuff changed, annoying me.  How Caml changed the course of my life is the subject of another article.&lt;/p&gt;

&lt;p&gt;I also discovered Haskell in 1994. That took longer for me to get a feel for. It was the dialect &lt;a href=&#34;http://en.wikipedia.org/wiki/Gofer_%28programming_language%29&#34;&gt;Gofer&lt;/a&gt; that I first downloaded and copied to a floppy disk, in the form of &lt;a href=&#34;http://web.cecs.pdx.edu/~mpj/goferarc/macgofer/index.html&#34;&gt;MacGofer&lt;/a&gt;. Later, in 1996, I used &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; briefly for a small internal utility at work in 1996. I see that DDJ &lt;a href=&#34;http://www.drdobbs.com/programming-paradigms/184409831&#34;&gt;mentioned Haskell in February 1996&lt;/a&gt;, but given that I learned it earlier, I don&amp;rsquo;t know if there was any earlier DDJ mention (not Web-searchable currently) that could have influenced me to try Gofer in the first place. (More on the history of my Haskell usage is the subject of another article; Haskell is the only programming language I am still using active twenty years after first learning it.)&lt;/p&gt;

&lt;h3 id=&#34;dylan:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;Dylan&lt;/h3&gt;

&lt;p&gt;I see that there was a &lt;a href=&#34;http://www.drdobbs.com/tools/the-dylan-programming-language/184409404&#34;&gt;DDJ article on Dylan in January 1994&lt;/a&gt;. &amp;ldquo;Dylan, an object-oriented dynamic language developed by Apple Computer, is designed to replace existing static languages for the development of large software systems, yet remains small and efficient enough for the next generation of portable computers. Dylan was developed from the language Scheme, augmented with the Common-Lisp Object System (CLOS).&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I was very excited about &lt;a href=&#34;http://en.wikipedia.org/wiki/Dylan_%28programming_language%29&#34;&gt;Dylan&lt;/a&gt; when I learned about it, because of its ambitions to simultaneously&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have all the nice features of Scheme&lt;/li&gt;
&lt;li&gt;remain dynamically typed, but offer optional typing as a standard part of the language&lt;/li&gt;
&lt;li&gt;provide an object system with multimethods (in 1994, I felt that conventional single-receiver OO was a dead end in the history of programming languages, as evidenced by the horrible &lt;a href=&#34;http://en.wikipedia.org/wiki/Visitor_pattern&#34;&gt;visitor pattern&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Up until I discovered Caml, my favorite language was Scheme, which I had learned in 1992 while working through (the first edition of) &lt;a href=&#34;http://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs&#34;&gt;&amp;ldquo;The Structure and Interpretation of Computer Programs&amp;rdquo;&lt;/a&gt; (SICP), so I felt totally at home in Dylan. In fact, I remember this very article as convincing me to switch from Scheme to Dylan: &lt;a href=&#34;http://www.drdobbs.com/tools/the-dylan-programming-language/184409404#0272_00e9&#34;&gt;Example 5&lt;/a&gt; in the article presented a code snippet from SICP translated into Dylan! Note that this was when Dylan was still using an S-expression syntax carried over from Scheme. Later, Dylan acquired an infix syntax, which I was a big fan of, actually, since I viscerally dislike the parentheses of Lisp languages. I played around with various implementations of Dylan before &lt;a href=&#34;http://en.wikipedia.org/wiki/Apple_Dylan&#34;&gt;Apple&amp;rsquo;s project&lt;/a&gt; was &lt;a href=&#34;http://web.archive.org/web/20060101181134/http://apple.computerhistory.org/discuss/msgReader$186?mode=day&#34;&gt;killed in 1995&lt;/a&gt;. That was a shocker. The news got to me late. I had acquired the Apple Dylan implementation and manual, and it was all for nothing. It was one of the greatest disappointments of my life (topic of another article).&lt;/p&gt;

&lt;h2 id=&#34;conclusion:47ed5fb51dd415468841ce6db5cecf80&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve appreciated Dr. Dobb&amp;rsquo;s Journal for over two decades because of the timely information it has brought on all kinds of topics involving software development, from C and assembly code listings to surveys of new languages, libraries, algorithms, etc. It was particularly exciting rediscovering an important article on Dylan that exposed me to a sadly short-lived language, Dylan (although some are trying to revive it as &lt;a href=&#34;http://opendylan.org/&#34;&gt;Open Dylan&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Some nostalgia and detective work have opened up memories and questions of &amp;ldquo;what could have been&amp;rdquo; that I&amp;rsquo;ll explore in later articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is your relationship to Dr. Dobb&amp;rsquo;s Journal? Have you ever been a loyal reader of it? What did you get from it?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When a computer algebra program gives wrong answers</title>
      <link>http://conscientiousprogrammer.com/blog/2014/11/06/when-a-computer-algebra-program-gives-wrong-answers/</link>
      <pubDate>Thu, 06 Nov 2014 20:20:32 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/11/06/when-a-computer-algebra-program-gives-wrong-answers/</guid>
      <description>

&lt;p&gt;I read an interesting and disturbing report, &lt;a href=&#34;http://www.ams.org/notices/201410/rnoti-p1249.pdf&#34;&gt;&amp;ldquo;The Misfortunes of a Trio of Mathematicians Using Computer Algebra Systems. Can We Trust in Them?&amp;rdquo;&lt;/a&gt; published in the Notices of the American Mathematical Society. I feel that all software developers should read this and reflect on the nature of our work, when people who are not programmers depend on it.&lt;/p&gt;

&lt;p&gt;This report was about mathematicians accidentally discovering a bug in a major computer algebra system, Mathematica.&lt;/p&gt;

&lt;h2 id=&#34;a-note-about-scientists-and-mathematicians:260dc6c39a3c815ab72d5109f7c53dfd&#34;&gt;A note about scientists and mathematicians&lt;/h2&gt;

&lt;p&gt;Scientists and mathematicians increasingly depend on computer software for their work, to explore data, analyze it, verify hypotheses, etc. It&amp;rsquo;s gotten to the point where we can no longer pretend, for example, that scientists are not writing substantial computer programs, whether or not they are trained programmers (in fact, &lt;a href=&#34;http://software-carpentry.org/&#34;&gt;Software Carpentry&lt;/a&gt; was created by a physicist to fulfill the need of training scientists in programming).&lt;/p&gt;

&lt;h2 id=&#34;the-discovery-of-the-bug:260dc6c39a3c815ab72d5109f7c53dfd&#34;&gt;The discovery of the bug&lt;/h2&gt;

&lt;p&gt;A bunch of mathematicians used Mathematica to generate and test ideas they had about a mathematical hypothesis. They wanted to find counterexamples to their conjectures and found some with integer arithmetic calculations using Mathematica.&lt;/p&gt;

&lt;p&gt;One of them happened to also be using Maple, and the results differed, so Mathematica or Maple had to be wrong. They isolated the error by &lt;em&gt;generating random test cases&lt;/em&gt; and finding that Mathematica was in error.&lt;/p&gt;

&lt;p&gt;In fact, given the &lt;em&gt;same matrix&lt;/em&gt; and calling Mathematica&amp;rsquo;s matrix determinant function, Mathematica would return different results!! This was a rather serious bug indeed. They found that Mathematica 7 did not have this bug, but 9 and 10 did.&lt;/p&gt;

&lt;h2 id=&#34;wolfram-research-s-lack-of-responsiveness-to-the-problem:260dc6c39a3c815ab72d5109f7c53dfd&#34;&gt;Wolfram Research&amp;rsquo;s lack of responsiveness to the problem&lt;/h2&gt;

&lt;p&gt;They reported the Mathematica bug to Wolfram Research but got no useful reply, and at the next release of Mathematica, the bug was still not fixed.&lt;/p&gt;

&lt;p&gt;There were other bugs they found as well.&lt;/p&gt;

&lt;p&gt;Wolfram Research never gave any feedback, and does not publish a list of known bugs.&lt;/p&gt;

&lt;h2 id=&#34;lessons-to-learn:260dc6c39a3c815ab72d5109f7c53dfd&#34;&gt;Lessons to learn&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When there is a bug in proprietary, closed-source software, you are completely helpless. The bug may not even be acknowledged, much less fixed, and you could not fix it yourself even if you wanted to.&lt;/li&gt;
&lt;li&gt;There is value in having an alternative tool: without independent work using Maple, the bugs in Mathematica may never have been discovered. Diversity is good.&lt;/li&gt;
&lt;li&gt;All scientists should be aware that the tools they use can be buggy, and therefore computational results can only be &lt;em&gt;trusted&lt;/em&gt; as much as the specific versions of software they use can be trusted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Does any of this surprise you? For what you rely on, how do you work around the inevitable fact that software has bugs?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Code and Supply: Making music with Overtone in Clojure; Conveying information through sound</title>
      <link>http://conscientiousprogrammer.com/blog/2014/10/07/pittsburgh-code-and-supply-making-music-with-overtone-in-clojure-conveying-information-through-sound/</link>
      <pubDate>Tue, 07 Oct 2014 21:10:18 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/10/07/pittsburgh-code-and-supply-making-music-with-overtone-in-clojure-conveying-information-through-sound/</guid>
      <description>

&lt;p&gt;I attended &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/202086812&#34;&gt;a fine meeting&lt;/a&gt; of &lt;a href=&#34;http://www.codeandsupply.co/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; dedicated to two related topics: &lt;em&gt;music&lt;/em&gt; and &lt;em&gt;sonification&lt;/em&gt;. I thought it was a great idea to have presentations on both topics in the same session, thereby giving a broad view of what can be done with &lt;em&gt;sound&lt;/em&gt; through computation.&lt;/p&gt;

&lt;h2 id=&#34;erik-swanson-on-overtone-in-clojure:eae2c8db91585e112346d13d734d08c3&#34;&gt;Erik Swanson on Overtone in Clojure&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://overtone.github.io/&#34;&gt;Overtone&lt;/a&gt; is a very interesting environment for programmable music written in Clojure that I&amp;rsquo;d heard of years ago but never gotten around to playing with, simply because my primary interest in music is &lt;a href=&#34;http://franklinchen.com/categories/music/&#34;&gt;playing music on traditional physical instruments with my own hands, the old-fashioned way&lt;/a&gt;. However, I am definitely open to the idea of doing interesting new things with computer aid; it just has not been a priority to explore.&lt;/p&gt;

&lt;p&gt;As preparation for the presentation (I don&amp;rsquo;t like feeling completely lost during live demos; I usually do!), I actually finally set up an Overtone project with Leiningen and walked through a tutorial that simply used the Clojure CIDER mode in Emacs to operate in a REPL. I didn&amp;rsquo;t do any real live-coding, however. I just wanted to get a taste.&lt;/p&gt;

&lt;p&gt;Erik Swanson gave a great presentation in which he described what he was doing as he live-coded some music with Emacs, incrementally creating instruments and generating pitches. Because of his presentation, I feel more comfortable about the prospect of really digging into Overtone if I ever want to.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a video of his presentation:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/w7ARayiKBrE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;keith-callenberg-https-twitter-com-keithcallenberg-on-conveying-information-through-sound:eae2c8db91585e112346d13d734d08c3&#34;&gt;&lt;a href=&#34;https://twitter.com/keithcallenberg&#34;&gt;Keith Callenberg&lt;/a&gt; on conveying information through sound&lt;/h2&gt;

&lt;p&gt;I learned a new word today: &lt;a href=&#34;http://en.wikipedia.org/wiki/Sonification&#34;&gt;&amp;ldquo;sonification&amp;rdquo;&lt;/a&gt;, the use of non-speech audio to convey information.&lt;/p&gt;

&lt;p&gt;I may have vaguely encountered sonification before, but never while fully attentive to it. That changed when Keith Callenberg, a computational scientist, gave a fine presentation in which he gave numerous striking examples of sonification. He made the important distinction between music and sonification: music is sound for an aesthetic purpose, but sonification is for information transfer.&lt;/p&gt;

&lt;p&gt;He convincingly showed why sonification is useful for data analysis, and also noted that our culture is strangely dominated by the &lt;em&gt;visual&lt;/em&gt;, so there remain many opportunities to use sound to understand data. (Also, sonification is used to help the visually impaired.)&lt;/p&gt;

&lt;p&gt;One local example he gave was a particulate monitoring study done at CMU.&lt;/p&gt;

&lt;h2 id=&#34;david-souther-on-web-audio-in-javascript:eae2c8db91585e112346d13d734d08c3&#34;&gt;David Souther on Web Audio in JavaScript&lt;/h2&gt;

&lt;p&gt;I thought we were done for the evening, but David Souther hopped up with an unscheduled lightning talk on using Web Audio in JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:eae2c8db91585e112346d13d734d08c3&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I enjoyed the presentations on music and sound, and got some ideas for stuff I might want to do myself. Another excellent session for Pittsburgh Code and Supply!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Clojure transducers through types</title>
      <link>http://conscientiousprogrammer.com/blog/2014/08/07/understanding-cloure-transducers-through-types/</link>
      <pubDate>Thu, 07 Aug 2014 22:58:16 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/08/07/understanding-cloure-transducers-through-types/</guid>
      <description>

&lt;p&gt;Yesterday, Rich Hickey published a blog post, &lt;a href=&#34;http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming&#34;&gt;&amp;ldquo;Transducers are Coming&amp;rdquo;&lt;/a&gt;, which attracted a lot of attention.&lt;/p&gt;

&lt;p&gt;I have a confession to make, which I have made before: I find it very difficult to understand ideas or code not presented with &lt;em&gt;types&lt;/em&gt;. So I decided that the only way I could possibly understand what &amp;ldquo;transducers&amp;rdquo; are would be to actually implement them in a typed language. I ended up doing so and am sharing my findings here.&lt;/p&gt;

&lt;h2 id=&#34;vague-types-in-the-original-blog-post:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Vague types in the original blog post&lt;/h2&gt;

&lt;p&gt;Rich informally gave some type signatures in his blog post:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;;;reducing function signature
whatever, input -&amp;gt; whatever

;;transducer signature
(whatever, input -&amp;gt; whatever) -&amp;gt; (whatever, input -&amp;gt; whatever)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was, unfortunately, not very helpful. It is hard to make sense of this pseudo-notation for types. What is quantified over what? And what is bound to what? I&amp;rsquo;ll explain later what I mean by these questions.&lt;/p&gt;

&lt;h2 id=&#34;first-discussion-thread-i-saw:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;First discussion thread I saw&lt;/h2&gt;

&lt;p&gt;There was much tweeting online about transducers after Rich Hickey&amp;rsquo;s initial announcement; the tweets did not help me, except for links posted to discussion elsewhere.&lt;/p&gt;

&lt;p&gt;One of them was &lt;a href=&#34;https://news.ycombinator.com/item?id=8143905&#34;&gt;on Hacker News&lt;/a&gt;. I browsed through it but found it mostly not useful. The problem was that although a lot of interesting Haskell code was thrown around, it tended to be &lt;em&gt;related&lt;/em&gt; to transducers but not an &lt;em&gt;exact&lt;/em&gt; translation of the concept. I already had my own intuitions about transducers being related to well-known types such as &lt;a href=&#34;http://www.haskell.org/haskellwiki/Foldable_and_Traversable&#34;&gt;foldables&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Iteratee&#34;&gt;iteratees&lt;/a&gt;, &lt;a href=&#34;https://lens.github.io/&#34;&gt;lenses&lt;/a&gt;, etc. That &amp;ldquo;ordinary function composition&amp;rdquo; was involved immediately suggested the connections, because function composition is huge in these existing Haskell libraries.&lt;/p&gt;

&lt;p&gt;But what I wanted was to understand transducers &lt;em&gt;as they are&lt;/em&gt;, before even thinking about generalizations and comparisons.&lt;/p&gt;

&lt;h3 id=&#34;what-are-the-types:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;What are the types?&lt;/h3&gt;

&lt;p&gt;Rich Hickey &lt;a href=&#34;https://news.ycombinator.com/item?id=8144385&#34;&gt;informally offered some types&lt;/a&gt; (which he said were &amp;ldquo;a la Haskell&amp;rdquo;) to try to help out:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    ;;reducing fn
    x-&amp;gt;a-&amp;gt;x

    ;;transducer fn
    (x-&amp;gt;a-&amp;gt;x)-&amp;gt;(x-&amp;gt;b-&amp;gt;x)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, by using type variables &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt;, that indicates what is bound to what. The blog post should have used this notation rather than&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;;;transducer signature
(whatever, input -&amp;gt; whatever) -&amp;gt; (whatever, input -&amp;gt; whatever)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;sample-clojure-code:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Sample Clojure code&lt;/h3&gt;

&lt;p&gt;He also posted some sample Clojure code:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/b5aefa622180681e1c81.js&#34;&gt;&lt;/script&gt;


&lt;h2 id=&#34;second-discussion-thread-i-saw:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Second discussion thread I saw&lt;/h2&gt;

&lt;p&gt;Then today, I saw a discussion thread on Reddit, titled &lt;a href=&#34;http://www.reddit.com/r/haskell/comments/2cv6l4/clojures_transducers_are_perverse_lenses/&#34;&gt;&amp;ldquo;Clojure&amp;rsquo;s Transducers are Perverse Lenses&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;actual-runnable-haskell-code:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Actual runnable Haskell code&lt;/h3&gt;

&lt;p&gt;Rich finally posted some actual &lt;a href=&#34;http://www.reddit.com/r/haskell/comments/2cv6l4/clojures_transducers_are_perverse_lenses/&#34;&gt;type-checked, runnable Haskell code&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Transducers in Haskell&lt;/span&gt;

&lt;span style=&#34;color: #0000FF&#34;&gt;mapping&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r)
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Original was (b -&amp;gt; a) -&amp;gt; (r -&amp;gt; a -&amp;gt; r) -&amp;gt; (r -&amp;gt; b -&amp;gt; r)&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- but Michael O&amp;#39;Keefe in comment pointed out this is misleading&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;mapping&lt;/span&gt; f xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xf r (f a)

&lt;span style=&#34;color: #0000FF&#34;&gt;filtering&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r)
&lt;span style=&#34;color: #0000FF&#34;&gt;filtering&lt;/span&gt; p xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; p a &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt; xf r a &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; r

&lt;span style=&#34;color: #0000FF&#34;&gt;flatmapping&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [b]) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r)
&lt;span style=&#34;color: #0000FF&#34;&gt;flatmapping&lt;/span&gt; f xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; foldl xf r (f a)

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- for exposition only, yes, conj is gross for lazy lists&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- in Clojure conj and left folds dominate&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;conj&lt;/span&gt; xs x &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; [x]
&lt;span style=&#34;color: #0000FF&#34;&gt;xlist&lt;/span&gt; xf &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; foldl (xf conj) &lt;span style=&#34;color: #B00040&#34;&gt;[]&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- build any old list function with its transducer, all the same way&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xmap&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [b]
&lt;span style=&#34;color: #0000FF&#34;&gt;xmap&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; mapping f

&lt;span style=&#34;color: #0000FF&#34;&gt;xfilter&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [a]
&lt;span style=&#34;color: #0000FF&#34;&gt;xfilter&lt;/span&gt; p &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; filtering p

&lt;span style=&#34;color: #0000FF&#34;&gt;xflatmap&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [b]) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [b]
&lt;span style=&#34;color: #0000FF&#34;&gt;xflatmap&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; flatmapping f

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- again, not interesting for lists, but the same transform&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- can be put to use wherever there&amp;#39;s a step fn&lt;/span&gt;

&lt;span style=&#34;color: #0000FF&#34;&gt;xform&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r)
&lt;span style=&#34;color: #0000FF&#34;&gt;xform&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; mapping (&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; filtering even &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; flatmapping (&lt;span style=&#34;color: #0000FF&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;..&lt;/span&gt; x])


&lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; xlist xform [&lt;span style=&#34;color: #666666&#34;&gt;1..5&lt;/span&gt;]
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- [0,1,2,0,1,2,3,4,0,1,2,3,4,5,6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this post, I knew it would not take me long to figure out transducers.&lt;/p&gt;

&lt;h2 id=&#34;refactoring-his-haskell-code:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Refactoring his Haskell code&lt;/h2&gt;

&lt;p&gt;Two things to notice about the original code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has long, low-level function types rather than types that actually &lt;em&gt;name&lt;/em&gt; the concepts being discussed (&lt;em&gt;reducers&lt;/em&gt; and &lt;em&gt;transducers&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;It uses hardcoded list types &lt;code&gt;[a]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;type-synonyms-and-higher-rank-types:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Type synonyms and higher-rank types&lt;/h3&gt;

&lt;p&gt;Defining lots and lots of types (whether synonyms or &lt;a href=&#34;http://www.haskell.org/haskellwiki/Newtype&#34;&gt;newtypes&lt;/a&gt; is standard practice when programming in a modern typed language. OK, so I defined a type synonym&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Left reduce&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; a r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But what about transducer? This is trickier.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;invalid&lt;/em&gt; attempt at a type would be&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Illegal!&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; a b &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; a r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; b r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;because the type variable &lt;code&gt;r&lt;/code&gt; is not bound in the type definition. And it would be incorrect to just randomly add &lt;code&gt;r&lt;/code&gt; on the left hand side as an extra parameter to the &lt;code&gt;Transducer&lt;/code&gt; type, because in fact it is &lt;em&gt;critical&lt;/em&gt; that a transducer &lt;em&gt;does not care&lt;/em&gt; about the underlying reducer&amp;rsquo;s return type &lt;code&gt;r&lt;/code&gt;. How do we write the desired type?&lt;/p&gt;

&lt;p&gt;It turns out you need &lt;a href=&#34;http://www.haskell.org/haskellwiki/Rank-N_types&#34;&gt;higher-rank types&lt;/a&gt;. Rank-1 types are not sufficient; we need a rank-2 type to quantify &lt;code&gt;r&lt;/code&gt;, to say that a transducer from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt; is a transformation that takes a reducer to a specific &lt;code&gt;r&lt;/code&gt; and returns another reducer to the &lt;em&gt;same&lt;/em&gt; &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Here&amp;#39;s where the rank-2 type is needed&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; a b &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; forall r &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; a r &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; b r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can see more clearly some &lt;em&gt;completely generic&lt;/em&gt; ways to create a transducer:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;mapping&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; b a
&lt;span style=&#34;color: #0000FF&#34;&gt;mapping&lt;/span&gt; f xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xf r (f a)

&lt;span style=&#34;color: #0000FF&#34;&gt;filtering&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; a a
&lt;span style=&#34;color: #0000FF&#34;&gt;filtering&lt;/span&gt; p xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; p a &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt; xf r a &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; r
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;a-bit-of-history:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;A bit of history&lt;/h4&gt;

&lt;p&gt;Higher-rank types are a powerful technique for expressing &amp;ldquo;hiding&amp;rdquo; of unnecessary details about types going on somewhere. My first recollection of the real world use of rank-2 types is from 1994 (the year I started using Haskell, although I did not actually use it in my work as a software engineer until 1995), when I was excited to read a paper by John Launchbury and Simon Peyton Jones that solved, using a rank-2 type, a specific, important, practical problem, &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.3299&#34;&gt;&amp;ldquo;Lazy Functional State Threads&amp;rdquo;&lt;/a&gt;; twenty years later, their &lt;a href=&#34;http://hackage.haskell.org/package/base-4.7.0.1/docs/Control-Monad-ST.html&#34;&gt;ST monad&lt;/a&gt; is still part of the standard library!&lt;/p&gt;

&lt;h3 id=&#34;introducing-type-classes:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Introducing type classes&lt;/h3&gt;

&lt;p&gt;Clojure uses &lt;a href=&#34;http://clojure.org/protocols&#34;&gt;protocols&lt;/a&gt; as an abstraction mechanism, and the &amp;ldquo;magic&amp;rdquo; of transducers uses protocols. In Haskell, type classes are the major abstraction mechanism (this is true of Scala also).&lt;/p&gt;

&lt;p&gt;So I abstracted away from the hardcoded list-oriented functions and values in Rich Hickey&amp;rsquo;s Haskell code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foldl&lt;/code&gt; abstracted to a &lt;code&gt;class Foldable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conj&lt;/code&gt; and empty list &lt;code&gt;[]&lt;/code&gt; abstracted to a &lt;code&gt;class Conjable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Left fold&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  fold &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; a (f a)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  empty &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; f a
  conj &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Reducer&lt;/span&gt; a (f a)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note our reliance on transducing and reducing from one type &lt;code&gt;a&lt;/code&gt; to another, &lt;code&gt;f a&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;foldable-constraint:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;&lt;code&gt;Foldable&lt;/code&gt; constraint&lt;/h4&gt;

&lt;p&gt;Unlike &lt;code&gt;mapping&lt;/code&gt; and &lt;code&gt;filtering&lt;/code&gt;, &lt;code&gt;flatmapping&lt;/code&gt; is &lt;em&gt;not completely generic&lt;/em&gt;, because it depends on something being &lt;code&gt;Foldable&lt;/code&gt; (implementing a &lt;code&gt;fold&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;flatmapping&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; b a
&lt;span style=&#34;color: #0000FF&#34;&gt;flatmapping&lt;/span&gt; f xf r a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; fold xf r (f a)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;conjable-constraint:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;&lt;code&gt;Conjable&lt;/code&gt; constraint&lt;/h4&gt;

&lt;p&gt;Finally, here&amp;rsquo;s the originally list-specific code that now depends only on &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Conjable&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- I changed Rich Hickey&amp;#39;s code to be more general than just list&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- but accept anything Conjable&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xlist&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; b a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;span style=&#34;color: #0000FF&#34;&gt;xlist&lt;/span&gt; xf &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; fold (xf conj) empty

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- build any old Foldable function with its transducer, all the same way&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xmap&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;span style=&#34;color: #0000FF&#34;&gt;xmap&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; mapping f

&lt;span style=&#34;color: #0000FF&#34;&gt;xfilter&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a
&lt;span style=&#34;color: #0000FF&#34;&gt;xfilter&lt;/span&gt; p &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; filtering p

&lt;span style=&#34;color: #0000FF&#34;&gt;xflatmap&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;span style=&#34;color: #0000FF&#34;&gt;xflatmap&lt;/span&gt; f &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; flatmapping f
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;list-specific-stuff:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;List-specific stuff&lt;/h3&gt;

&lt;p&gt;Here is the list-specific code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Stuff specialized to lists.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- To use another type, just make it a Foldable and Conjable.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  fold &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; foldl

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- for exposition only, yes, conj is gross for lazy lists&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- in Clojure conj and left folds dominate&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  empty &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;[]&lt;/span&gt;
  conj xs x &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; [x]

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Note: the type does not say anything about Foldable or Conjable,&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- even though the implementation just happens to use a list!&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xform&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Transducer&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;xform&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; mapping (&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; filtering even &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; flatmapping (&lt;span style=&#34;color: #0000FF&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;..&lt;/span&gt; x])

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Again, this can munge anything Foldable and Conjable, not just a list.&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;munge&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; f, &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; f) &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;munge&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; xlist xform
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice some very important properties of this code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xform&lt;/code&gt; has a type that does not mention lists at all, even though it is implemented using a list and cannot compile without the list &lt;code&gt;instance&lt;/code&gt; implementations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;munge&lt;/code&gt; also does not mention lists, and can transform anything that is &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Conjable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- munge a list&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- [0,1,2,0,1,2,3,4,0,1,2,3,4,5,6]&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;example1&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt;]
&lt;span style=&#34;color: #0000FF&#34;&gt;example1&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; munge [&lt;span style=&#34;color: #666666&#34;&gt;1..5&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;implementing-another-type-to-illustrate-the-genericity-of-transducers:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Implementing another type to illustrate the genericity of transducers&lt;/h3&gt;

&lt;p&gt;To illustrate Rich Hickey&amp;rsquo;s main point, I implemented instances of &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Conjable&lt;/code&gt; for a standard Haskell &lt;code&gt;Vector&lt;/code&gt; library as an alternate &amp;ldquo;collection-like&amp;rdquo; type.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- For example using Vector instead of list&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;qualified&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data.Vector&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; V

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Implement Foldable, Conjable type classes for Vector&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Foldable&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  fold &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;foldl

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Conjable&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;
  empty &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;empty
  conj &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;snoc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can run &lt;code&gt;munge&lt;/code&gt; directly on a vector instead of a list, &lt;em&gt;without making any changes&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- return a vector rather than a list; note the fact that munge actually&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- internally uses a list&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;example2&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Integer&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;example2&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; munge &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;enumFromN &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is &lt;em&gt;code reuse&lt;/em&gt; at its best.&lt;/p&gt;

&lt;p&gt;Note that there is nothing that ties transducers to any concrete &amp;ldquo;collection&amp;rdquo; type. We could write instances of &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Conjable&lt;/code&gt; for some kind of &amp;ldquo;channel&amp;rdquo; abstraction, for example, and instantaneously be able to munge data coming from it and to another. In fact, this is already what is done in the real world, where Haskell and Scala are used in production at places like Facebook and Twitter to efficiently handle large amounts of data.&lt;/p&gt;

&lt;h2 id=&#34;my-code-repository:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;My code repository&lt;/h2&gt;

&lt;p&gt;My complete code is available &lt;a href=&#34;https://github.com/FranklinChen/clojure-transducers-in-haskell&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:5a7fb7f4f2a1a2d30fdd2c73dcd9c156&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was pretty exciting to see the announcement of the transducers library for Clojure, because it represents a level of abstraction that I think has not been expressed much in the world of dynamically typed languages, although the techniques are two decades old in the Haskell community in a statically typed setting. And I hope that I was able to convey the sheer elegance of Haskell as a way to express interesting types with practical ramifications for abstraction and pluggability.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Code and Supply: Programming in journalism</title>
      <link>http://conscientiousprogrammer.com/blog/2014/07/17/pittsburgh-code-and-supply-programming-in-journalism/</link>
      <pubDate>Thu, 17 Jul 2014 21:21:19 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/07/17/pittsburgh-code-and-supply-programming-in-journalism/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://static.squarespace.com/static/538f3cc8e4b00f52172b5560/t/53a4ec76e4b0488fb14c5a29/1403317372203/sign.png?format=500w&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I finally attended my first ever &lt;a href=&#34;http://www.codeandsupply.co/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; meeting! The group, which posts its &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/&#34;&gt;events on Meetup&lt;/a&gt;, was created by local Pittsburgh software developer &lt;a href=&#34;https://twitter.com/justinxreese&#34;&gt;Justin Reese&lt;/a&gt; just a few months ago, in March 2014. His vision is to create a local community that, unlike conventional specific language/technology-based meetups, is much more universal and broad. If you haven&amp;rsquo;t do so already, read more about the &lt;a href=&#34;http://www.codeandsupply.co/about&#34;&gt;goals of Pittsburgh Code and Supply&lt;/a&gt;. I&amp;rsquo;m very excited about this new group!&lt;/p&gt;

&lt;p&gt;The Code and Supply meetup I just attended was about &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/186766512/&#34;&gt;&amp;ldquo;Programming in journalism&amp;rdquo;&lt;/a&gt;. This is a topic of huge importance, and I was excited to attend to hear more about what some local journalist/programmers are doing.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-about-sponsors:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;A bit about sponsors&lt;/h2&gt;

&lt;p&gt;Justin opened by briefly saying a few words about the goals of Pittsburgh Code and Supply. He then noted that this month, the group did not have sponsors, unfortunately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pittsburgh Code and Supply needs sponsors!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you like what Code and Supply is doing, please consider seeing if your employer would be willing to step up as a sponsor for the group.&lt;/p&gt;

&lt;h2 id=&#34;contribute:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Contribute!&lt;/h2&gt;

&lt;p&gt;Also, in any case, spread the word about the group.&lt;/p&gt;

&lt;p&gt;This is my first meeting, and next Monday, I am actually going to give my first presentation for the group, on &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/&#34;&gt;&amp;ldquo;Type-Directed TDD in Rust&amp;rdquo;&lt;/a&gt;. The group is always looking for people to speak about something or facilitate other formats of meetings, so &lt;a href=&#34;http://www.codeandsupply.co/speak/&#34;&gt;sign up&lt;/a&gt; if you have an idea! I personally have some ideas I&amp;rsquo;d like to propose for future meetings, such as discussions about technology-related topics such as philosophy, history, and education.&lt;/p&gt;

&lt;h2 id=&#34;amyjo-brown:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;AmyJo Brown&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/DaOxhNkHvvw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://amyjobrown.com/&#34;&gt;AmyJo Brown&lt;/a&gt;, an independent journalist, gave a great talk about the kind of work that she does, and why it is important. She gave an overview of how journalism has changed because of the availability of data and because of the complexity of the world, both of which lead to the necessity of telling stories differently, as evidenced by what &lt;a href=&#34;http://www.propublica.org/&#34;&gt;ProPublica&lt;/a&gt;, the &lt;a href=&#34;http://www.nytimes.com/&#34;&gt;New York Times&lt;/a&gt;, and the &lt;a href=&#34;http://www.latimes.com/&#34;&gt;Los Angeles Times&lt;/a&gt; have been doing.&lt;/p&gt;

&lt;p&gt;Her own work involves tracking political donations (&amp;ldquo;follow the money&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;She gave examples of software tools she uses to get data, clean it, analyze it, and archive the whole process. On the programming end, she programs in Python, for example (Django for Web development), and uses &lt;a href=&#34;http://www.documentcloud.org/&#34;&gt;DocumentCloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;She talked about many things to keep in mind while doing this kind of data journalism. First of all, you have to know the limitations of the data you&amp;rsquo;re getting. She has to deal with handwritten documents, and data in different formats. Data that is clearly incomplete or entered wrong (whether accidentally or maliciously). It is necessary to know the domain, know the context in which data was collected or required or submitted, to not fall into the trap of just blindly treating data as a record of the full truth and just get into programmatically processing it. There&amp;rsquo;s a lot that involves human judgment calls. And this is why it is so important to save all the original information and document each step of data &amp;ldquo;cleaning&amp;rdquo; and interpretation.&lt;/p&gt;

&lt;p&gt;Near the end of her talk, AmyJo had her colleague Katrina speak a bit also. Katrina was not originally trained as a programmer, but was always interested in politics. She ended up getting into programming later.&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;m always very excited and impressed to hear of people with domain knowledge and passion who take up computer programming as a useful skill to apply to their domain. Sometimes I hear people saying &amp;ldquo;please don&amp;rsquo;t code&amp;rdquo;; I totally disagree with this sentiment and believe that &lt;a href=&#34;http://franklinchen.com/blog/2011/12/09/why-everyone-should-learn-computer-science/&#34;&gt;everyone can benefit from learning the fundamentals of computer science and programming&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;andrew-mcgill:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Andrew McGill&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/0iT9rhwRXVs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://www.andrewrmcgill.com/&#34;&gt;Andrew McGill&lt;/a&gt; bills himself as &amp;ldquo;your friendly neighborhood journalist&amp;rdquo;, and works for the &lt;a href=&#34;http://www.post-gazette.com/&#34;&gt;Pittsburgh Post-Gazette&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He started by talking about his interesting career path, which involved being into computers before college, but then going to college and then finding other interests and abandoning programming, and then only later taking it back up, in the service of journalism, to enable him to find data and tell stories through visualization.&lt;/p&gt;

&lt;p&gt;He showed us specific Web sites and articles he has created to provide better visualizations of data than what is available in raw form. For example, on the funny side, there is &lt;a href=&#34;http://newsinteractive.post-gazette.com/wheresbill/&#34;&gt;&amp;ldquo;Where&amp;rsquo;s Bill?&amp;rdquo;&lt;/a&gt;, which he created because he was not happy with the &amp;ldquo;official&amp;rdquo; boring text news feed of Mayor Bill Peduto&amp;rsquo;s calendar. He scraped the official site with PHP. He also created a Bill Peduto Twitter bot using Python.&lt;/p&gt;

&lt;p&gt;He also showed a D3-based visualization of &lt;a href=&#34;http://newsinteractive.post-gazette.com/plugged-wells/&#34;&gt;&amp;ldquo;The Mystery of the Plugged Wells&amp;rdquo;&lt;/a&gt;. Again, the point was to take already available data but to tell a story better with it than just giving raw tables or a purely text-based narrative.&lt;/p&gt;

&lt;p&gt;He showed some other projects, such as a visualization of school comparisons based on &lt;a href=&#34;http://en.wikipedia.org/wiki/Pennsylvania_System_of_School_Assessment&#34;&gt;PSSA&lt;/a&gt; data.&lt;/p&gt;

&lt;h2 id=&#34;questions-and-answers:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Questions and answers&lt;/h2&gt;

&lt;p&gt;There were quite a lot of questions posed to the presenters throughout the evening, on the technologies used, on work with graphic designers, on the process of obtaining data, and political implications of the work. Great discussions.&lt;/p&gt;

&lt;h2 id=&#34;technologies-used:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Technologies used&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s something resembling a summary of technologies mentioned that the presenters use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;DocumentCloud&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;OpenRefine&lt;/li&gt;
&lt;li&gt;D3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interesting-articles:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Interesting articles&lt;/h2&gt;

&lt;p&gt;Before the meetup, I posted to the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/186766512/&#34;&gt;event page&lt;/a&gt; a link to a provocative (perhaps too harsh and ranty) article warning about dangers in data journalism, &lt;a href=&#34;http://www.niemanlab.org/2014/07/alberto-cairo-data-journalism-needs-to-up-its-own-standards/&#34;&gt;by visualization expert Alberto Cairo&lt;/a&gt;. It got no response.&lt;/p&gt;

&lt;p&gt;Later, I also posted a link to a thoughtful examination of the question of &lt;a href=&#34;http://source.opennews.org/en-US/learning/true-facts-maybe/&#34;&gt;epistemology in data journalism&lt;/a&gt;. I totally recommend reading that article.&lt;/p&gt;

&lt;p&gt;AmyJo after the meetup posted some more links on the event page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jeremybowers/why-im-a-newsroom-coder-860d9d49f684&#34;&gt;&amp;ldquo;Why I&amp;rsquo;m a newsroom coder&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://source.opennews.org/en-US/articles/planting-next-crop-newsroom-coders/&#34;&gt;&amp;ldquo;Planting the next crop of newsroom coders&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nytimes.com/2014/07/17/opinion/the-fec-lags-on-campaign-finance-disclosures.html&#34;&gt;&amp;ldquo;Data delayed is democracy denied&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I was very excited to attend my first Pittsburgh Code and Supply meetup, on the fascinating topic of programming in journalism. I felt I learned a lot about what is at stake and how programming is being used in journalism to better inform people of what is going on in the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why programming puzzlers make me sad</title>
      <link>http://conscientiousprogrammer.com/blog/2014/07/17/why-programming-puzzlers-make-me-sad/</link>
      <pubDate>Thu, 17 Jul 2014 23:01:52 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/07/17/why-programming-puzzlers-make-me-sad/</guid>
      <description>

&lt;p&gt;I recently saw a
&lt;a href=&#34;http://blog.plover.com/2014/07/17/&#34;&gt;&amp;ldquo;guess what this does&amp;rdquo; article&lt;/a&gt;
on a blog I follow, and this post presents mysterious Perl code for
which the reader is asked to guess what it does:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;perl -le &#39;print(two + two == five ? &amp;quot;true&amp;quot; : &amp;quot;false&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I looked at it briefly, got a headache, and didn&amp;rsquo;t even want to solve
it. This despite using Perl as one of my main programming languages
from 1993-2010 and considering myself fairly proficient at Perl.&lt;/p&gt;

&lt;p&gt;Programming puzzlers just in general make me sad.&lt;/p&gt;

&lt;h2 id=&#34;i-know-every-programming-language-has-quirks:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;I know every programming language has quirks&lt;/h2&gt;

&lt;p&gt;It is a human reality, given human imperfection, that the languages we
invent have quirks of some kind. You might expect that, unlike natural
languages like English and Chinese, which have the burden of no
centralized design and hundreds or thousands of year of history and
random evolution, computer languages would be designed up front to
avoid ambiguity and just plain confusion. But the human desire to make
some things &amp;ldquo;easy&amp;rdquo; through clever defaults or implicit assumptions
always results in an invented computer language that has
irregularities or unexpected behavior somewhere.&lt;/p&gt;

&lt;h2 id=&#34;the-strange-love-of-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;The strange love of puzzlers&lt;/h2&gt;

&lt;p&gt;Still, it makes me sad when I see &amp;ldquo;puzzlers&amp;rdquo;, and especially how they
are used. For some reason, in some circles, it is considered a sign of
intelligence or competence to be able to decode strange
puzzlers. Many academic homework assignments and exams tend to focus
on weird puzzlers as a way of supposedly testing proficiency in
programming. Java certification exams and job interview questions
often throw in puzzlers. I deplore this situation.&lt;/p&gt;

&lt;p&gt;I understand that in specialized circumstances, you would want to
value someone who was really good at puzzlers: someone who could write
a conforming compiler for a language, diagnose strange bugs, etc. But
that is not what most of us do or need to do. And too many puzzlers
makes non-programmers wince and stay away from a field they consider
to be pointlessly capricious.&lt;/p&gt;

&lt;h2 id=&#34;when-to-understand-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;When to understand puzzlers&lt;/h2&gt;

&lt;p&gt;The exception I make is when a &amp;ldquo;puzzler&amp;rdquo; is not actually rare code,
but typical code that has some kind of mistake. Some languages have
more of these puzzlers that are actually critical to understand in
order to be functional at working with code in them. For example,
almost all normally used features of C could be considered puzzlers!&lt;/p&gt;

&lt;h2 id=&#34;languages-with-puzzler-books:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;Languages with &amp;ldquo;puzzler&amp;rdquo; books&lt;/h2&gt;

&lt;p&gt;Many languages have spawned &amp;ldquo;puzzler&amp;rdquo; books or sites. You can look
them up for yourself if you are curious about puzzlers in your
favorite languages. I won&amp;rsquo;t list any here because I wouldn&amp;rsquo;t know
where to stop. I didn&amp;rsquo;t mean to pick on Perl, of course, when writing
this article.&lt;/p&gt;

&lt;h2 id=&#34;an-idea-how-about-learning-from-all-the-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;An idea: how about learning from all the puzzlers?&lt;/h2&gt;

&lt;p&gt;I have an idea: how about pooling together all the puzzlers in all the
languages that currently exist, classifying the language misfeatures
that resulted in those puzzlers, and coming up with a plan to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;teach the puzzlers in a systematic polyglot way&lt;/li&gt;
&lt;li&gt;fix as many of these puzzlers as possible in the languages (I expect
this to be very difficult because of compatibility needs)&lt;/li&gt;
&lt;li&gt;write up a guide to what &lt;em&gt;not&lt;/em&gt; to do in future &lt;em&gt;new&lt;/em&gt; languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you think there would be value in mining existing puzzlers for
  the purpose of a systematic resource for learning about programming
  language design?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t like programming puzzlers. They are supposed to be funny, and
maybe sometimes they are, but often they are abused for status and
mistaken as an accurate gauge of competence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you feel about puzzlers? Do you use them for assessing your
  own or others&amp;rsquo; knowledge? Do you solve them for entertainment? Do
  you think minimizing the existence of puzzlers should be a criterion
  for design of any new programming languages?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Scala Meetup: Exploring type-directed, test-driven development using FizzBuzz (my practice talk)</title>
      <link>http://conscientiousprogrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed/</link>
      <pubDate>Thu, 15 May 2014 22:49:48 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt; met, with me presenting a &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/&#34;&gt;practice talk&lt;/a&gt; for &amp;ldquo;Exploring type-directed, test-driven development using FizzBuzz&amp;rdquo;, which I am presenting at the upcoming local &lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh TechFest&lt;/a&gt; conference.&lt;/p&gt;

&lt;h2 id=&#34;presentation:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;Presentation&lt;/h2&gt;

&lt;p&gt;I have only recently completed the slides and code for my talk, and had not actually given the talk yet, so this was a practice talk that did not go so well, unfortunately.&lt;/p&gt;

&lt;p&gt;I spoke too quickly and had too much material to cover, and also got lost in some of my own slides. Oops. I think reaction to my talk was mixed. Some enjoyed it, while others seemed lost at places.&lt;/p&gt;

&lt;p&gt;After going home, I frankly felt that I had &lt;em&gt;failed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But I believe I can do much better. I have plenty of time to do a thorough revision before Pittsburgh TechFest in three weeks. I need to cut out material that is not needed for the core of what I am trying to achieve and make some things clearer (especially for the intended Pittsburgh TechFest audience, which I do not expect to even know Scala).&lt;/p&gt;

&lt;h2 id=&#34;supporting-material:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;Supporting material&lt;/h2&gt;

&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t recommend looking at them, but for historical purposes, here are slides of the presentation &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/meetup/doc/presentation.pdf&#34;&gt;as it was given in the first draft&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-05-16:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-05-16)&lt;/h2&gt;

&lt;p&gt;One day makes a difference in my confidence and determination! I noticed that the new &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; group (which I have not yet attended) is soon having its inaugural &lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/181773312/&#34;&gt;soon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I decided to offer to do a version of my talk for Pittsburgh Code and Supply using Rust as the programming language (rather than Scala). I want to spread the news about how to effectively use a sufficiently typed programming language, whether it&amp;rsquo;s Scala or Rust or anything else sufficiently derived from the ML family of type systems.&lt;/p&gt;

&lt;p&gt;Justin will schedule it for some time in July. That should give me enough time, after Pittsburgh TechFest in early June, to learn enough Rust to convert my Scala code over properly!&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-06-07:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-06-07)&lt;/h2&gt;

&lt;p&gt;I much improved the presentation for Pittsburgh TechFest, which I &lt;a href=&#34;./blog/2014/06/07/report-on-the-2014-pittsburgh-techfest-my-third-year/&#34;&gt;attended for the third year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recommend reading the &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/master/doc/article.pdf&#34;&gt;article version of the presentation&lt;/a&gt;, rather than the slides. This is the first time I&amp;rsquo;ve created both an article version of a presentation and slides for use during the live presentation. I will do this in the future as well. Slides are not meant to stand alone or even be read alone, but in case you really want to see them, they are here:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/37257104&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/FranklinChen/presentation-37257104&#34; title=&#34;Exploring type-directed, test-driven development: a case study using FizzBuzz&#34; target=&#34;_blank&#34;&gt;Exploring type-directed, test-driven development: a case study using FizzBuzz&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/FranklinChen&#34; target=&#34;_blank&#34;&gt;Franklin Chen&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-07-17:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-07-17)&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s crunch time. My Rust version of the talk, &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/&#34;&gt;&amp;ldquo;Type-Directed TDD in Rust&amp;rdquo;&lt;/a&gt; is coming next week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenHack Pittsburgh: working on a private project</title>
      <link>http://conscientiousprogrammer.com/blog/2014/02/24/openhack-pittsburgh-working-on-a-private-project/</link>
      <pubDate>Mon, 24 Feb 2014 18:46:39 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/02/24/openhack-pittsburgh-working-on-a-private-project/</guid>
      <description>&lt;p&gt;Last month at OpenHack Pittsburgh, I had a rather &lt;a href=&#34;./blog/2014/01/27/openhack-pittsburgh-a-great-place-to-share-and-learn/&#34;&gt;social time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/163727212/&#34;&gt;This month&lt;/a&gt;, I kept entirely to myself. I didn&amp;rsquo;t even speak up to say what I was working on. I was in a somber mood, and didn&amp;rsquo;t really want to talk. I worked on a private project that I will share when I am ready.&lt;/p&gt;

&lt;p&gt;It did feel consoling to be around other people, even while keeping to myself. Sometimes I just need to know that I am not alone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Scala Meetup: Implicits</title>
      <link>http://conscientiousprogrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits/</link>
      <pubDate>Thu, 13 Feb 2014 21:45:59 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt; met with Justin presenting on &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/&#34;&gt;&amp;ldquo;Implicits&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;implicits:e863a7ec4a3ba48279ebb2581682b028&#34;&gt;Implicits&lt;/h2&gt;

&lt;p&gt;Implicits are a novel and fantastically important feature of Scala. I wish there were a comprehensive and concise single resource about them out there, but I don&amp;rsquo;t actually know of one.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been doing stuff with implicits lately. Not long ago, I wrote a blog post that involved &lt;a href=&#34;./blog/2013/12/26/tostring-considered-harmful-part-2/&#34;&gt;using Scala implicits to avoid relying on the inherited Java &lt;code&gt;toString&lt;/code&gt; method&lt;/a&gt;. More recently, for this meetup I posted some code that I hoped someone would comment on, in which &lt;a href=&#34;https://github.com/franklinchen/test-specs2-matchers&#34;&gt;I used implicits to try to simplify a DSL&lt;/a&gt;. I&amp;rsquo;m not sure this is the right design choice, but it was an experiment.&lt;/p&gt;

&lt;h2 id=&#34;presentation:e863a7ec4a3ba48279ebb2581682b028&#34;&gt;Presentation&lt;/h2&gt;

&lt;p&gt;Around 7 of us showed up.&lt;/p&gt;

&lt;p&gt;Justin did some live coding using the Scala Worksheet to demonstrate various uses of implicits.&lt;/p&gt;

&lt;p&gt;One use is to define an &amp;ldquo;implicit function&amp;rdquo; that can convert of a value of one type to another. This can be overused badly, unfortunately.&lt;/p&gt;

&lt;p&gt;Another is to define an &amp;ldquo;implicit parameter&amp;rdquo; for a function so that you don&amp;rsquo;t have to explicitly pass a parameter to the function, if there is an implicit value in scope.&lt;/p&gt;

&lt;p&gt;Scala 2.10 greatly improved implicits by encapsulating the &amp;ldquo;conversion&amp;rdquo; pattern by means of an &amp;ldquo;implicit class&amp;rdquo;. Strangely, Scala Worksheet seemed to get confused when we played around and defined an implicit class that also had an implicit parameter. This led to some interesting detective work as we examined the generated JVM byte code to figure out what was going on! I thought it was useful for us to dig into this level; often it is useful to understand what something compiles to in order to better understand and appreciate a high-level language construct.&lt;/p&gt;

&lt;p&gt;Finally, we briefly discussed the type class pattern, which is arguably the most important use of implicits. This was too big a topic to get into here though.&lt;/p&gt;

&lt;h2 id=&#34;resources:e863a7ec4a3ba48279ebb2581682b028&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I posted some good resources that have popped up on my radar on Scala implicits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A fine &lt;a href=&#34;http://like-a-boss.net/2013/03/29/polymorphism-and-typeclasses-in-scala.html&#34;&gt;tutorial on type classes in Scala&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://typelevel.org/blog/2014/01/18/implicitly_existential.html&#34;&gt;Scary stuff with implicits&lt;/a&gt; that I don&amp;rsquo;t understand (yet).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:e863a7ec4a3ba48279ebb2581682b028&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Justin gave a nice introduction to implicits. I think the live coding and experimentation is a great way to involve people in code suggestions and discussion of what things mean and do. It was a fun time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenHack Pittsburgh: a great place to share and learn</title>
      <link>http://conscientiousprogrammer.com/blog/2014/01/27/openhack-pittsburgh-a-great-place-to-share-and-learn/</link>
      <pubDate>Mon, 27 Jan 2014 22:38:48 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/01/27/openhack-pittsburgh-a-great-place-to-share-and-learn/</guid>
      <description>&lt;p&gt;Another month, another &lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/158236852/&#34;&gt;meeting of OpenHack Pittsburgh&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The project I worked on was writing a blog post on the controversial subject of &lt;a href=&#34;https://twitter.com/BillLaboon/status/427525236406243328&#34;&gt;unit testing private methods&lt;/a&gt;. I ended up not finishing the post, not only because there&amp;rsquo;s a lot to say, but also because I got sidetracked (in a good way) because of discussions with people while at OpenHack!&lt;/p&gt;

&lt;p&gt;There were many good points that were made and so I had to reconsider some of my arguments. My overall viewpoint is still that the distinction between &amp;ldquo;public&amp;rdquo; and &amp;ldquo;private&amp;rdquo; is fluid, and that anything that seems significant enough that it feels like it should be tested should in fact be tested, ignoring the artifacts of how it is currently classified. One of the main counterpoints was that if you need to test it, then it should be factored out and made its own unit so that in essence, the rule against testing the private is maintained.&lt;/p&gt;

&lt;p&gt;Anyway, I will put up my post once I actually collect all my thoughts together and finish it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Scala Meetup: Introduction to Reactive</title>
      <link>http://conscientiousprogrammer.com/blog/2014/01/09/pittsburgh-scala-meetup-introduction-to-reactive/</link>
      <pubDate>Thu, 09 Jan 2014 21:29:20 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/01/09/pittsburgh-scala-meetup-introduction-to-reactive/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt; met with Josh presenting an &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581352/&#34;&gt;&amp;ldquo;Introduction to Reactive&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was great.&lt;/p&gt;

&lt;h2 id=&#34;pre-meetup-dinner:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;Pre-meetup dinner&lt;/h2&gt;

&lt;p&gt;A couple of us (Justin, Josh, Chris, me) had an early dinner at Everyday Noodles before the meetup. Very filling!&lt;/p&gt;

&lt;h2 id=&#34;turnout:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;Turnout&lt;/h2&gt;

&lt;p&gt;Ten of us showed up for this meeting.&lt;/p&gt;

&lt;h2 id=&#34;presentation:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;Presentation&lt;/h2&gt;

&lt;h3 id=&#34;what-is-reactive-anyway:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;What is &amp;ldquo;reactive&amp;rdquo; anyway?&lt;/h3&gt;

&lt;p&gt;In case you didn&amp;rsquo;t hear about it in the media, the term &amp;ldquo;reactive&amp;rdquo; has been popularized in recent months, and I &lt;a href=&#34;./blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming/&#34;&gt;reviewed the free Coursera course &amp;ldquo;Principles of Reactive Programming&amp;rdquo;&lt;/a&gt; that some of us in the Pittsburgh Scala group just completed, so check out my post for more on &amp;ldquo;reactive&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;futures:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;Futures&lt;/h3&gt;

&lt;p&gt;Josh did a live SBT session reviewing futures and promises.&lt;/p&gt;

&lt;p&gt;He noted that futures have limitations as a component of reactive systems. (This had become apparent when &lt;a href=&#34;http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/&#34;&gt;I started using futures last year in my personal projects&lt;/a&gt; and then &lt;a href=&#34;./blog/2013/08/02/pittsburgh-ruby-python-social/&#34;&gt;for work&lt;/a&gt;.) By themselves, futures do not support cancellation or &lt;a href=&#34;http://en.wikipedia.org/wiki/Back_pressure&#34;&gt;back pressure&lt;/a&gt;. Futures are a low-level, limited mechanism that are the right tool only if you have a pipeline all the way through forward, no back channel.&lt;/p&gt;

&lt;p&gt;An alternative to futures, of course, is to go all out and use Akka actors. But the drawback I&amp;rsquo;ve found with that is that this is a heavyweight mechanism for problems that don&amp;rsquo;t need the full power of actors. I&amp;rsquo;ve wanted something more structured and lightweight than using actors directly. I find it tricky to program using actors, because it is very easy to start writing spaghetti code that is spread out everywhere (which is what happened to me in the final project for the Coursera course).&lt;/p&gt;

&lt;p&gt;It turns out, according to Josh, that Typesafe is working on precisely this problem! Nice. He&amp;rsquo;ll tell us more when it comes out.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2014-07-10:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;(Update of 2014-07-10)&lt;/h4&gt;

&lt;p&gt;Half a year later, the promise was realized, as the Pittsburgh Scala Meetup had Josh &lt;a href=&#34;./blog/2014/07/10/pittsburgh-scala-meetup-reactive-streams/&#34;&gt;gave a talk on the new API called Reactive Streams&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;play:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;Play&lt;/h3&gt;

&lt;p&gt;Josh demonstrated &lt;a href=&#34;http://typesafe.com/activator&#34;&gt;Typesafe Activator&lt;/a&gt;, the cool new Web browser-based platform for using Scala. He showed an app using Play that looks at blogs simultaneously and uses &lt;code&gt;recoverWith&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;random-other-questions-and-discussions:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;Random other questions and discussions&lt;/h2&gt;

&lt;p&gt;What I like about the Pittsburgh Scala Meetup is that even when we have a presentation, discussion often wanders off to related topics (or unrelated topics). Anything goes, and I usually learn a lot.&lt;/p&gt;

&lt;p&gt;Someone asked about support for channels as in Go or Clojure&amp;rsquo;s &lt;a href=&#34;https://github.com/clojure/core.async&#34;&gt;&lt;code&gt;core.async&lt;/code&gt;&lt;/a&gt;. Josh said they&amp;rsquo;re working on this sort of thing with support for back pressure.&lt;/p&gt;

&lt;p&gt;Someone asked about how to connect &lt;a href=&#34;http://www.playframework.com/documentation/2.0/Iteratees&#34;&gt;iteratees&lt;/a&gt; with actors. Josh said, you can feed from an iteratee to an actor, and then just let the actor do stuff. However, there is some controversy about the whole iteratee thing in Play.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:1fbca7bab37ee55bb74190d8ff39e5b7&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was a great Pittsburgh Scala Meetup session. I felt that a lot of questions that had built up in my mind after having gotten into reactive programming are being addressed with continuing work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Review of the free Coursera course &#34;Principles of Reactive Programming&#34;</title>
      <link>http://conscientiousprogrammer.com/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming/</link>
      <pubDate>Tue, 31 Dec 2013 21:29:39 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming/</guid>
      <description>

&lt;p&gt;At long last, I have officially completed the free Coursera course &lt;a href=&#34;http://www.coursera.org/course/reactive&#34;&gt;&amp;ldquo;Principles of Reactive Programming&amp;rdquo;&lt;/a&gt;, receiving my &amp;ldquo;Statement of Accomplishment&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;This was an intense course, a lot of work, actually, and made the last two month s of my life (November and December) challenging as I juggled many activities. But it was worth the effort. I would definitely recommend this course to anyone who has completed the introductory course &lt;a href=&#34;http://www.coursera.org/course/progfun&#34;&gt;&amp;ldquo;Principles of Functional Programming in Scala&amp;rdquo;&lt;/a&gt; (or has the equivalent background). (See my &lt;a href=&#34;http://franklinchen.com/blog/2012-11-15-review-of-courseras-fall-2012-functional-programming-principles-in-scala/&#34;&gt;review of that course as offered in fall of 2012&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;I took this course along with a bunch of local friends who are also members of the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-reactive:4f64f078d93c39dccf60b45a8d4f55e9&#34;&gt;What is &amp;ldquo;Reactive&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Reactive&amp;rdquo; is a fairly new buzzword, popularized recently by the &lt;a href=&#34;http://www.reactivemanifesto.org/&#34;&gt;Reactive Manifesto&lt;/a&gt; to urge consideration of four traits modern applications may need to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;responsive&lt;/li&gt;
&lt;li&gt;scalable&lt;/li&gt;
&lt;li&gt;resilient&lt;/li&gt;
&lt;li&gt;event-driven&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;instructors-and-topics:4f64f078d93c39dccf60b45a8d4f55e9&#34;&gt;Instructors and topics&lt;/h2&gt;

&lt;p&gt;Each instructor was responsible for covering a key technology.&lt;/p&gt;

&lt;h3 id=&#34;martin-odersky:4f64f078d93c39dccf60b45a8d4f55e9&#34;&gt;Martin Odersky&lt;/h3&gt;

&lt;p&gt;Martin Oderksy, the inventor of Scala and instructor for the previously mentioned &amp;ldquo;Principles of Functional Programming in Scala&amp;rdquo; course, focused on covering more advanced usage of Scala.&lt;/p&gt;

&lt;p&gt;He immediately introduced monads, which are key to many of the concepts and libraries used throughout this course. Scala&amp;rsquo;s support for monads through the syntax of for-comprehensions is very helpful. He introduced the property-based testing framework &lt;a href=&#34;http://www.scalacheck.org/&#34;&gt;ScalaCheck&lt;/a&gt; (which uses monads for generation of data), and the first assignment involved working with the framework. (By the way, I gave a &lt;a href=&#34;http://franklinchen.com/blog/2013/04/11/my-pittsburgh-scala-meetup-talk-on-property-based-testing-using-scalacheck/&#34;&gt;talk on property-based testing using ScalaCheck&lt;/a&gt; eight months ago.)&lt;/p&gt;

&lt;p&gt;Then he discussed modeling event simulation in Scala using mutable objects. I felt that this unit was not in the spirit of the others, because there was so much uncontrolled mutable state running around. My friends and I agreed that the assignment for this unit was burdensome and not really useful. I thought to myself, in fact, that I would never solve the problems in this way.&lt;/p&gt;

&lt;h3 id=&#34;erik-meijer:4f64f078d93c39dccf60b45a8d4f55e9&#34;&gt;Erik Meijer&lt;/h3&gt;

&lt;p&gt;Erik Meijer is a very energetic and humorous speaker. I really enjoyed his lectures.&lt;/p&gt;

&lt;p&gt;In his first unit, he introduced asynchronous programming using Scala&amp;rsquo;s &lt;a href=&#34;http://docs.scala-lang.org/overviews/core/futures.html&#34;&gt;&lt;code&gt;Future&lt;/code&gt; monad (backed by a &lt;code&gt;Promise&lt;/code&gt;)&lt;/a&gt;, as well as the cool new &lt;a href=&#34;https://github.com/scala/async&#34;&gt;macro-based &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; library&lt;/a&gt;, which greatly simplifies writing code. Our assignment, which was instructive and interesting, was to implement a baby version of Node.js in Scala, ha!&lt;/p&gt;

&lt;p&gt;Then he introduced &lt;a href=&#34;https://rxscala.github.io/&#34;&gt;&lt;code&gt;RxScala&lt;/code&gt;&lt;/a&gt;, a Scala adaptor for &lt;a href=&#34;https://github.com/Netflix/RxJava&#34;&gt;&lt;code&gt;RxJava&lt;/code&gt;&lt;/a&gt;, which is a Java port of Microsoft&amp;rsquo;s &amp;ldquo;reactive extensions&amp;rdquo; &lt;code&gt;Rx&lt;/code&gt; framework. I enjoyed this unit a lot, and appreciated the great documentation available (the &amp;ldquo;marble diagrams&amp;rdquo; are particularly useful). One nitpick I suppose I must have with his presentation is that I&amp;rsquo;m not sure that, for a non-theory-oriented audience, the discussions of &amp;ldquo;duality&amp;rdquo; were necessary. The assignment was very practically-oriented, gathering data asynchronously and displaying it and allowing user interaction. It was enjoyable and showcased the power of using a framework like Rx.&lt;/p&gt;

&lt;h3 id=&#34;roland-kuhn:4f64f078d93c39dccf60b45a8d4f55e9&#34;&gt;Roland Kuhn&lt;/h3&gt;

&lt;p&gt;Roland Kuhn covered the most complex section of the course, introducing actors by means of the &lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt; framework.&lt;/p&gt;

&lt;p&gt;The first assignment was fairly straightforward, on implemented a distributed binary tree with actors.&lt;/p&gt;

&lt;p&gt;The second assignment I found quite difficult, and not only because it was crunch time at the end of December before holiday season! It was a distributed key-value store with multiple levels of possible failure. There is no way I would have successfully and correctly completed this assignment without the helpful discussions I found on the online Coursera forums. To really figure out what was going on required (for me) turning on logging in various places and writing a lot of tests using Akka&amp;rsquo;s &lt;a href=&#34;http://doc.akka.io/docs/akka/snapshot/scala/testing.html&#34;&gt;&lt;code&gt;TestKit&lt;/code&gt;&lt;/a&gt;. I realized eventually that my code was ugly and not entirely clean and idiomatic, but it was definitely a worthwhile learning experience on a realistic problem to solve.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:4f64f078d93c39dccf60b45a8d4f55e9&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I learned quite a lot from this course. It is a very practical course on &amp;ldquo;reactive&amp;rdquo; programming. I felt after completing this course that I was ready to use the concepts and technologies covered in real problems. I am grateful to the instructors (who were active on the forums, by the way) for sharing their theoretical and practical knowledge as a free Coursera course.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>