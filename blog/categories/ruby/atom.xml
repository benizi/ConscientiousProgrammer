<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2014-12-21T23:24:09-05:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[toString considered harmful, part 3]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/27/tostring-considered-harmful-part-3/"/>
    <updated>2013-12-27T22:03:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/27/tostring-considered-harmful-part-3</id>
    <content type="html"><![CDATA[<p>This is part 3 of a series of articles, &ldquo;<code>toString</code> considered harmful&rdquo;.</p>

<!--more-->


<h2>Languages without the <code>toString</code> problem</h2>

<p>There actually are quite a few languages that don&rsquo;t have the <code>toString</code> problem, or at least have it to a lesser degree.</p>

<h3>C</h3>

<p>There is no friendly generic conversion to a string (uh, really just a pointer to a null-terminated chunk of <code>char</code>) in C. The closest thing is using the type-unsafe <code>printf</code> family of functions, but you have to do almost all the work if you have some complicated <code>struct</code> and want to turn it into a C string.</p>

<h3>C++</h3>

<p>C++ introduced iostreams, where f you follow certain conventions and overload <code>operator&lt;&lt;</code> for every domain class of interest, you can build up decent looking strings, without using inheritance.</p>

<p>Or you could do the object-oriented thing and set up a hierarchy with a <code>ToString</code> abstract base class. But C++ does not come with everything already inheriting from an <code>Object</code>.</p>

<h3>Haskell</h3>

<p>Haskell does not force a <code>toString</code> on everything, but provides a <a href="http://www.haskell.org/tutorial/stdclasses.html"><code>Show</code> type class</a> for convenience in the standard prelude. It is easy (and convenient for debugging) to just tack on <code>deriving Show</code> and then call <code>show</code> to convert stuff to a string. This means that one can get lazy and fall into the same design traps as mentioned in the very first code example above. Again, the solution is to refuse to abuse <code>show</code>, and to use a different name instead for converting something to a string for a particular purpose.</p>

<h3>Go</h3>

<p>Go was invented at Google as a modernized C. It does not have classes, but does have <a href="http://research.swtch.com/interfaces">dynamic interfaces</a>. All that is required for a user-defined type to satisfy an interface is to implement the method <code>String()</code> returning a <code>string</code>. Basically, this makes the type implement the interface <a href="http://golang.org/pkg/fmt/#Stringer">fmt.Stringer</a>. Again, if you don&rsquo;t implement <code>String() string</code> for your type, then you will get a compile-time error when trying to treat it as a string.</p>

<p>Superficially, this sounds like Haskell type classes, but it&rsquo;s much more limited, because Go does not have generics and Go is only single dispatch. Go&rsquo;s interfaces really implement a kind of structural subtyping.</p>

<h3>Standard ML</h3>

<p><a href="http://www.standardml.org/">Standard ML</a> does not have the <code>toString</code> problem. It does, by convention, supply a <code>toString</code> function in many modules in the <a href="http://www.standardml.org/Basis/">Standard ML Basis Library</a>, such as <a href="http://www.standardml.org/Basis/integer.html">Int</a> and <a href="http://www.standardml.org/Basis/real.html">Real</a> and <a href="http://www.standardml.org/Basis/bool.html">Bool</a>, but these are just conventions and do not participate in any kind of unified conversion to string. If you want to convert anything besides a primitive type to a string, you have to write the conversion function yourself.</p>

<p>Furthermore, Standard ML, as a rather opinionated and <a href="http://mitpress.mit.edu/books/definition-standard-ml">&ldquo;purist&rdquo; language</a>, designed specifically for static simplicity, semantic minimalism, and <a href="http://mlton.org/">runtime efficiency</a>, does not believe in type classes, so there is no way to write a function that at runtime is generic over what can be turned into a string.</p>

<p>The best you can do is write something that is functorized, but then you have to apply it in a statically known context:</p>

<pre><code class="sml">signature TO_STRING =
  sig
    type t
    val toString : t -&gt; string
  end

functor DoStuff(ToString : TO_STRING) =
  struct
    fun doubleString (stuff: ToString.t) =
      let
        val s = ToString.toString stuff
      in
        s ^ s
      end
  end

structure MyStuff : TO_STRING =
  struct
    type t = int * bool
    fun toString (i, b) =
      "(" ^ Int.toString i ^ ", " ^ Bool.toString b ^ ")"
  end

structure DoMyStuff = DoStuff(MyStuff)
</code></pre>

<p>with</p>

<pre><code class="sml">DoMyStuff.doubleString (42, true)
(* result is the string "(42, true)(42, true)" *)
</code></pre>

<p>Since the Standard ML ecosystem is so minimalist, it&rsquo;s hard to fall into the <code>toString</code> trap, because you would have to set it all up yourself.</p>

<h3>OCaml</h3>

<p>OCaml, like Standard ML, does not provide a generic <code>toString</code> out of the box, but the OCaml ecosystem is much more practically oriented.</p>

<p>There is a <a href="http://en.wikipedia.org/wiki/Camlp4">pre-processor for OCaml</a> that can be used to generate convenient printers for types, <a href="https://github.com/ocsigen/deriving"><code>deriving</code></a>. There is also an S-expression based generator, <a href="http://realworldocaml.org/v1/en/html/data-serialization-with-s-expressions.html">Sexplib</a>. But these are mechanically generated, rather than part of something generic at runtime.</p>

<p>Of course, one could also use the <a href="http://caml.inria.fr/pub/docs/manual-ocaml-4.01/objectexamples.html">object-oriented part of OCaml</a> to make a generic &ldquo;to string&rdquo; hierarchy starting with a suitable interface:</p>

<pre><code class="ocaml">class type convert_to_string =
  object
    method to_string : string
  end
</code></pre>

<p>But I don&rsquo;t actually know many people who use the object-oriented features of OCaml!</p>

<h2>Conclusion</h2>

<p>An annoying bug I temporarily created in my code led me to take stock of the state of <code>toString</code> design choices in various programming languages, and also consider how we can better escape fragility in our code, independent of whatever language we are using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toString considered harmful, part 2]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2/"/>
    <updated>2013-12-26T22:03:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2</id>
    <content type="html"><![CDATA[<p>This is part 2 of a series of articles, &ldquo;<code>toString</code> considered harmful&rdquo;. [Part 1] introduced the problem in the context of a common design flaw present in object-oriented languages, and proposed a simple workaround.</p>

<p>In part 2, we look at advanced ways to organize &ldquo;stringable&rdquo; data, using either an object-oriented or functional style. Examples are in Scala because it equally supports either style.</p>

<!--more-->


<h2>Object-oriented vs. functional</h2>

<p>The fix presented was in <em>object-oriented</em> style, adding a method <code>toUrlString</code> to a class. The other solution is the <em>functional</em> style, leaving the <code>Id</code> class alone, and writing an external function instead:</p>

<pre><code class="scala">  case class Id(id: Int)

  def toUrlString(id: Id) = id.toString
</code></pre>

<p>with</p>

<pre><code class="scala">    id match {
      case None =&gt; println("No id found!")
      case Some(n) =&gt; getUrl(makeUrl(toUrlString(n)))
    }
</code></pre>

<p>There are advantages and disadvantages to either solution.</p>

<h2>More advanced OO</h2>

<p>It would be very natural, given a whole set of domain classes in addition to <code>Id</code>, to want all of them to have a <code>toUrlString</code>. Then the natural thing to do is to create a mini-universe (parallel to the <code>toString</code> universe) by creating a hierarchy:</p>

<pre><code class="scala">  trait UrlString {
    def toUrlString: String
  }

  case class Id(id: Int) extends UrlString {
    override def toUrlString = id.toString
  }

  case class ...(...) extends UrlString {
    override def toUrlString = ...
  }
</code></pre>

<h2>Advanced string interpolation with OO</h2>

<p>In fact, Scala and other languages with advanced string interpolation facilities allow yet another refactoring by making sure that what gets into a URL isn&rsquo;t just an arbitrary string in the first place!</p>

<p>Below we define a string interpolator that only operates on objects of classes that implement the trait <code>UrlString</code>, and therefore does away with an explicit call to <code>toUrlString</code>:</p>

<pre><code class="scala">  implicit class UrlHelper(val sc: StringContext) extends AnyVal {
    def url(args: UrlString*): String = {
      val strings = sc.parts.iterator
      val expressions = args.iterator
      val buf = new StringBuffer(strings.next)
      while (strings.hasNext) {
        buf append expressions.next.toUrlString
        buf append strings.next
      }
      buf.toString
    }
  }

  /** Only ever use UrlString to create a URL. */
  def makeUrl(id: UrlString): String = url"http://service.com?id=$id"
</code></pre>

<p>with</p>

<pre><code class="scala">    id match {
      case None =&gt; println("No id found!")
      case Some(n) =&gt; getUrl(makeUrl(n))
    }
</code></pre>

<p>This may or may not be overengineering.</p>

<h2>Advanced string interpolation with FP</h2>

<p>The functional approach doesn&rsquo;t like inheritance in the domain classes. We can implement it with <a href="http://en.wikipedia.org/wiki/Type_class">type classes</a> (a concept first pioneered in Haskell in the late 1980s) by means of implicits in Scala, in order to implement <code>toUrlString</code> outside of a class hierarchy but also allow it to be used in a constrained generic way. A full discussion of this is outside the scope of this post, but the basic point is that with type classes, one can write code that does <em>not</em> depend on an inheritance hierarchy. If you&rsquo;re used to monkey-patching in dynamic languages, think of it as compile-time monkey-patching.</p>

<pre><code class="scala">  // A type class
  trait UrlString[A] {
    def toUrlString(a: A): String
  }

  // Wrapper class
  case class Id(id: Int)

  // Implement the type class UrlString for Id
  implicit object IdToUrlString extends UrlString[Id] {
    override def toUrlString(a: Id) = a.id.toString
  }

  implicit class UrlHelper(val sc: StringContext) extends AnyVal {
    def url[A: UrlString](args: A*): String = {
      val strings = sc.parts.iterator
      val expressions = args.iterator
      val buf = new StringBuffer(strings.next)
      while (strings.hasNext) {
        buf append implicitly[UrlString[A]].toUrlString(expressions.next)
        buf append strings.next
      }
      buf.toString
    }
  }

  /** Anything "viewable" as UrlString can be used to create a URL. */
  def makeUrl[A: UrlString](id: A): String = url"http://service.com?id=$id"
</code></pre>

<h2>The final string gotcha</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicity. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries such as <a href="http://spray.io/">Spray</a>.</p>

<h2>Conclusion</h2>

<p>I thought it would useful to compare an object-oriented and a functional approach to unifying data that share a domain-consistent notion of conversion to a string. Scala is a language that allows easy expression of both.</p>

<p>In part 3, we will look at languages that just don&rsquo;t have the <code>toString</code> problem at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toString considered harmful, part 1]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful-part-1/"/>
    <updated>2013-12-23T23:54:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful-part-1</id>
    <content type="html"><![CDATA[<p>It is easy to rant about the problems or unexpected subtleties involving the use of <a href="http://en.wikipedia.org/wiki/String_%28computer_science%29">strings</a> in programming languages. This post, however, is not so much a rant about strings as about design and meaning, with <code>toString</code> only as an obvious example.</p>

<p>I&rsquo;ll describe a pitfall that came up in my code, and a solution, and make observations about how different programming languages address or avoid this problem.</p>

<p>This is part one of a series.</p>

<!--more-->


<h2>A bug when evolving my code</h2>

<p>My example code is in Scala, but the problem illustrated actually extends to many (most?) other currently popular object-oriented languages as well, including Java (which Scala inherited <code>Object.toString</code> from), C# (<code>Object.ToString</code> stolen from Java), Ruby (<code>Object#to_s</code>), Python (<code>str</code>, which uses <code>object.__str__</code> in case of an object). (Later in the post, I discuss languages without this specific feature.)</p>

<h3>First working code</h3>

<p>Here&rsquo;s the first version of the code, which is a simplification of logic in a real application. A name is looked up to find an ID, then the ID is used to construct a URL to submit to a Web service.</p>

<pre><code class="scala">object Example {
  type Id = Int

  /**
    @param name User name to look up
    @return ID of user
    */
  def findId(name: String): Id =
    if (name == "name") {
      42
    } else {
      0
    }

  def makeUrl(id: Id): String = s"http://service.com?id=$id"

  /** Simulate making the Web request. */
  def getUrl(url: String): Unit = println(url)

  def main(args: Array[String]): Unit = {
    val id = findId("name")
    getUrl(makeUrl(id))
    // output: http://service.com?id=42
  }
}
</code></pre>

<p>In this code, everything seems fine. This was the situation in my application when it was certain that finding an ID would succeed.</p>

<p>If you don&rsquo;t know Scala, just note that <code>s"...$id"</code> is just Scala&rsquo;s string interpolation syntax that behind the scenes calls <code>id.toString</code>.</p>

<h3>Non-working code</h3>

<p>It turned out that finding an ID could fail, so I changed <code>findId</code> to return the type <code>Option[Id]</code> instead of <code>Id</code>. To get the code to compile, I had to change the type of the parameter to <code>makeUrl</code> also:</p>

<pre><code class="scala">  /**
    @param name User name to look up
    @return Some(ID of user) if found, else None
    */
  def findId(name: String): Option[Id] =
    if (name == "name") {
      Some(42)
    } else {
      None
    }

  // Oops, now this has an unintended bug!
  def makeUrl(id: Option[Id]): String = s"http://service.com?id=$id"
</code></pre>

<p>But this resulted in a bug (thankfully caught by my test suite that actually went over the Web to fetch stuff)! The bug was that the URL constructed was nothing resembling what I ever wanted to construct: <code>http://service.com?id=Some(42)</code> was being requested.</p>

<p>Furthermore, in the case of an ID not found, the URL constructed is <code>http://service.com?id=None</code>. How many of you have seen applications or Web sites or emails in which something was clearly missing and the text contained either an empty space or the string &ldquo;null&rdquo; or &ldquo;nullvalue&rdquo; such as</p>

<p>{% blockquote %}
Dear NULL,</p>

<p>You ordered NULL items.
{% endblockquote %}</p>

<p>Yup, you guessed it: someone wrote crappy code like what I just showed you, and frightening thing is, <em>it could have been me</em> and <em>it could have been you</em>.</p>

<h4>What&rsquo;s the big deal?</h4>

<p>You might think, &ldquo;Big deal, you changed your code, ran your test, and immediately found the bug, so what&rsquo;s the problem?&rdquo;</p>

<p>The problem is that I have higher standards than that. I don&rsquo;t want to rely on my tests to find my bugs. In fact, the test that went over the Web to do stuff was an <em>integration test</em>, not a <em>unit test</em>. The bug only manifested itself when the actual Web request failed. And as we see in real life, many apps are not sufficiently tested to root out all possible accidental string generations.</p>

<p>So although I caught the bug quickly, I caught it far less quickly than I wanted. I didn&rsquo;t want to even construct an obviously garbage URL like <code>http://service.com?id=Some(42)</code> at all. I prefer to have the type checker catch stupid design-level bugs up front. So I was furious at myself that I wrote code that the compiler was perfectly happy with but was obviously wrong. I had gotten lazy in more ways than one, and had been punished accordingly.</p>

<h2>A symptom of bad design</h2>

<p>There were a couple of things wrong with my original code that made it not evolve well.</p>

<h3>Don&rsquo;t use <code>toString</code></h3>

<p>First, by using string interpolation at all, I was relying on the implicit <code>toString</code> method of all objects. String interpolation is an admittedly very convenient feature that I use extensively, but now I consider it rather dangerous.</p>

<p>But even if I hadn&rsquo;t used string interpolation, I would have had to build up strings myself anyway, and would have called <code>toString</code> <em>explicitly</em>, and I would have had the same problem: changing the type of something from <code>Id</code> to <code>Option[Id]</code> does not get rid of <code>toString</code>. In fact, in object-oriented languages where <code>toString</code> is defined way up at the top, <em>everything</em> has <code>toString</code>, whether you like it or not! The best you can do is override <code>toString</code>. (Actually, Scala &ldquo;helpfully&rdquo; generates a nice <code>toString</code> override for you when you use case classes, hence the output of <code>Some(42)</code>.)</p>

<p>I consider this <em>global infection</em> a flaw in object-oriented languages that impose a set of methods on all objects whether you want them or not. <code>toString</code> is hardly the worst offending method, actually, but I&rsquo;ll save my complaints about others for later.</p>

<p>First step in cleaning up the code: make <code>toString</code> explicit:</p>

<pre><code class="scala">  /** Only ever use a String to create a URL. */
  def makeUrl(id: String): String = s"http://service.com?id=$id"

  def main(args: Array[String]): Unit = {
    val id = findId("name")
    getUrl(makeUrl(id.toString))
  }
</code></pre>

<p>(Later in the post, I will discuss alternatives to this explicit <code>toString</code>.)</p>

<h3>Primitive obsession</h3>

<p>Another design smell was that of using</p>

<pre><code class="scala">type Id = Int
</code></pre>

<p>in the first place. This is a well-known lazy practice called <a href="http://c2.com/cgi/wiki?PrimitiveObsession">primitive obsession</a>. I know better than that.</p>

<p>The solution to primitive obsession is easy: create a new wrapper type. Hence, the original code, even before the possibly failing ID lookup, should have been</p>

<pre><code class="scala">  case class Id(id: Int)

  /**
    @param name User name to look up
    @return ID of user
    */
  def findId(name: String): Id =
    if (name == "name") {
      Id(42)
    } else {
      Id(0)
    }
</code></pre>

<p>Note that this still <em>would not</em> have solved the <code>toString</code> problem, since the output would simply have been <code>http://service.com?id=Some(Id(42))</code> or the dreaded <code>http://service.com?id=None</code>!</p>

<h3><code>toString</code> is a problematic concept anyway</h3>

<p>The real problem is one that transcends programming language design. (Later in this post I&rsquo;ll show languages that don&rsquo;t have <code>toString</code> but still easily allow a similar problem.)</p>

<p>The real problem is that strings are used for <em>multiple</em> purposes. Some are used just for debugging, showing an internal representation of data. Some are used for &ldquo;human&rdquo; reading. In fact, many languages distinguish between these two purposes: Lisp has <a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_wr_pr.htm"><code>write</code>, <code>prin1</code>, <code>print</code>, <code>pprint</code></a>; Scheme has <a href="http://www.scheme.com/tspl3/io.html"><code>write</code> and <code>display</code></a>; Ruby has <a href="http://ruby-doc.org/core-2.0.0/Object.html"><code>to_s</code> and <code>to_str</code></a>; Python has <a href="http://docs.python.org/2/library/functions.html"><code>repr</code> and <code>str</code></a>.</p>

<p>One is often directed to override the &ldquo;human-oriented&rdquo; version of these mechanisms (implementing one&rsquo;s own special non-default format). In Java and Scala, that&rsquo;s <code>toString</code>. But this is precisely the problem. We are <em>encouraged</em> to abuse this built-in mechanism for getting a string from an object that is supposed to mean something in the <em>context of an application</em>. Yes, <code>Some(Id(42))</code> is a useful human-readable string, but it&rsquo;s not what I want to put into a URL for an ID parameter!</p>

<h4>Different names for different contexts</h4>

<p>Suppose you had a <code>Name</code> class, and it had fields such as <code>first</code> and <code>middle</code> and <code>last</code>. It&rsquo;s nonsensical to expect a single <code>toString</code> override to express all the different contexts in which you might want to get a single string from a full name. Sometimes you might want to generate <code>Franklin Chen</code>; other times, <code>Franklin Ming Chen</code>; other times, <code>Franklin M. Chen</code>; other times, <code>FMC</code>. The point is that there should really be a method for each of these. <code>toString</code> should be treated really as a debugging device.</p>

<p>Instead of piggybacking on <code>toString</code>, we should call a spade a spade, and define our own methods whose name is actually informative and tells us for what <em>purpose</em> we are asking for a string.</p>

<p>Let&rsquo;s refactor the code:</p>

<pre><code class="scala">  // Wrapper class
  case class Id(id: Int) {
    // Special method for turning to URL string fragment
    def toUrlString = id.toString
  }

  /**
    @param name User name to look up
    @return Some(ID of user) if found, else None
    */
  def findId(name: String): Option[Id] =
    if (name == "name") {
      Some(Id(42))
    } else {
      None
    }

  /** Only ever use a String to create a URL. */
  def makeUrl(id: String): String = s"http://service.com?id=$id"

  /** Simulate making the Web request. */
  def getUrl(url: String): Unit = println(url)

  def main(args: Array[String]): Unit = {
    val id = findId("name")
    // Will not compile because Option[Id] does not have toUrlString
    //getUrl(makeUrl(id.toUrlString))
  }
</code></pre>

<p>Now the code that was creating a junk URL will no longer compile: <code>id</code> is of type <code>Option[Id]</code> but that type does <em>not</em> have a <code>toUrlString</code> method. Mission accomplished!</p>

<p>To fix the code to get it compile, we handle both the case in which the ID is not found and the case in which it is:</p>

<pre><code class="scala">    // Will not compile because Option[Id] does not have toUrlString
    //getUrl(makeUrl(id.toUrlString))

    id match {
      case None =&gt; println("No id found!")
      case Some(n) =&gt; getUrl(makeUrl(n.toUrlString))
    }
</code></pre>

<p>Simple!</p>

<h2>The final string gotcha (to be discussed later)</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicity. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries.</p>

<p>However, at some point, data has to be turned into strings: this simply is how the Web works. It is at that point where one has to watch out. I will discuss that boundary in another post. String injection attacks are precisely a result of being sloppy about crossing that boundary.</p>

<h2>Conclusion</h2>

<p>I gave a small taste of what the <code>toString</code> problem is about, and some initial steps toward solving it through better design even if the programming language encourages us to be sloppy.</p>

<p>In part 2 of this series, I will expand on different design choices even in the situation we just examined, especially in the face of continued evolution in which there are multiple domain classes to be turned into strings.</p>

<p>Finally, there actually are quite a few languages that don&rsquo;t have this particular <code>toString</code> problem, but some have analogues to a lesser degree. Part 3 of this series will discuss the different design choices in the languages or in the standard libraries or idioms. Examples will be drawn from C, C++, Haskell, Go, Standard ML, OCaml, Rust, and JavaScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My lightning talk at Steel City Ruby 2013: "Reflections"]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/18/my-lightning-talk-at-steel-city-ruby-2013/"/>
    <updated>2013-08-18T21:54:09-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/18/my-lightning-talk-at-steel-city-ruby-2013</id>
    <content type="html"><![CDATA[<p>Below is video for, and a transcript of, my five-minute lightning talk I gave at Steel City Ruby 2013, which I reported on <a href="/blog/2013/08/18/report-on-the-second-steel-city-ruby-conference-another-life-changing-one-for-me-part-1/">here</a>.</p>

<!--more-->


<p>My 5-minute lightning talk starts at 19:35 and ends at 24:37 in the full video. I have embedded it here to start where I begin:</p>

<iframe src="//player.vimeo.com/video/72703334#t=19m35s" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>I provide below my best try at transcribing my talk, which was given impromptu without any notes or slides. Unfortunately, I spoke very quickly and I can&rsquo;t figure out every word I said; if you find any glaring omissions or errors, please let me know!</p>

<h2>Transcript</h2>

<p>Hi, my name is Franklin, and I&rsquo;ve lived in Pittsburgh fifteen years, and this is the largest audience of front of which I&rsquo;ve ever spoken in my life! (Applause.)</p>

<p>I&rsquo;m an extreme introvert, and I&rsquo;m also shy, but last year, I came to Steel City Ruby Conf, and I saw people giving talks, lightning talks, and I was inspired, so I started talking at local meetup groups, and I decided I had to speak here, and the question was, what was I going to talk about?</p>

<p>Originally, I was going to title my lightning talk &ldquo;Confessions&rdquo;, but somebody already had &ldquo;Confessions&rdquo;, so I changed it to &ldquo;Reflections&rdquo;.</p>

<p>So, how many of you have had RSI? How many of you have had RSI from spending too much time at a <a href="http://en.wikipedia.org/wiki/Keypunch">keypunch</a> machine? (I raise my hand. Laughter.) Yes, well, the first programming course I actually took, I coded on <a href="http://en.wikipedia.org/wiki/Punched_card">punch cards</a>.</p>

<p>I sat at IBM keypunch machines and typed, and got RSI. And I&rsquo;m telling you this because I may not look that old, but I&rsquo;ve been around for some time (laughter). I punched cards, I wrote <a href="http://en.wikipedia.org/wiki/COBOL">COBOL</a> programs, FORTRAN programs. We used cards and had to sort them, had to put in the compiler as well as the <a href="http://en.wikipedia.org/wiki/Job_Control_Language">Job Control Language</a> cards, put them in a deck, ship them off to some place where my teacher took them, and that&rsquo;s how we coded.</p>

<p>So, I have some reflections on that, given how long I&rsquo;ve been doing this stuff. I still don&rsquo;t know what programming really is. And that&rsquo;s why I come to places like Steel City Ruby Conf, and go to programming meetups, and I do this for many different programming languages. I try to do things better, and what I like about the Ruby community is that people are open and welcome, and they are care about quality, about different ideas. And also about things that relate to living, not just about coding.</p>

<p>And so when I was looking at the program for this year&rsquo;s conference, I was thinking, &ldquo;how can I contribute here?&rdquo; I&rsquo;m not primarily a Ruby developer. But it turns out that programming is about much more than particular programming languages. In fact, I like that at lunch today, and last year, I met people who talked about Clojure, about Python, about Scala, and other languages, and it&rsquo;s really great to have these conversations.</p>

<p>So, I&rsquo;ve seen code using &ldquo;goto&rdquo;, and seen books on <a href="http://en.wikipedia.org/wiki/Structured_programming">&ldquo;structured programming&rdquo;</a> from the 60s, when I was writing COBOL in the early 1980s. I think some of you here are younger and haven&rsquo;t had that experience of having to code with &ldquo;goto&rdquo;. So, I saw that. I saw C come into play, I saw C++, the object-oriented revolution. I saw functional programming, and now concurrency, and it&rsquo;s amazing that things keep on happening. I think it&rsquo;s a great time to be a developer.</p>

<p>The last thing I want to say is, on the program there was a talk that was just given before lunch, and it was about depression. And that made a big impression on me. I&rsquo;ve taken this moment to come out, as a 43-year-old, as having suffered from major depression, and really for about twenty-five years, I was unable to function. I even had to drop out of school twice, but I overcame that, and I think it&rsquo;s time to stop being afraid to talk about it. We need to share it with our friends and talk about what we&rsquo;ve done to overcome it and how to get help. So that&rsquo;s my final reflection.</p>

<h2>Reactions</h2>

<p>Note that the talk about depression I mentioned was the <a href="http://vimeo.com/72690223">morning talk by Greg Baugues, &ldquo;Developers and Depression&rdquo;</a>.</p>

<p>I was very moved that throughout the rest of the first day of the conference, people came up to me and thanked me for talking about my depression. Some of them said they were currently dealing with depression, or had done so. This only reinforced in my mind Greg&rsquo;s point that there is still a stigma about openly discussing depression.</p>

<h2>Some historical notes on programming</h2>

<p>I regret that I did not keep any of my old COBOL programs. I do have some old data decks of punch cards in my basement, but no code!</p>

<p>I believe that the textbook we used in my high school COBOL class in 1983 was <a href="http://books.google.com/books?id=cE0gAQAAIAAJ">Shelly and Cashman&rsquo;s &ldquo;Introduction to Computer Programming: Structured COBOL&rdquo;</a>. Basically all the programming books of the day for any language boasted of teaching structured programming. Given that, I was amused by the whole &ldquo;object-oriented programming&rdquo; fad in all texts in the 1990s. Marketing never changes.</p>

<h2>To do</h2>

<p>I still haven&rsquo;t told publicly the full story of my struggle with depression that finished its last chapter only late in 2004, when, after six years of therapy, I decided I no longer needed to see my therapist, and told her I was discontinuing my weekly visits to her I had been making since 1998. I expect to gradually roll out this story as I feel ready to tell it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steel City Ruby 2013: my second year and it radically changed my life again (part 1)]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/08/18/steel-city-ruby-2013-my-second-year-and-it-radically-changed-my-life-again-part-1/"/>
    <updated>2013-08-18T20:57:27-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/08/18/steel-city-ruby-2013-my-second-year-and-it-radically-changed-my-life-again-part-1</id>
    <content type="html"><![CDATA[<p>This year, I attended the second <a href="http://steelcityrubyconf.org/">Steel City Ruby Conference</a>, 2013. The first one, last year (2012), was a <a href="http://franklinchen.com/blog/2012/08/07/the-first-steel-city-ruby-conference-an-amazing-experience/">life-changing experience</a> for me. To my surprise, this second one also ended up being another radically transformative experience.</p>

<p>This is part 1 of my report, covering the first day (Friday). Part 2, covering the second day (Saturday), is <a href="/blog/2013/08/18/report-on-the-second-steel-city-ruby-conference-another-life-changing-one-for-me-part-2/">here</a>.</p>

<h2>Videos are up!</h2>

<p>Videos for all of the presentations of Steel City Ruby 2013 are available <a href="http://www.confreaks.com/events/scrc2013">on Confreaks</a>. I am embedding them also in my reports.</p>

<!--more-->


<h2>First things</h2>

<h3>I signed up to give a lightning talk</h3>

<p>The very first thing I did, upon arriving Friday morning, was to sign up to give a lightning talk!! This was because I was so inspired by last year&rsquo;s lightning talks. I wasn&rsquo;t sure exactly what I was going to talk about, but I knew I wanted to say something about what I learned in the past year since the first Steel City Ruby, and how my life has changed as a result, so I wanted to write &ldquo;Confessions&rdquo;, but someone had already written down a &ldquo;Confessions&rdquo; lightning talk title, so I changed it to &ldquo;Reflections&rdquo;.</p>

<h3>I signed up for the music jam</h3>

<p>Since I had just recently started learning to play ukulele, I signed up to participate in Jim Weirich&rsquo;s music jam. Last year, I had brought my Irish flute, but was too scared to actually play, and just watched as everyone had fun. I vowed that this year I would actually play with Jim and others.</p>

<h4>(Update of 2013-08-23)</h4>

<p>I wrote in more detail about <a href="http://franklinchen.com/blog/2013/08/23/another-unexpected-life-change-one-month-of-learning-to-play-ukulele/">how and why I took up ukulele and how that has changed my life</a>.</p>

<h2>Carina Zona, &ldquo;Handcrafting Community&rdquo;</h2>

<p>Carina Zona opened by asking &ldquo;What is community?&rdquo;</p>

<p>Good question: I&rsquo;ve been wondering about that myself, since becoming part of various local &ldquo;communities&rdquo; in Pittsburgh in the past couple of years. What&rsquo;s the difference between a mere &ldquo;network&rdquo; and a &ldquo;community&rdquo;?</p>

<p>She noted that she is actually an introvert, so it&rsquo;s been interesting for her to be where she is now.</p>

<p>Carina said the communities involve &ldquo;explicit values&rdquo;. I thought that was a great point. Random people gathering without explicit values don&rsquo;t really make a community.</p>

<p>The part of her talk that really encouraged me was when she urged the cultivation of &ldquo;forkable&rdquo; communities. This means being able to copy what works and take it somewhere else and develop it. I thought this was a great metaphor, because if I want to build a community, it doesn&rsquo;t make sense to just do it from scratch, but it makes sense to learn from what has worked elsewhere. In particular, the <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> that I&rsquo;m part of is still small and not yet, in my mind, the kind of established, explicit community that <a href="http://www.meetup.com/pittsburgh-ruby">Pittsburgh Ruby</a> clearly is. I have been wondering about doing something to build up more of a Pittsburgh Scala community.</p>

<p>I took from this tlak a lot to think about and act upon.</p>

<iframe src="//player.vimeo.com/video/72671955" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h2>Julie Pagano, &ldquo;I am a Front-End Web Dev (And So Can You!)&rdquo;</h2>

<p>Julie gave an interesting talk about front-end development, emphasizing that this is serious stuff. She made certain important points that I totally agree with: HTML and CSS are in fact <em>programming languages</em> in their own right, and should be thought of and used that way, with a mind toward design and <em>semantics</em>, and not just hacking around. CSS being kind of a crappy language, it&rsquo;s good to use something like SASS, which is better (for example, enabling the concept of mixins).</p>

<p>She talked about the asset pipeline, and emphasized that one should learn JavaScript, not just hack jQuery. She listed resources to learn and to adopt good practices.</p>

<p>All good advice for anyone doing front-end work!</p>

<iframe src="//player.vimeo.com/video/72682175" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h2>Greg Baugues, &ldquo;Developers and Depression&rdquo;</h2>

<p>Greg gave a talk that stunned me.</p>

<p>He talked about his personal struggle with depression (type II bipolar, specifically). Please watch his talk, <em>the whole thing</em>, whether you&rsquo;ve dealt with depression or whether you know someone with depression (and learn about the sometimes very subtle signs of it, since as he detailed in his talk, <em>depressed people do what they can to conceal their problem, out of shame</em>).</p>

<p>I made a surprising decision after watching his talk. I decided that in my yet-vaguely-thought-out lightning talk, <strong>I was going to confess to having had a very dark period of depression in my life</strong>, a period that lasted around <em>twenty-five years</em>, robbing me of a vast amount of my life. I did not want Greg&rsquo;s talk to go to waste. I wanted to make sure that people at the conference knew that there are those of us who have these kinds of secrets, and that if anyone is having a problem and needs help, that there is no shame in seeking help, because my life was saved thanks to some important help. I will say more about this later.</p>

<iframe src="//player.vimeo.com/video/72690223" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h2>Lunch</h2>

<p>Before the conference, I had signed up to volunteer (as a Pittsburgh local) to take a group of people to lunch. I did this for two reasons:</p>

<ul>
<li>I wanted to contribute this year by volunteering to help for lunch.</li>
<li>Last year, there was some overcrowding as too many people went to the same popular restaurants in the Strip District for lunch.</li>
<li>Selfishly, I wanted a food option I chose!</li>
</ul>


<p>So I took people to <a href="http://www.iloveindianspices.com/">Indian Spices</a> downtown. It has a reasonable lunch buffet (Abby and I went there once), and more to my taste than getting sandwiches somewhere.</p>

<h2>Lightning talks</h2>

<p>I ended up being scheduled for the last time slot of lightning talks. I was very nervous, had no notes or slides, and decided to simply get up there and try to make some kind of narrative out of various thoughts that had accumulated in my head for the past year, as well as Greg&rsquo;s talk on depression.</p>

<p>Given the anticipation, I confess I could not pay that much attention to the talks that preceded mine!</p>

<p>Here are all of Friday&rsquo;s lightning talks. I&rsquo;ve provided in a separate post a <a href="/blog/2013/08/18/my-lightning-talk-at-steel-city-ruby-2013/">transcript of my lightning talk, &ldquo;Reflections&rdquo;</a>.</p>

<iframe src="//player.vimeo.com/video/72703334" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h3>Angela Harms, &ldquo;A Collaborative Approach to Making&rdquo;</h3>

<p>Angela Harms gave a presentation revolving around the distinction she made between &ldquo;cooperation&rdquo; and &ldquo;collaboration&rdquo;.</p>

<p>She led the audience in a short guided meditation before proceeding further.</p>

<p>The important point she made about &ldquo;cooperation&rdquo; was that it is safe, and there is no risk, because you just show up halfway and the other person shows up halfway, and that&rsquo;s all that happens. In &ldquo;collaboration&rdquo; your goal is much higher, to be &ldquo;fully invested&rdquo;.</p>

<p>The rest of the presentation involved quotes and references to authors and books and anecdotes I had seen before. But what resonated with me was this key distinction she made between &ldquo;cooperation&rdquo; and &ldquo;collaboration&rdquo;. I thought of situations in which I have felt ashamed because I only showed up halfway. I have to think about how to change that: either show up all the way, or perhaps if I cannot do that, then step out so that someone else who can do more than me can step in.</p>

<iframe src="//player.vimeo.com/video/72700176" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h2>Ashish Dixit, &ldquo;How to be Productive on a New Team&rdquo;</h2>

<p>Ashish Dixit spoke about transitions as a programmer, bringing in his own story at Groupon. Some tidbits I took away from his talk: &ldquo;learning all the things&rdquo; is overwhelming, and working on bugs is a good way to learn about a system.</p>

<p>It was 3:30 PM. I have to confess that I was getting tired and the day was getting long!</p>

<iframe src="//player.vimeo.com/video/72745494" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h2>Jim Weirich, &ldquo;Friendly Flying Robots with Ruby&rdquo;</h2>

<p>Jim Weirich gave a demo of controlling a personal drone using a Ruby DSL he wrote wrapping around a C API. An elegant use of DSLs, definitely. One of the selling points of Ruby and Ruby culture is the creation of DSLs to make it easier and more fun to do programming that underneath can be doing low-level things, and it&rsquo;s great that people like Jim make maximum use of this capability!</p>

<iframe src="//player.vimeo.com/video/72709097" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h2>Party</h2>

<p>There was a party held at the <a href="http://www.consolenergycenter.com/">Consol Center</a> after the Friday sessions. I enjoyed socializing and eating appetizer-type food there. I was surprised and touched by how many people privately came up to me and thanked me for speaking up briefly about the depression in my past. Greg himself was present and spoke to me (he had not been present during my lightning talk but had heard from others about it).</p>

<p>I went home hoarse from talking so much with people about all sorts of things, ranging from financial investment (!) to the new programming language (in progress) <a href="http://www.rust-lang.org/">Rust</a> (which Steve Klabnik is all excited about) to my experiences this year having <a href="http://franklinchen.com/blog/2013/01/11/2013-is-my-year-of-scala/">switched to Scala</a> for almost all new work and personal coding.</p>

<h2>Conclusion</h2>

<p>I had a long and tremendously uplifting first day at the 2013 Steel City Ruby conference. My impromptu lightning talk ended up being a lot more personal than I had expected, but seemed to resonate with some people.</p>
]]></content>
  </entry>
  
</feed>
