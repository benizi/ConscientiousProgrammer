<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2013-12-24T18:46:09-05:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[toString considered harmful, part 1]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful-part-1/"/>
    <updated>2013-12-23T23:54:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful-part-1</id>
    <content type="html"><![CDATA[<p>It is easy to rant about the problems or unexpected subtleties involving the use of <a href="http://en.wikipedia.org/wiki/String_%28computer_science%29">strings</a> in programming languages. This post, however, is not so much a rant about strings as about design and meaning, with <code>toString</code> only as an obvious example.</p>

<p>I&rsquo;ll describe a pitfall that came up in my code, and a solution, and make observations about how different programming languages address or avoid this problem.</p>

<p>This is part one of a series.</p>

<!--more-->


<h2>A bug when evolving my code</h2>

<p>My example code is in Scala, but the problem illustrated actually extends to many (most?) other currently popular object-oriented languages as well, including Java (which Scala inherited <code>Object.toString</code> from), C# (<code>Object.ToString</code> stolen from Java), Ruby (<code>Object#to_s</code>), Python (<code>str</code>, which uses <code>object.__str__</code> in case of an object). (Later in the post, I discuss languages without this specific feature.)</p>

<h3>First working code</h3>

<p>Here&rsquo;s the first version of the code, which is a simplification of logic in a real application. A name is looked up to find an ID, then the ID is used to construct a URL to submit to a Web service.</p>

<p>``` scala
object Example {
  type Id = Int</p>

<p>  /**</p>

<pre><code>@param name User name to look up
@return ID of user
*/
</code></pre>

<p>  def findId(name: String): Id =</p>

<pre><code>if (name == "name") {
  42
} else {
  0
}
</code></pre>

<p>  def makeUrl(id: Id): String = s"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"</p>

<p>  /<em>* Simulate making the Web request. </em>/
  def getUrl(url: String): Unit = println(url)</p>

<p>  def main(args: Array[String]): Unit = {</p>

<pre><code>val id = findId("name")
getUrl(makeUrl(id))
// output: http://service.com?id=42
</code></pre>

<p>  }
}
```</p>

<p>In this code, everything seems fine. This was the situation in my application when it was certain that finding an ID would succeed.</p>

<p>If you don&rsquo;t know Scala, just note that <code>s"...$id"</code> is just Scala&rsquo;s string interpolation syntax that behind the scenes calls <code>id.toString</code>.</p>

<h3>Non-working code</h3>

<p>It turned out that finding an ID could fail, so I changed <code>findId</code> to return the type <code>Option[Id]</code> instead of <code>Id</code>. To get the code to compile, I had to change the type of the parameter to <code>makeUrl</code> also:</p>

<p>``` scala
  /**</p>

<pre><code>@param name User name to look up
@return Some(ID of user) if found, else None
*/
</code></pre>

<p>  def findId(name: String): Option[Id] =</p>

<pre><code>if (name == "name") {
  Some(42)
} else {
  None
}
</code></pre>

<p>  // Oops, now this has an unintended bug!
  def makeUrl(id: Option[Id]): String = s"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"
```</p>

<p>But this resulted in a bug (thankfully caught by my test suite that actually went over the Web to fetch stuff)! The bug was that the URL constructed was nothing resembling what I ever wanted to construct: <code>http://service.com?id=Some(42)</code> was being requested.</p>

<p>Furthermore, in the case of an ID not found, the URL constructed is <code>http://service.com?id=None</code>. How many of you have seen applications or Web sites or emails in which something was clearly missing and the text contained either an empty space or the string &ldquo;null&rdquo; or &ldquo;nullvalue&rdquo; such as</p>

<p><blockquote><p>Dear NULL,</p></p><p><p>You ordered NULL items.</p></blockquote></p>

<p>Yup, you guessed it: someone wrote crappy code like what I just showed you, and frightening thing is, <em>it could have been me</em> and <em>it could have been you</em>.</p>

<h4>What&rsquo;s the big deal?</h4>

<p>You might think, &ldquo;Big deal, you changed your code, ran your test, and immediately found the bug, so what&rsquo;s the problem?&rdquo;</p>

<p>The problem is that I have higher standards than that. I don&rsquo;t want to rely on my tests to find my bugs. In fact, the test that went over the Web to do stuff was an <em>integration test</em>, not a <em>unit test</em>. The bug only manifested itself when the actual Web request failed. And as we see in real life, many apps are not sufficiently tested to root out all possible accidental string generations.</p>

<p>So although I caught the bug quickly, I caught it far less quickly than I wanted. I didn&rsquo;t want to even construct an obviously garbage URL like <code>http://service.com?id=Some(42)</code> at all. I prefer to have the type checker catch stupid design-level bugs up front. So I was furious at myself that I wrote code that the compiler was perfectly happy with but was obviously wrong. I had gotten lazy in more ways than one, and had been punished accordingly.</p>

<h2>A symptom of bad design</h2>

<p>There were a couple of things wrong with my original code that made it not evolve well.</p>

<h3>Don&rsquo;t use <code>toString</code></h3>

<p>First, by using string interpolation at all, I was relying on the implicit <code>toString</code> method of all objects. String interpolation is an admittedly very convenient feature that I use extensively, but now I consider it rather dangerous.</p>

<p>But even if I hadn&rsquo;t used string interpolation, I would have had to build up strings myself anyway, and would have called <code>toString</code> <em>explicitly</em>, and I would have had the same problem: changing the type of something from <code>Id</code> to <code>Option[Id]</code> does not get rid of <code>toString</code>. In fact, in object-oriented languages where <code>toString</code> is defined way up at the top, <em>everything</em> has <code>toString</code>, whether you like it or not! The best you can do is override <code>toString</code>. (Actually, Scala &ldquo;helpfully&rdquo; generates a nice <code>toString</code> override for you when you use case classes, hence the output of <code>Some(42)</code>.)</p>

<p>I consider this <em>global infection</em> a flaw in object-oriented languages that impose a set of methods on all objects whether you want them or not. <code>toString</code> is hardly the worst offending method, actually, but I&rsquo;ll save my complaints about others for later.</p>

<p>First step in cleaning up the code: make <code>toString</code> explicit:</p>

<p>``` scala
  /<em>* Only ever use a String to create a URL. </em>/
  def makeUrl(id: String): String = s"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"</p>

<p>  def main(args: Array[String]): Unit = {</p>

<pre><code>val id = findId("name")
getUrl(makeUrl(id.toString))
</code></pre>

<p>  }
```</p>

<p>(Later in the post, I will discuss alternatives to this explicit <code>toString</code>.)</p>

<h3>Primitive obsession</h3>

<p>Another design smell was that of using</p>

<p><code>scala
type Id = Int
</code></p>

<p>in the first place. This is a well-known lazy practice called <a href="http://c2.com/cgi/wiki?PrimitiveObsession">primitive obsession</a>. I know better than that.</p>

<p>The solution to primitive obsession is easy: create a new wrapper type. Hence, the original code, even before the possibly failing ID lookup, should have been</p>

<p>``` scala
  case class Id(id: Int)</p>

<p>  /**</p>

<pre><code>@param name User name to look up
@return ID of user
*/
</code></pre>

<p>  def findId(name: String): Id =</p>

<pre><code>if (name == "name") {
  Id(42)
} else {
  Id(0)
}
</code></pre>

<p>```</p>

<p>Note that this still <em>would not</em> have solved the <code>toString</code> problem, since the output would simply have been <code>http://service.com?id=Some(Id(42))</code> or the dreaded <code>http://service.com?id=None</code>!</p>

<h3><code>toString</code> is a problematic concept anyway</h3>

<p>The real problem is one that transcends programming language design. (Later in this post I&rsquo;ll show languages that don&rsquo;t have <code>toString</code> but still easily allow a similar problem.)</p>

<p>The real problem is that strings are used for <em>multiple</em> purposes. Some are used just for debugging, showing an internal representation of data. Some are used for &ldquo;human&rdquo; reading. In fact, many languages distinguish between these two purposes: Lisp has <a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_wr_pr.htm"><code>write</code>, <code>prin1</code>, <code>print</code>, <code>pprint</code></a>; Scheme has <a href="http://www.scheme.com/tspl3/io.html"><code>write</code> and <code>display</code></a>; Ruby has <a href="http://ruby-doc.org/core-2.0.0/Object.html"><code>to_s</code> and <code>to_str</code></a>; Python has <a href="http://docs.python.org/2/library/functions.html"><code>repr</code> and <code>str</code></a>.</p>

<p>One is often directed to override the &ldquo;human-oriented&rdquo; version of these mechanisms (implementing one&rsquo;s own special non-default format). In Java and Scala, that&rsquo;s <code>toString</code>. But this is precisely the problem. We are <em>encouraged</em> to abuse this built-in mechanism for getting a string from an object that is supposed to mean something in the <em>context of an application</em>. Yes, <code>Some(Id(42))</code> is a useful human-readable string, but it&rsquo;s not what I want to put into a URL for an ID parameter!</p>

<h4>Different names for different contexts</h4>

<p>Suppose you had a <code>Name</code> class, and it had fields such as <code>first</code> and <code>middle</code> and <code>last</code>. It&rsquo;s nonsensical to expect a single <code>toString</code> override to express all the different contexts in which you might want to get a single string from a full name. Sometimes you might want to generate <code>Franklin Chen</code>; other times, <code>Franklin Ming Chen</code>; other times, <code>Franklin M. Chen</code>; other times, <code>FMC</code>. The point is that there should really be a method for each of these. <code>toString</code> should be treated really as a debugging device.</p>

<p>Instead of piggybacking on <code>toString</code>, we should call a spade a spade, and define our own methods whose name is actually informative and tells us for what <em>purpose</em> we are asking for a string.</p>

<p>Let&rsquo;s refactor the code:</p>

<p>``` scala
  // Wrapper class
  case class Id(id: Int) {</p>

<pre><code>// Special method for turning to URL string fragment
def toUrlString = id.toString
</code></pre>

<p>  }</p>

<p>  /**</p>

<pre><code>@param name User name to look up
@return Some(ID of user) if found, else None
*/
</code></pre>

<p>  def findId(name: String): Option[Id] =</p>

<pre><code>if (name == "name") {
  Some(Id(42))
} else {
  None
}
</code></pre>

<p>  /<em>* Only ever use a String to create a URL. </em>/
  def makeUrl(id: String): String = s"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"</p>

<p>  /<em>* Simulate making the Web request. </em>/
  def getUrl(url: String): Unit = println(url)</p>

<p>  def main(args: Array[String]): Unit = {</p>

<pre><code>val id = findId("name")
// Will not compile because Option[Id] does not have toUrlString
//getUrl(makeUrl(id.toUrlString))
</code></pre>

<p>  }
```</p>

<p>Now the code that was creating a junk URL will no longer compile: <code>id</code> is of type <code>Option[Id]</code> but that type does <em>not</em> have a <code>toUrlString</code> method. Mission accomplished!</p>

<p>To fix the code to get it compile, we handle both the case in which the ID is not found and the case in which it is:</p>

<p>``` scala</p>

<pre><code>// Will not compile because Option[Id] does not have toUrlString
//getUrl(makeUrl(id.toUrlString))

id match {
  case None =&gt; println("No id found!")
  case Some(n) =&gt; getUrl(makeUrl(n.toUrlString))
}
</code></pre>

<p>```</p>

<p>Simple!</p>

<h2>The final string gotcha (to be discussed later)</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicity. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries.</p>

<p>However, at some point, data has to be turned into strings: this simply is how the Web works. It is at that point where one has to watch out. I will discuss that boundary in another post. String injection attacks are precisely a result of being sloppy about crossing that boundary.</p>

<h2>Conclusion</h2>

<p>I gave a small taste of what the <code>toString</code> problem is about, and some initial steps toward solving it through better design even if the programming language encourages us to be sloppy.</p>

<p>In part 2 of this series, I will expand on different design choices even in the situation we just examined, especially in the face of continued evolution in which there are multiple domain classes to be turned into strings.</p>

<p>Finally, there actually are quite a few languages that don&rsquo;t have this particular <code>toString</code> problem, but some have analogues to a lesser degree. Part 3 of this series will discuss the different design choices in the languages or in the standard libraries or idioms. Examples will be drawn from C, C++, Haskell, Go, Standard ML, OCaml, Rust, and JavaScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Ruby lightning talk night: RVM, business logic with Rails, IRC, rspec-given, Vagrant]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/07/11/pittsburgh-ruby-lightning-talk-night/"/>
    <updated>2013-07-11T20:53:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/07/11/pittsburgh-ruby-lightning-talk-night</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/pittsburgh-ruby">Pittsburgh Ruby meetup</a> held a <a href="http://www.meetup.com/pittsburgh-ruby/events/120200102">lightning talks session</a>.</p>

<p>Originally, I was not going to present anything, since I did not feel that I had anything exciting to quickly share (I have not been doing much Ruby programming lately at all other than <a href="/blog/2013/06/29/nil-non-determinism-exceptions">debugging my Octopress-generated blog</a>), and don&rsquo;t like talking just to talk.</p>

<p>But at the very last minute, just half an hour before the meeting, I noticed some developments in the world of <a href="http://rspec.info/">RSpec</a> announced on Twitter by Jim Weirich, and I got excited enough that I decided to talk about his <a href="https://github.com/jimweirich/rspec-given"><code>rspec-given</code></a>, which was just released at version 3.0.0.</p>

<!--more-->


<h2>Colin, on <code>rvm_recommended_ruby</code></h2>

<p>Colin briefly talked about how he likes to automate things, and therefore, in the context of using <a href="https://rvm.io/">RVM</a>, created <a href="https://github.com/wayneeseguin/rvm/pull/1074"><code>rvm_recommended_ruby</code></a>.</p>

<h2>Jon, on business logic in pure Ruby</h2>

<p>Jon gave a short summary of his <a href="http://jonathandean.com/2013/07/business-logic-in-pure-ruby/">blog post</a> on not putting all business logic into Rails models, but instead, decoupling from <code>ActiveRecord</code> and Rails altogether. This is a theme that has risen a lot in recent years in the Rails community.</p>

<h2>Carol, on how to use IRC to get help</h2>

<p>Carol talked about how to use IRC to get help when working on projects.</p>

<h2>Me, on <code>rspec-given</code></h2>

<p>I talked about cool features in <a href="https://github.com/jimweirich/rspec-given"><code>rspec-given</code></a>.</p>

<p><code>rspec-given</code> has actually been around for a while, but I had not used in the past. I plan to use it in the future.</p>

<p>It provides <code>Given</code>, <code>When</code>, <code>Then</code>, and <code>And</code> for writing specifications.</p>

<p>Also, now there is <code>Invariant</code>, which I think is a great addition to <code>RSpec</code>, enabling an easy way to check invariants as part of every example.</p>

<p>Finally, I love the new natural assertions, the ability to write stuff like</p>

<p><code>ruby
Then { stack.top == :second_item }
</code></p>

<p>instead of</p>

<p><code>ruby
Then { expect(stack.top).to eq(:second_item) }
</code></p>

<p>while <code>RSpec</code> automatically generates useful messages on failure.</p>

<h2>Colin again, on Vagrant</h2>

<p>Since all the lightning talks were done in less than half an hour, Carol called for more volunteers to talk about something. Colin ended up impromptu talking about his use of <a href="http://www.vagrantup.com/">Vagrant</a> to create development environments.</p>

<p>There was particular interest in how to share files with the host file system. Vagrant makes this easy.</p>

<p>Vagrant is great. Use it.</p>

<h2>Ruby meets Python</h2>

<p>Carol reminded everyone that coming up is a Ruby/Python joint social.</p>

<h2>Conclusion</h2>

<p>A relatively short Pittsburgh Ruby meetup, and with a smaller crowd than some others in the past, but a fun and instructive one.</p>

<p>Don&rsquo;t forget, <a href="http://steelcityruby.org/">Steel City Ruby Conference 2013</a> is in a month! I&rsquo;m <a href="http://franklinchen.com/blog/2012/08/07/the-first-steel-city-ruby-conference-an-amazing-experience/">excited to attend again</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh JavaScript meetup: functional programming]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/07/10/pittsburgh-javascript-meetup-functional-programming/"/>
    <updated>2013-07-10T22:37:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/07/10/pittsburgh-javascript-meetup-functional-programming</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://photos3.meetupstatic.com/photos/event/7/f/6/e/global_239372622.jpeg">http://photos3.meetupstatic.com/photos/event/7/f/6/e/global_239372622.jpeg</a>" title="Pittsburgh JavaScript" ></p>

<p>Because the topic of the featured presentation by <a href="http://idiotcoder.com/">Richard Ashkettle</a> was <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a>, I made sure to attend my first meeting of the newly revived <a href="http://www.meetup.com/Pittsburgh-JavaScript/">Pittsburgh JavaScript meetup</a>. (This was actually the third meeting of the revived Pittsburgh JavaScript group, but I hadn&rsquo;t been able to make it to the first two.)</p>

<p>I&rsquo;d met Richard earlier, a month ago at <a href="http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/">Pittsburgh TechFest</a>. He does not claim to be an expert at functional programming, but is enthusiastic about concepts and techniques that he can and does apply to improving software quality in many dimensions. Since I have been a functional programming enthusiast and practitioner for twenty years, I had these goals in attending his presentations:</p>

<ul>
<li>evaluate what Richard and others have done with, and think is important about,  functional programming</li>
<li>offer a few corrections, elaborations, suggestions as appropriate for the situation</li>
<li>gather information on how I may be able to effectively explain functional programming to those who are new to it</li>
</ul>


<!--more-->


<h2>History of the Pittsbugh JavaScript meetup group</h2>

<p>Two years ago, in 2011, I had attended the <a href="http://www.meetup.com/Pittsburgh-JavaScript-Developers">first incarnation of the group</a> faithfully, attending several months of meetings before it disbanded when the founder left Pittsburgh. I learned quite a bit from those meetings.</p>

<p>Two years is a long time in the world of JavaScript. Looking back at <a href="http://franklinchen.com/blog/2011/09/27/when-jquery-attacks/">one of my blog posts reporting on the old JavaScript meetup group</a>, I am amused by how anachronistic that feels to me today, as in my mention of <a href="http://sproutcore.com/">Sproutcore</a>, which I never hear about any more.</p>

<h2>Up front: my take on the secret of JavaScript</h2>

<p>Here are some observations (not novel) I have about JavaScript, to set the stage for further discussion:</p>

<ul>
<li>JavaScript is full of horrible, disgusting Bad Parts.</li>
<li>JavaScript has only one shiny Good Part: it has first-class functions.</li>
<li>People manage to get a lot of amazingly cool and important stuff done using JavaScript, so take it seriously.</li>
</ul>


<h2>Comments on Richard&rsquo;s presentation</h2>

<h3>Immutability and &ldquo;functional languages&rdquo;</h3>

<p>Richard talked about <a href="http://en.wikipedia.org/wiki/Immutable_object">immutability</a> as being part of what &ldquo;functional programming&rdquo; is about.</p>

<p>Yes, it is, and in addition, common best practices in many programming languages these days argue for favoring immutability. I want to emphasize that you don&rsquo;t have to go full-blown into a specialized &ldquo;functional language&rdquo; in order to take advantage of immutability as desired: for example, this tip has long since been known as at least a &ldquo;design pattern&rdquo; in the <a href="/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/">Java world</a>, in the <a href="http://www.harukizaemon.com/blog/2010/03/01/functional-programming-in-object-oriented-languages/">Ruby world</a>, and basically everywhere else.</p>

<p>Richard suggested that &ldquo;functional languages&rdquo; don&rsquo;t allow mutation. By my definition, this is <em>not</em> actually true.  I didn&rsquo;t raise an objection during the talk because I didn&rsquo;t want to sidetrack it, but here I have space to elaborate a little. I would argue (but that would have to be another blog post) that the cleanest, most intuitive and novice-accessible &ldquo;functional languages&rdquo;) are those in the <a href="http://en.wikipedia.org/wiki/ML_%28programming_language%29">ML</a> family originally developed in the 1970s and lives on today&rsquo;s popular, industrial-strength dialects of <a href="http://en.wikipedia.org/wiki/Standard_ML">Standard ML</a>, <a href="http://ocaml.org/">OCaml</a>, and <a href="http://fsharp.org/">F#</a>.</p>

<p><em>ML fully supports mutation</em>, through <a href="http://en.wikibooks.org/wiki/Standard_ML_Programming/Types#References">reference cells</a>.</p>

<p>Personally, because of notions like this, I&rsquo;ve been thinking that maybe it would be best if we all stopped using the term &ldquo;functional language&rdquo;, because it has sadly become misleading and ambiguous. In particular, people instantly think &ldquo;Haskell&rdquo; when they use the word &ldquo;functional language&rdquo;, when in fact Haskell is a very unusual, unique language (and ecosystem) among languages that one could call &ldquo;functional&rdquo;.</p>

<h3>Expressions, functions, evaluation, and values</h3>

<p>As Richard put it, &ldquo;favor expressions evaluating to a value&rdquo;. The focus of functional programming is on <em>returning</em> a value, from an expression that includes function calls, rather than munging some mutable global state, or modifying state through a reference passed into a function as a parameter.</p>

<h3>Recursion vs. looping?</h3>

<p>Richard noted that one characteristic of functional programming is the use of recursion instead of looping. He gave examples of writing tail-recursive functions.</p>

<p>One nitpick (which again, I did not bring up during the talk): recursion and looping (as in through &ldquo;normal&rdquo; constructs such as <code>while</code> and <code>for</code>) are <em>not</em> actually opposed. I will write a blog post later about why conventional looping is best thought of as a derived construct built on top of recursion, and why it might be best to consider conventional looping to be a historical accident and mistake (but a very useful invention given the historical circumstances).</p>

<h4>Efficiency of recursion?</h4>

<p>Also, people brought up the topic of efficiency. I have learned over the years that for many people, the word &ldquo;recursion&rdquo; seems to immediately trigger the word &ldquo;efficiency&rdquo;. Richard did a great job in mentioning that <a href="http://wiki.ecmascript.org/doku.php?id=harmony:proper_tail_calls">EMCAScript 6 is going to have proper tail calls (also called tail call optimization)</a>, which will make tail recursion equivalent to ordinary looping in terms of space usage. This is <em>hugely important</em> news, of course. This mandate shows how serious JavaScript is about embracing functional programming.</p>

<h4>Recursion for parallelism</h4>

<p>But beyond the issue tail recursion, I felt I had to point out that recursive algorithms can offer actual <em>speedup</em>. The classic examples, of course, are the <a href="http://www.cs.cmu.edu/~scandal/nesl/alg-sequence.html#quicksort">parallel speedups of divide-and-conquer algorithms such as quicksort that use recursion</a>. If you expressed the algorithms by removing the recursion (with a hand-rolled stack as often taught in courses), you would destroy the inherent parallelism. So in the world of parallelism, you want your code to stay naturally recursive! As <a href="http://adambom.github.io/parallel.js/">parallel computing comes to JavaScript</a>, keep this in mind!</p>

<h3>Higher-order functions, first-class functions</h3>

<p>Richard: &ldquo;A function is an object&rdquo;.</p>

<p>It&rsquo;s really as simple as that. Functions can be created, stored, passed around. Functions can return other functions.</p>

<p>It&rsquo;s amazing, but I claim that this is JavaScript&rsquo;s one Good Part, its killer feature that surprisingly many languages don&rsquo;t have. And it&rsquo;s the one feature that is used <em>all the time</em>, not just in esoteric code. From the very beginning, JavaScript had first-class functions, to support callbacks for client code in Web browsers. and <a href="http://nodejs.org/">Node</a> server-side code is nothing if not a whole bunch of <code>function (...)</code>. Without closures and first-class functions, JavaScript would have been completely useless. Thank goodness <a href="http://brendaneich.com/2008/04/popularity/">Brendan Eich was inspired by the Scheme functional language</a>.</p>

<h4>No methods!</h4>

<p>JavaScript not only provides full-fledged functions, but ironically, its weirdest feature, the prototype-based inheritance instead of class-based inheritance, inadvertently has prevented &ldquo;interference&rdquo; from the conventional class-based object-oriented world, which is mostly based not on functions, but on <a href="https://en.wikipedia.org/wiki/Method_%28computer_programming%29">methods</a> that interference with functions because they are meant to <em>replace</em> functions (since according to &ldquo;pure&rdquo; object-oriented thinking, functions are evil and computation should involve method calls on objects). <em>JavaScript does not (really) have methods</em>; it only simulates them, by storing bona fide closures into fields of (map) objects. For example, if you use <a href="http://emberjs.com">Ember</a>, the following code illustrates how the building blocks of typical JavaScript programming involve creating lots of <code>function</code>s: <code>valueWillChange</code> and <code>valudDidChange</code> are just functions. They are not special things, &ldquo;methods&rdquo;.</p>

<p>``` javascript
App.PersonView = Ember.View.extend({
  valueWillChange: function (obj, keyName, value) {</p>

<pre><code>this.changingFrom = value;
</code></pre>

<p>  }.observesBefore(&lsquo;content.value&rsquo;),
  valueDidChange: function(obj, keyName, value) {</p>

<pre><code>  // only run if updating a value already in the DOM
  if(this.get('state') === 'inDOM') {
      var color = value &gt; this.changingFrom ? 'green' : 'red';
      // logic
  }
</code></pre>

<p>  }.observes(&lsquo;content.value&rsquo;)
});
```</p>

<h3>Examples</h3>

<p>Richard gave some standard examples of using higher-order functions such as <code>map</code> and <code>filter</code> and <code>foreach</code> as provided in various popular JavaScript libraries such as <a href="http://underscorejs.org/">Underscore</a>.</p>

<p>As a matter of style, he recommended against long, obscure one-liners that involve chaining. I agree. For readability and testability of pipelines, I have found that it is good to break things up into intermediate steps. (Just <a href="/blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module/">recently</a>, Tim Lesher also recommended against stupidity masking as excessive cleverness in his Python lightning talk about functional programming with <code>itertools</code>.)</p>

<h3>Monads?!</h3>

<p>Regrettably, Richard brought up the term <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29">&ldquo;monads&rdquo;</a>. I&rsquo;m close to thinking that this word should be <a href="http://fsharpforfunandprofit.com/posts/why-i-wont-be-writing-a-monad-tutorial/">banned</a>, because too many confusions about them have ruined the word. I have yet decided what the best alternative phrase might be. Maybe something like &ldquo;computational context&rdquo;?</p>

<p>Ironically, Richard admitted he was going to abuse the word, and for the sake of example, he said, he was going to say that &ldquo;jQuery is a monad&rdquo;. I didn&rsquo;t want to derail his talk, and since he admitted the abuse, I decided there would be a better time to address this topic.</p>

<p>It was interesting to me, however, that he gathered that the interesting thing about jQuery, and why he wanted to call it a monad, was the chaining of calls in jQuery. I need to think of a good way to deal with this intuition when I get around to explaining monads.</p>

<h3>Partial application and currying</h3>

<p>Richard explained both partial application and currying, then he wondered when one would in practice write a curried function.</p>

<p>I said (but not very convincingly, I think) that you would write a curried function if you knew you would otherwise have to manually do a bunch of partial application. I have to confess that was a weak answer. I think the practical situation in JavaScript is that full-scale up-front currying is not useful.</p>

<h3>Libraries</h3>

<p>Richard recommended checking out the following libraries, especially Lo-Dash, which he judges to be faster than Underscore:</p>

<ul>
<li><a href="http://underscorejs.org/">Underscore</a></li>
<li><a href="http://lodash.com/">Lo-Dash</a></li>
<li><a href="http://osteele.com/sources/javascript/functional/">Functional JavaScript</a></li>
</ul>


<h2>Questions and answers</h2>

<p>There were many interesting questions raised after the presentation.</p>

<h3>Introducing functional programming into a team environment</h3>

<p>Someone asked Richard a good question about whether it&rsquo;s appropriate to, say, start using Underscore at work and expecting other team members to learn how to use it. Is it fair to expect others to learn a new way of doing things that might seem weird?</p>

<p>My point of view is that there&rsquo;s nothing specific about functional programming when it comes to questions like this. The same question comes up when evaluating a particular programming language or a particular MVC framework or a particular version control system, and the answer involve considering all the different realities of who is comfortable with what, whether it is worth learning something new, what the advantages and disadvantages are, how much the decision will affect delivery of business value.</p>

<h3>Growing parameter list for a function vs. passing in a big object</h3>

<p>One concern brought up is that if you&rsquo;re programming in a functional style, you can end up being faced with ever-growing parameter lists for a function to pass in everything that it needs. One solution is to create a big object to stick everything into it that might be needed (for example, a configuration object instead of separate flag parameters). Is this overkill?</p>

<p>Also, <a href="http://tonylukasavage.com/">Tony Lukasavage</a> emphasized that his concern was in the context of the need to evolve an existing API without breaking customers' client code that uses it.</p>

<p>My first note would be that API design is tricky and checking out <a href="/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/">some resources on API design</a> is very helpful.</p>

<p>Regarding parameter lists, Richard noted that you might have a design problem if you have a function that needs to know about so many things it depends on. You may want to refactor the function (of course, in the context of evolving a mature API that customers depend on, it may be too late, unfortunately) and the data structures passed in. For example, if you have a number of functions that all take as parameters a <code>firstName</code> and <code>lastName</code>, then maybe you want a single <code>name</code> parameter instead.</p>

<p>I suggested also that if certain flags are not always needed, then instead of a huge configuration object, how about simply having separate but related functions (in a language supporting overloading, you could provide overloaded functions, although the topic of overloading is another large one to discuss later), each of which takes only the flags the client cares about. Of course, as some people pointed out, then you might end up with annoyingly long and specific function names.</p>

<p>Nobody said designing an API is easy.</p>

<h3>Do I actually do functional programming?</h3>

<p>One question I got, since before the meetup, I had indicated having experience with functional programming, was basically, do I actually use it in JavaScript and elsewhere. The answer is, yes. As I&rsquo;ve mentioned, you don&rsquo;t have use a special language in order to program in this way, although it&rsquo;s much easier and more efficient to use a language that is tailored to support it. Most of the code I&rsquo;ve written in the past fifteen years has attempted to be primarily functional in style, whatever language I&rsquo;m using for work (mostly Java, Perl, Python, and recently Scala). I don&rsquo;t do this out of some kind of ideology, but because it works well in getting stuff done. Before adopting a primarily functional style of programming, I spent years working in traditional imperative and object-oriented styles, and empirically, that was less pleasant.</p>

<h4>Do I do functional programming in JavaScript?</h4>

<p>I have not actually done any JavaScript programming for work since doing some UI prototyping two years ago. I don&rsquo;t know when I&rsquo;ll return to doing front end work, but meanwhile, I am interested in doing some Web browser stuff for personal projects, so I try to keep up to date on developments in the JavaScript world.</p>

<p>One thing that has been interesting that I need to check out is the rise of <a href="http://en.wikipedia.org/wiki/Functional_reactive_programming">functional reactive programming (FRP)</a> libraries for JavaScript, such as <a href="https://github.com/raimohanska/bacon.js">Bacon.js</a>. FRP was originally invented in the 1990s by Conal Elliott in the context of Haskell, but almost twenty years later, has finally spread well beyond that now to mainstream visibility and use. For example, Microsoft has thrown its weight behind <a href="http://rx.codeplex.com/">Reactive Extensions (Rx)</a>, which started out in the .NET world, but Microsoft then ported it to JavaScript, C/C++, Python, and Ruby.</p>

<h2>Conclusion</h2>

<p>I was happy to see interest in functional programming in the local JavaScript community. Richard gave an introductory talk on it that I thought was very useful as a starting point for those who are new to it. I made note of some omissions or inaccuracies in order to improve my thinking about how I can contribute in the future to improving people&rsquo;s understanding and application of functional programming principles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nil, non-determinism, exceptions: a journey in debugging the software that generates my blog]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions/"/>
    <updated>2013-06-29T18:15:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions</id>
    <content type="html"><![CDATA[<p>I mentioned in my <a href="/blog/2013/06/24/introducing-this-new-programming-blog/">initial post for this blog</a> that I have had some problems with the software I use to generate my personal blog, <a href="http://octopress.org/">Octopress</a>, and was thinking of migrating to a different platform that might in some ways be more robust to such problems. I ended up not doing so, and I still stand by that decision, but I just yet again ran into a problem with Octopress.</p>

<p>Here I report on how I figured out the problem and begin a conversation about the nature of error handling and API design.</p>

<!--more-->


<h2>A disclaimer</h2>

<p>I want to emphasize that although I will be critiquing some code, I do not mean to imply that I am a perfect programmer or that this software is of really poor quality. I have written software in the past that has crapped out with <code>null</code> or <code>nil</code> errors. In addition, the fact that I basically trust and use this software to drive my blogs is a reflection of the fact that it mostly works. Almost all software that has been written, is being written now, and will be written in the future has bugs. Every day we all trust and use software that we know has bugs. And this blogging platform I use is the product of many, many volunteers who contribute to the world through open source through the goodness of their hearts. I happily use this software, warts and all, and am grateful to everyone who works to maintain and improve it!</p>

<h2>Blog generation</h2>

<p>The problem arose when I tried to generate <a href="http://franklinchen.com/">my personal blog</a>. I got a <a href="http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/"><code>nil</code></a> failure.</p>

<p>Here&rsquo;s the error message (I have omitted the 46-line stack trace):</p>

<p>``` console</p>

<pre><code>  Generating... Liquid Exception: undefined method `sub' for nil:NilClass in atom.xml
</code></pre>

<p>```</p>

<p>This is, unfortunately, an example of an error message that is next to useless, and should <em>never</em> appear. I have stated that <a href="/blog/2013/06/26/we-should-not-create-this-kind-of-terrible-error-message-for-the-end-user/">we as programmers should not generate useless end user error messages</a>, and of course, in context, I am an end user of the blog generating software I use.</p>

<h2>Debugging and finding the root cause</h2>

<p>Thanks to all the Ruby libraries being open source and installed on my machine, by using the stack trace and <code>debugger</code>, I figured out the immediate cause of the stray <code>nil</code>.</p>

<p>It turns out that Octopress uses Jekyll, which uses <a href="https://github.com/tmm1/pygments.rb">pygments.rb</a> to do HTML highlighting of code blocks. (I use Octopress precisely because of its built-in support for code block highlighting.)</p>

<p>The bug is that the code in Jekyll that does syntax highlighting using Pygments makes an assumption that the return value of <code>Pygments.highlight()</code> is never <code>nil</code>:</p>

<p>``` ruby</p>

<pre><code>          @renderer ||= Class.new(Redcarpet::Render::HTML) do
            def block_code(code, lang)
              lang = lang &amp;&amp; lang.split.first || "text"
              output = add_code_tags(
                Pygments.highlight(code, :lexer =&gt; lang, :options =&gt; { :encoding =&gt; 'utf-8' }),
                lang
              )
            end

            def add_code_tags(code, lang)
              code = code.sub(/&lt;pre&gt;/,'&lt;pre&gt;&lt;code class="' + lang + '"&gt;')
              code = code.sub(/&lt;\/pre&gt;/,"&lt;/code&gt;&lt;/pre&gt;")
            end
          end
</code></pre>

<p>```</p>

<p>Well, it <em>can</em> be <code>nil</code> and was for me, and therefore <code>add_code_tags</code> was calling <code>code.sub()</code> with <code>code</code> being <code>nil</code>.</p>

<p>The bug exists in all the more recent versions of pygments.rb, including 0.4.2 (which is used for my personal blog) and 0.3.7 (which is used for this blog) and the latest released version, 0.5.1. The bug was actually reported by someone two weeks ago, and I added extra commentary, but <a href="https://github.com/tmm1/pygments.rb/issues/78">it has not yet been fixed</a>, so I plan to contribute a fix and submit a pull request.</p>

<h2>Whose responsibility to check for <code>nil</code>?</h2>

<p>Whenever there is an error, one has to ask whose responsibility it was to</p>

<ul>
<li>detect the error</li>
<li>handle the error</li>
</ul>


<p>I think it is poor practice to engage in random and spotty &ldquo;defensive programming&rdquo; that checks for <code>nil</code> here and there, willy-nilly, just to avoid a big program crash. There should be clearly delineated boundaries of error handling.</p>

<p>In this case, it is surprising that a syntax highlighter for some text could return <code>nil</code>. One would think that if a syntax highlighter got confused, it could return the text verbatim, for example, without any special formatting. (By the way, don&rsquo;t get me started on the abominable use of HTML string hacking in this code instead of, say, building a proper HTML AST; I&rsquo;ll write about that topic later.)</p>

<h2>Documentation of API</h2>

<p>Unfortunately, the documentation of the Pygments API was incomplete in <code>lib/pygments/popen.rb</code>, where <code>highlight</code> is defined:</p>

<p>``` ruby</p>

<pre><code># Public: Highlight code.
#
# Takes a first-position argument of the code to be highlighted, and a
# second-position hash of various arguments specifiying highlighting properties.
def highlight(code, opts={})
  # If the caller didn't give us any code, we have nothing to do,
  # so return right away.
  return code if code.nil? || code.empty?

  # Callers pass along options in the hash
  opts[:options] ||= {}

  # Default to utf-8 for the output encoding, if not given.
  opts[:options][:outencoding] ||= 'utf-8'

  # Get back the string from mentos and force encoding if we can
  str = mentos(:highlight, nil, opts, code)
  str.force_encoding(opts[:options][:outencoding]) if str.respond_to?(:force_encoding)
  str
end
</code></pre>

<p>```</p>

<h2>A problem with dynamically typed language culture</h2>

<p>The documentation doesn&rsquo;t actually fully specify what the arguments can be, and does not specify what the result should be either! This is a glaring drawback of most code that I have seen in dynamically typed languages such as Ruby. People don&rsquo;t document exactly what can come in or out. A newcomer to a code base (such as me in this situation) cannot just read off the types and know immediately what is going on and what has been promised and what is delivered by a function. As a result, the code reader has to play compiler and read a lot more code to try to figure out what is going on.</p>

<p><em>In principle</em>, someone writing code in a dynamically typed language could provide very helpful comments that amount to informal type annotations, but in practice people do not. I have found in my two decades of programming that human psychology trumps theoretical possibility any day. If something is optional, people won&rsquo;t do it, unless there is a very strong de facto community standard. (It turns out, for example, that what I really admire about the Ruby community is that for some reason, there is a very strong de facto community standard of doing at least some <em>unit testing</em> as part of the whole development process. I find this sadly missing in some statically typed language communities.)</p>

<p>In code in a statically typed language such as OCaml (or Haskell or Scala), I would expect to see:</p>

<p><code>ocaml
let highlight (code : string) (opts : my_map) : string = //...
</code></p>

<p>and expect that the return value should be a <code>String</code>, or</p>

<p><code>ocaml
let highlight (code : string) (opts : my_map) : string option = //...
</code></p>

<p>to indicate that the return value could be either <code>Some(formatted_code)</code> or <code>None</code>.</p>

<h2><code>nil</code> all over the place</h2>

<p>Reading the Ruby code, I saw that the situation is even more complex than I thought:</p>

<p>``` ruby</p>

<pre><code>  # If the caller didn't give us any code, we have nothing to do,
  # so return right away.
  return code if code.nil? || code.empty?
</code></pre>

<p>```</p>

<p>Wow: <code>code</code> can be <code>nil</code>, in which case <code>nil</code> is returned.</p>

<p><em>All code that can return <code>nil</code> should document this fact so that the caller knows what to do.</em> Ideally, the writer of pygments.rb should have documented this fact, and then the writer of Jekyll would in turn have added <code>nil</code> checking in its rendering code.</p>

<p>Furthermore, it turns out that <code>mentos()</code> can return <code>nil</code> on a non-<code>nil</code> code string! This was a surprise to me.</p>

<h2><code>nil</code> is not even the real problem here: non-determinism is</h2>

<p><code>mentos()</code> is not very well documented. Until I read this code, I didn&rsquo;t realize that pygments.rb actually embeds a call to the Python interpreter to execute the Python Pygments parser to do the real work! In <code>lib/pygments/popen.rb</code>:</p>

<p>``` ruby</p>

<pre><code># Our 'rpc'-ish request to mentos. Requires a method name, and then optional
# args, kwargs, code.
def mentos(method, args=[], kwargs={}, original_code=nil)
  # Open the pipe if necessary
  start unless alive?

  begin
    # Timeout requests that take too long.
    timeout_time = 8

    Timeout::timeout(timeout_time) do
      # ...[I omitted some code]
    end
  rescue Timeout::Error
    # If we timeout, we need to clear out the pipe and start over.
    @log.error "[#{Time.now.iso8601}] Timeout on a mentos #{method} call"
    stop "Timeout on mentos #{method} call."
  end

rescue Errno::EPIPE, EOFError
stop "EPIPE"
raise MentosError, "EPIPE"
end
</code></pre>

<p>```</p>

<p>It turns out that fundamental problem is not <code>nil</code> so much as <em>non-determinism</em>: my computer was under heavy load when I was generating my blog, and therefore the timeout kicked in and caused a failure to communicate with the Python process and therefore for <code>nil</code> to end up being returned. This non-determinism is worse than <code>nil</code>. I think that in a situation like this, an <em>exception</em> is called for. <code>highlight()</code> should actually raise an exception, which would then be propagated to Jekyll, which could give a useful error message about the timeout. I think this is a better design than return <code>nil</code> (or if using a statically typed language, a <code>None</code>).</p>

<p>I was also disappointed that logging was used in this code, indicating that it was known that bad things could happen, but the logged information was not used in generating a useful exception.</p>

<p>Amusingly, upon discovering the logging code, I used it, setting the magic environment variable <code>MENTOS_LOG</code> (from reading the code) to a file, so that I could see what happens, and verify that the timeout happened:</p>

<p>``` console</p>

<h1>Logfile created on 2013-06-29 10:26:19 -0400 by logger.rb/36483</h1>

<p>I, [2013-06-29 10:26 #13799]  INFO &mdash; : [2013-06-29T10:26:19-04:00] Starting pid 16533 with fd 10.
I, [2013-06-29 10:26 #13799]  INFO &mdash; : [2013-06-29T10:26:19-04:00] Out header: {&ldquo;method&rdquo;:&ldquo;highlight&rdquo;,&ldquo;args&rdquo;:null,&ldquo;kwargs&rdquo;:{&ldquo;lexer&rdquo;:&ldquo;console&rdquo;,&ldquo;options&rdquo;:{&ldquo;encoding&rdquo;:&ldquo;utf-8&rdquo;,&ldquo;outencoding&rdquo;:&ldquo;utf-8&rdquo;},&ldquo;fd&rdquo;:10,&ldquo;id&rdquo;:&ldquo;TVQSJNBV&rdquo;,&ldquo;bytes&rdquo;:147}}
E, [2013-06-29 10:26 #13799] ERROR &mdash; : [2013-06-29T10:26:27-04:00] Timeout on a mentos highlight call
I, [2013-06-29 10:26 #13799]  INFO &mdash; : [2013-06-29T10:26:27-04:00] Killing pid: 16533. Reason: Timeout on mentos highlight call.
I, [2013-06-29 10:26 #13799]  INFO &mdash; : [2013-06-29T10:26:27-04:00] Killing pid: . Reason: Exiting
```</p>

<h2>Testing</h2>

<p>It turns out that there <em>is</em> a place where the intended behavior is in a sense documented: the unit tests in <code>test_pygments.rb</code>:</p>

<p>``` ruby
  def test_returns_nil_on_timeout</p>

<pre><code>large_code = REDIS_CODE * 300
code = P.highlight(large_code) # a 30 mb highlight request will timeout
assert_equal nil, code
</code></pre>

<p>  end
```</p>

<p>The test creates some huge string in hope of triggering a timeout, and then asserts that the result should be <code>nil</code>!</p>

<p>OK, fair enough: assuming that the Jekyll authors knew of this intention, then it was Jekyll&rsquo;s responsibility to test for <code>nil</code> in the call to <code>Pygments.highlight()</code>.</p>

<p>The test is not very satisfactory because it artificially tries to generate a timeout. Instead, one could do some mocking or refactoring of <code>mentos()</code>.</p>

<h2><code>nil</code> is still not OK; but are exceptions OK?</h2>

<p>So everything is OK, now that we can take <code>nil</code> to mean a timeout, right? No, actually, <code>highlight()</code> can still return a <code>nil</code> just because <code>code</code> was <code>nil</code>. It is bad to bin random different failure modes into one return value. Personally, I would choose to enforce that the input <code>code</code> is never <code>nil</code> and that the output is never <code>nil</code>, and that an exception is raised if there is a timeout.</p>

<p>An alternative is to not use an exception, but use a union success/failure type instead. This is the route that <a href="http://blog.stackmob.com/2013/03/why-we-avoid-throwing-exceptions-at-stackmob/">StackMob uses for its Scala code</a>. Other Scala developers such as <a href="http://blog.jessitron.com/2013/06/whats-dirtier-than-comments-exceptions.html">Jessica Kerr have been arguing against the use of exceptions also</a>.</p>

<p>Google&rsquo;s systems-level statically typed language <a href="http://golang.org/">Go</a> deliberately <a href="http://golang.org/doc/faq#exceptions">does not even have exceptions</a>, and therefore mandates a style of error handling that involves <a href="http://golang.org/doc/articles/error_handling.html">returning a success and failure everywhere</a>.</p>

<p>I think there are situations for exceptions and situations for reifying errors as ordinary values in a success/failure object. I will explore this topic further in this blog. Note that even in the Haskell community, there is continued debate over how to handle errors; a famous post compares <a href="http://blog.ezyang.com/2011/08/8-ways-to-report-errors-in-haskell-revisited/">eight different ways to handle errors in Haskell</a>. There is no consensus because there are a lot of tradeoffs involved when it comes to error handling.</p>

<h2>My fix</h2>

<p>For now, before I propose to pygments.rb that an exception be raised (this would be least intrusive to Jekyll, whose source code would not need to be changed for the exception to propagate usefully), I simply hacked <code>8</code> to <code>80</code> to avoid a timeout!</p>

<h3>(Update of 2013-12-18)</h3>

<p>The <code>pygments.rb</code> library <a href="https://github.com/tmm1/pygments.rb/commit/e0ed7f73f03aa59680b469f4f26e208d3cf8d999">has finally been updated with a <code>MENTOS_TIMEOUT</code> environment variable</a>.</p>

<p>This is obviously a short-term hack, and I don&rsquo;t see how a typical Octopress user would even find out about this new environment variable, but until I implement a better solution and submit a pull request to the <code>pygments.rb</code> team, I have no right to complain!</p>

<h2>Conclusion</h2>

<p>I&rsquo;ve used my recent frustration at being unable to publish my personal blog as a vehicle to begin a conversation about error handling and the issues of API design and documentation in the face of errors. I hope you enjoyed the ride.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Java User Group: Building and Evolving a Java API]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/"/>
    <updated>2013-06-25T21:49:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api</id>
    <content type="html"><![CDATA[<p>The topic for the featured presentation at the <a href="http://java.net/projects/pittjug/">Pittsburgh Java User Group</a> (PittJUG) was &ldquo;Building and Evolving a Java API&rdquo;, presented by Eric Stein of <a href="http://www.fulminatus.com/">Fulminatus Consulting</a>. I was excited to attend because API design is difficult but important, and today more than ever, because of the trend toward integrating many services to build an application, and toward providing such services (both externally and internally).</p>

<p>(For past reports of mine on PittJUG, see the <a href="http://franklinchen.com/blog/categories/pittjug/">PittJUG archives in my other blog</a>.)</p>

<p>The presentation was very good. (Eric&rsquo;s slides are available <a href="http://www.fulminatus.com/presentations/PittJUG%20API%20Presentation.pdf">here</a>, but as always with slides, be aware that it is just an outline, as good slides really should be, and the actual presentation and group discussion had all the substance.) Note that although some of the specific recommendations and examples are Java-specific, the entire area of good API design is <em>general</em> and is applicable no matter what programming language you are using.</p>

<p>However, the presentation also filled me with a combination of <em>sadness</em>, because our computing profession could have done better up front to make good API design much easier in various ways. On the positive side, it&rsquo;s better late than never.</p>

<p>A report on the presentation, with my commentary:</p>

<!--more-->


<h2>API design for whom?</h2>

<p>Whenever doing something at all, the question &ldquo;for whom?&rdquo; should always be asked and answered. Eric observed that APIs must meet the different needs of different users, so it&rsquo;s useful to identify three specific end users with different needs, and look at the situation from each of their points of view:</p>

<ul>
<li>API owner</li>
<li>specification owner</li>
<li>logging owner</li>
</ul>


<p>His inclusion of the &ldquo;logging owner&rdquo; was intriguing because the point of view from someone whose job it is to wade through logs is often slighted. But in light of ever more complex applications as well as errors and the need for recovery and quick turnaround in fixing them, I believe that Eric is right to argue that logging should be seriously designed, to &ldquo;tell a consistent story&rdquo;. I am taking this advice to heart.</p>

<h2>Design process</h2>

<p>Eric advised that design should start with use cases. And client code, from the perspective of the end user, as well as tests, should be written up front. He didn&rsquo;t use the term, but this is <a href="http://en.wikipedia.org/wiki/Test-driven_development">test-driven development</a> (TDD), which in my mind has been an unfortunate term, because it is really <em>test-driven design</em>, which happens to have the nice effect of kick-starting development as well. (I&rsquo;ll be writing more later on this blog about TDD; I no longer start a new project without a TDD mentality and process, so productive and efficient I have found it.)</p>

<p>One thing that Eric said was to start with the <em>most important</em> cases first, not the easy cases. Very good advice: I have learned the hard way that it is easy to pat yourself on the back and start with easy cases to feel like you&rsquo;re making progress, but this often leads to hitting a block when getting to the hard cases, and then having to do some major redesign at that point. I&rsquo;ve found that if something is really important, it needs to be addressed immediately, and often will drive the design of the components required to make the important hard case work. (I&rsquo;ll be writing more later on this blog about &ldquo;the hard case&rdquo;, especially in the context of &ldquo;sad paths&rdquo; that are critical.)</p>

<h2>Stability</h2>

<p>Stability is the big difficulty in API design. It&rsquo;s really daunting, actually, to think of the idea of &ldquo;write once, support forever&rdquo;, but people get very unhappy, rightfully, if they start using your API and then things break on them after it changes.</p>

<h2>Simplicity</h2>

<p>Eric argued that a good API should be easy to read as well as easy to write. This is all about human psychology.</p>

<p>Also, he noted that a side effect of his recommendation to write client code and tests first is that you get to see the point of view of the client, and can use this experience to weed out, for example, APIs that require a lot of annoying boilerplate code.</p>

<h2>Subclassing</h2>

<p>There was a lot of good material covered about the dangers of exposing or mandating or allowing subclassing.</p>

<p>I agree with Eric about the <em>dangers of subclassing</em>. The ability to subclass existing classes is the single most abused feature of object-oriented languages, and when it comes to API design, the problems are even more magnified because of the needs for API security and evolution. Almost always, you want to use composition, not subclassing. I&rsquo;m pretty annoyed that composition, which was well-understood in the 1960s and 1970s, ended up being &ldquo;forgotten&rdquo; in some circles. Eric gave the classic example of a totally disastrous API resulting from the Java library originally coming with a <code>Properties</code> class that was a subclass of <code>Hashtable</code>.</p>

<h2>Immutability</h2>

<p>Immutable objects have huge advantages over mutable objects.</p>

<p>This is something has been known by the <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a> community since Lisp in the 1950s and <a href="http://en.wikipedia.org/wiki/ML_(programming_language)">ML</a> in the 1970s and <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</a> and <a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</a> in the 1980s.</p>

<p>But better late than never.</p>

<h3>My example: Apache HTTP Components</h3>

<p>I have observed that APIs in such languages as Java and Ruby have more and more gravitated toward the use of immutable objects. A very good pattern I have seen is to use a builder (which has internal mutable state) to finally build an instance of an immutable object. Just recently, I was using the <a href="http://hc.apache.org/httpcomponents-client-ga/">Java Apache HTTP Components library</a> and moved from the stable version (4.2.5) to the <a href="http://hc.apache.org/httpcomponents-client-dev/">beta version</a> (4.3-beta2) (because of bugs in the stable version), and happened to notice that a whole slew of methods I was calling were deprecated in favor of a <a href="http://www.apache.org/dist/httpcomponents/httpclient/RELEASE_NOTES.txt">new builder-based API</a>. Excerpts from the release notes of the beta:</p>

<ul>
<li>Support for Java 7 try-with-resources</li>
<li>Added fluent Builder classes</li>
<li>Deprecation of preference and configuration API based on HttpParams interface in favor of constructor injection and plain configuration objects</li>
<li>Reliance on object immutability instead of access synchronization for thread safety</li>
</ul>


<p>It was very good to see that decades-old lessons about good design are finally making it into important Java libraries!</p>

<h2>Types</h2>

<p>A lot of what Eric talked about had to do with types: type safety as well as the ramifications of types when evolving an API.</p>

<h3><code>null</code></h3>

<p>Several of his examples (see his slides) involved the problem of <code>null</code>, <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Hoare&rsquo;s billion-dollar mistake</a>, which I gave a little <a href="http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/">talk about last year</a>. Basically, <code>null</code> is a hole in a type system, and as a result, in Java one has to compensate by documenting in comments (but not having type checked) when and where something could be null or could not be, so that API clients know what to pass into methods and what to expect in return.</p>

<p>Java is not hopelessly behind: Java 8 has the <a href="http://download.java.net/jdk8/docs/api/java/util/Optional.html"><code>Optional&lt;T&gt;</code> class</a> to help programmers transition away from using <code>null</code>. C++14 has a <a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3527.html">proposal to add to the standard library <code>std::optional&lt;T&gt;</code></a>.</p>

<p>Admittedly, these are late patches that do not actually prevent continued use of <code>null</code> (ideally, a programming language should simply not even have it; languages such as ML and Haskell from the 1970s and 1980s happily did without this terrible construct), but these are definitely steps forward. New languages being designed and implemented today from a clean slate have no excuse to perpetuate this billion-dollar error: for example, <a href="http://www.rust-lang.org/">Rust</a> does not have <code>null</code>.</p>

<h3>Strings</h3>

<p>Eric noted that use a string is throwing away type safety.</p>

<p>I think the use of strings everywhere is a disaster second to that of using <code>null</code>. The problem is that strings have to be parsed for information. And many people do not actually correctly do such parsing and validation, hence the prevalence of <a href="http://en.wikipedia.org/wiki/SQL_injection">injection attacks</a>.</p>

<p>Even apart from security, the manipulation of strings that actually are supposed to have an intended structure is a major cause of late-caught runtime errors, and of programmer confusion. For example, <a href="http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding">this report on URLs</a> has been recirculating lately, because of errors in both libraries and client code when dealing with URLs as strings rather than as strongly typed data.</p>

<h3>Booleans</h3>

<p>Eric observed that even booleans are an API design smell: booleans are a special case of an enumeration of possible states. What happens if you want to add a new state but your old API used booleans?</p>

<h3>Exceptions</h3>

<p>Eric recommended <em>unchecked</em> over Java&rsquo;s <a href="http://en.wikipedia.org/wiki/Exception_handling#Checked_exceptions"><em>checked</em> exceptions</a>.</p>

<p>Sadly, in my Java programming in the past decade, I&rsquo;ve had to deal with the fact that Java made a big mistake by introducing checked exceptions in the first place; the ramifications were not thought out then. Note that C++11 has finally deprecated exception specifiers, and exceptions in ML have always been unchecked since the introduction in the 1970s, while Java ignored two decades of experience and went ahead and bolted on checked exceptions.</p>

<h4>Not strings!</h4>

<p>Eric advised that all failure data should be included in a thrown exception. Too often, we see exception throwing code that just throws a string message. Then the catcher has to try to parse this message for important data (which may not even be present in the string). If you&rsquo;re going to throw an exception, write a class and stash away important information, not a string message.</p>

<h2>A short note on primitive obsession</h2>

<p>My friend Adam who also attended the PittJUG meeting noted that what we&rsquo;re basically talking about is <a href="http://c2.com/cgi/wiki?PrimitiveObsession">primitive obsession</a>. The larger lesson here is that when designing robust, clear, and safe APIs, using primitives is often a mistake. Everything in the problem domain should really be modeled as its own type, not as a primitive.</p>

<h2>Evolution of an API</h2>

<p>The trickiest thing to get right is making an API so that it can evolve in the future without breaking backwards <em>compatibility</em>. This compatibility can be of different forms:</p>

<ul>
<li>behavioral</li>
<li>binary</li>
<li>source</li>
</ul>


<p>Eric talked a lot about weakening or strengthening contracts. There is a lot of hairy stuff involved, including knowledge of Java compiler internals. I think this is a space where more research is needed for the future in order to get the formal semantics of API evolution done right.</p>

<p><a href="https://code.google.com/p/japi-checker/">japi-checker</a> was mentioned as one tool that one can use for Java.</p>

<h2>Resources</h2>

<p>In the context of software development in Java, it is impossible to avoid mentioning <a href="http://en.wikipedia.org/wiki/Joshua_Bloch">Joshua Bloch</a>&rsquo;s early book (subsequently revised for a second edition), &ldquo;Effective Java&rdquo;. It is a daunting book, over 300 pages long, but it is an indispensable reference for anyone caring about good programming in Java. Eric called it the &ldquo;gold standard&rdquo;.</p>

<p>Check out his links to other resources on his slides.</p>

<h2>Package design</h2>

<p>A question came up about Eric&rsquo;s recommendation of using package-private visibility and his observation that a lot of people don&rsquo;t know about package-private, and don&rsquo;t design packages.</p>

<h3>Modules</h3>

<p>My observation is that people don&rsquo;t design packages because they&rsquo;re not actually modules. <em>Java was invented without a module system</em>, although Java 8 originally was slated to finally include a module system in the form of Jigsaw, which was, however, <a href="http://www.infoworld.com/d/application-development/project-jigsaw-delayed-until-java-9-198007">delayed to Java 9</a>. Meanwhile, there is <a href="http://en.wikipedia.org/wiki/OSGi">OSGi</a>.</p>

<p>I don&rsquo;t like sounding like a broken record, but <a href="http://en.wikipedia.org/wiki/Standard_ML">Standard ML came with a module system in the 1980s</a>, and there has been further work in the area of module systems, including first-class module systems that go beyond stratified module systems. The reality is that Java was born in the 1990s an &ldquo;old&rdquo; language, with no positive technical innovations, that feels more like a language from the 1960s.</p>

<h2>Conclusion</h2>

<p>Eric Stein gave an excellent talk about API design, both from the broadest perspective, focused on human beings and clients, and down and dirty with Java language features to avoid or use carefully.</p>

<h2>Addendum: my involvement with Java</h2>

<p>I had a chance to review some of my feelings I have had about programming in Java myself. I&rsquo;ve been a member of PittJUG for well over a decade now. I first signed up on the PittJUG mailing list in June 1999. I have not always been a regular attendee of the meetings: after some initial years of interest, I stopped attending for some years, and became regular again in 2009. So I&rsquo;ve been around Java since it was a very young language, and all the while knowing of all the problems with the language. So why did I chose it as my main programming language a decade ago, and why have I stuck with it for so long, until last last year, when <a href="http://franklinchen.com/blog/2013/01/11/2013-is-my-year-of-scala/">I decided to write no <em>new</em> Java code, and move on to Scala</a>? I will explain my decision-making in a forthcoming blog post.</p>

<h2>(Update of 2013-07-05)</h2>

<p>An interesting <a href="http://www.infoq.com/presentations/enterprise-api">presentation on APIs in the enterprise</a> came my way.</p>
]]></content>
  </entry>
  
</feed>
