<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maple | The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/blog/categories/maple/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2014-12-21T23:24:09-05:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[When a computer algebra program gives wrong answers]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/11/06/when-a-computer-algebra-program-gives-wrong-answers/"/>
    <updated>2014-11-06T20:20:32-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/11/06/when-a-computer-algebra-program-gives-wrong-answers</id>
    <content type="html"><![CDATA[<p>I read an interesting and disturbing report, <a href="http://www.ams.org/notices/201410/rnoti-p1249.pdf">&ldquo;The Misfortunes of a Trio of Mathematicians Using Computer Algebra Systems. Can We Trust in Them?&rdquo;</a> published in the Notices of the American Mathematical Society. I feel that all software developers should read this and reflect on the nature of our work, when people who are not programmers depend on it.</p>

<p>This report was about mathematicians accidentally discovering a bug in a major computer algebra system, Mathematica.</p>

<!--more-->


<h2>A note about scientists and mathematicians</h2>

<p>Scientists and mathematicians increasingly depend on computer software for their work, to explore data, analyze it, verify hypotheses, etc. It&rsquo;s gotten to the point where we can no longer pretend, for example, that scientists are not writing substantial computer programs, whether or not they are trained programmers (in fact, <a href="http://software-carpentry.org/">Software Carpentry</a> was created by a physicist to fulfill the need of training scientists in programming).</p>

<h2>The discovery of the bug</h2>

<p>A bunch of mathematicians used Mathematica to generate and test ideas they had about a mathematical hypothesis. They wanted to find counterexamples to their conjectures and found some with integer arithmetic calculations using Mathematica.</p>

<p>One of them happened to also be using Maple, and the results differed, so Mathematica or Maple had to be wrong. They isolated the error by <em>generating random test cases</em> and finding that Mathematica was in error.</p>

<p>In fact, given the <em>same matrix</em> and calling Mathematica&rsquo;s matrix determinant function, Mathematica would return different results!! This was a rather serious bug indeed. They found that Mathematica 7 did not have this bug, but 9 and 10 did.</p>

<h2>Wolfram Research&rsquo;s lack of responsiveness to the problem</h2>

<p>They reported the Mathematica bug to Wolfram Research but got no useful reply, and at the next release of Mathematica, the bug was still not fixed.</p>

<p>There were other bugs they found as well.</p>

<p>Wolfram Research never gave any feedback, and does not publish a list of known bugs.</p>

<h2>Lessons to learn</h2>

<ul>
<li>When there is a bug in proprietary, closed-source software, you are completely helpless. The bug may not even be acknowledged, much less fixed, and you could not fix it yourself even if you wanted to.</li>
<li>There is value in having an alternative tool: without independent work using Maple, the bugs in Mathematica may never have been discovered. Diversity is good.</li>
<li>All scientists should be aware that the tools they use can be buggy, and therefore computational results can only be <em>trusted</em> as much as the specific versions of software they use can be trusted.</li>
</ul>


<p><strong>Does any of this surprise you? For what you rely on, how do you work around the inevitable fact that software has bugs?</strong></p>
]]></content>
  </entry>
  
</feed>
