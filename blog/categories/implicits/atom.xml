<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: implicits | The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/blog/categories/implicits/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2014-11-06T20:46:49-05:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Implicits]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits/"/>
    <updated>2014-02-13T21:45:59-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met with Justin presenting on <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/">&ldquo;Implicits&rdquo;</a>.</p>

<!--more-->


<h2>Implicits</h2>

<p>Implicits are a novel and fantastically important feature of Scala. I wish there were a comprehensive and concise single resource about them out there, but I don&rsquo;t actually know of one.</p>

<p>I&rsquo;ve been doing stuff with implicits lately. Not long ago, I wrote a blog post that involved <a href="/blog/2013/12/26/tostring-considered-harmful-part-2/">using Scala implicits to avoid relying on the inherited Java <code>toString</code> method</a>. More recently, for this meetup I posted some code that I hoped someone would comment on, in which <a href="https://github.com/franklinchen/test-specs2-matchers">I used implicits to try to simplify a DSL</a>. I&rsquo;m not sure this is the right design choice, but it was an experiment.</p>

<h2>Presentation</h2>

<p>Around 7 of us showed up.</p>

<p>Justin did some live coding using the Scala Worksheet to demonstrate various uses of implicits.</p>

<p>One use is to define an &ldquo;implicit function&rdquo; that can convert of a value of one type to another. This can be overused badly, unfortunately.</p>

<p>Another is to define an &ldquo;implicit parameter&rdquo; for a function so that you don&rsquo;t have to explicitly pass a parameter to the function, if there is an implicit value in scope.</p>

<p>Scala 2.10 greatly improved implicits by encapsulating the &ldquo;conversion&rdquo; pattern by means of an &ldquo;implicit class&rdquo;. Strangely, Scala Worksheet seemed to get confused when we played around and defined an implicit class that also had an implicit parameter. This led to some interesting detective work as we examined the generated JVM byte code to figure out what was going on! I thought it was useful for us to dig into this level; often it is useful to understand what something compiles to in order to better understand and appreciate a high-level language construct.</p>

<p>Finally, we briefly discussed the type class pattern, which is arguably the most important use of implicits. This was too big a topic to get into here though.</p>

<h2>Resources</h2>

<p>I posted some good resources that have popped up on my radar on Scala implicits:</p>

<ul>
<li>A fine <a href="http://like-a-boss.net/2013/03/29/polymorphism-and-typeclasses-in-scala.html">tutorial on type classes in Scala</a>.</li>
<li><a href="http://typelevel.org/blog/2014/01/18/implicitly_existential.html">Scary stuff with implicits</a> that I don&rsquo;t understand (yet).</li>
</ul>


<h2>Conclusion</h2>

<p>Justin gave a nice introduction to implicits. I think the live coding and experimentation is a great way to involve people in code suggestions and discussion of what things mean and do. It was a fun time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toString considered harmful, part 2]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2/"/>
    <updated>2013-12-26T22:03:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/26/tostring-considered-harmful-part-2</id>
    <content type="html"><![CDATA[<p>This is part 2 of a series of articles, &ldquo;<code>toString</code> considered harmful&rdquo;. [Part 1] introduced the problem in the context of a common design flaw present in object-oriented languages, and proposed a simple workaround.</p>

<p>In part 2, we look at advanced ways to organize &ldquo;stringable&rdquo; data, using either an object-oriented or functional style. Examples are in Scala because it equally supports either style.</p>

<!--more-->


<h2>Object-oriented vs. functional</h2>

<p>The fix presented was in <em>object-oriented</em> style, adding a method <code>toUrlString</code> to a class. The other solution is the <em>functional</em> style, leaving the <code>Id</code> class alone, and writing an external function instead:</p>

<pre><code class="scala">  case class Id(id: Int)

  def toUrlString(id: Id) = id.toString
</code></pre>

<p>with</p>

<pre><code class="scala">    id match {
      case None =&gt; println("No id found!")
      case Some(n) =&gt; getUrl(makeUrl(toUrlString(n)))
    }
</code></pre>

<p>There are advantages and disadvantages to either solution.</p>

<h2>More advanced OO</h2>

<p>It would be very natural, given a whole set of domain classes in addition to <code>Id</code>, to want all of them to have a <code>toUrlString</code>. Then the natural thing to do is to create a mini-universe (parallel to the <code>toString</code> universe) by creating a hierarchy:</p>

<pre><code class="scala">  trait UrlString {
    def toUrlString: String
  }

  case class Id(id: Int) extends UrlString {
    override def toUrlString = id.toString
  }

  case class ...(...) extends UrlString {
    override def toUrlString = ...
  }
</code></pre>

<h2>Advanced string interpolation with OO</h2>

<p>In fact, Scala and other languages with advanced string interpolation facilities allow yet another refactoring by making sure that what gets into a URL isn&rsquo;t just an arbitrary string in the first place!</p>

<p>Below we define a string interpolator that only operates on objects of classes that implement the trait <code>UrlString</code>, and therefore does away with an explicit call to <code>toUrlString</code>:</p>

<pre><code class="scala">  implicit class UrlHelper(val sc: StringContext) extends AnyVal {
    def url(args: UrlString*): String = {
      val strings = sc.parts.iterator
      val expressions = args.iterator
      val buf = new StringBuffer(strings.next)
      while (strings.hasNext) {
        buf append expressions.next.toUrlString
        buf append strings.next
      }
      buf.toString
    }
  }

  /** Only ever use UrlString to create a URL. */
  def makeUrl(id: UrlString): String = url"http://service.com?id=$id"
</code></pre>

<p>with</p>

<pre><code class="scala">    id match {
      case None =&gt; println("No id found!")
      case Some(n) =&gt; getUrl(makeUrl(n))
    }
</code></pre>

<p>This may or may not be overengineering.</p>

<h2>Advanced string interpolation with FP</h2>

<p>The functional approach doesn&rsquo;t like inheritance in the domain classes. We can implement it with <a href="http://en.wikipedia.org/wiki/Type_class">type classes</a> (a concept first pioneered in Haskell in the late 1980s) by means of implicits in Scala, in order to implement <code>toUrlString</code> outside of a class hierarchy but also allow it to be used in a constrained generic way. A full discussion of this is outside the scope of this post, but the basic point is that with type classes, one can write code that does <em>not</em> depend on an inheritance hierarchy. If you&rsquo;re used to monkey-patching in dynamic languages, think of it as compile-time monkey-patching.</p>

<pre><code class="scala">  // A type class
  trait UrlString[A] {
    def toUrlString(a: A): String
  }

  // Wrapper class
  case class Id(id: Int)

  // Implement the type class UrlString for Id
  implicit object IdToUrlString extends UrlString[Id] {
    override def toUrlString(a: Id) = a.id.toString
  }

  implicit class UrlHelper(val sc: StringContext) extends AnyVal {
    def url[A: UrlString](args: A*): String = {
      val strings = sc.parts.iterator
      val expressions = args.iterator
      val buf = new StringBuffer(strings.next)
      while (strings.hasNext) {
        buf append implicitly[UrlString[A]].toUrlString(expressions.next)
        buf append strings.next
      }
      buf.toString
    }
  }

  /** Anything "viewable" as UrlString can be used to create a URL. */
  def makeUrl[A: UrlString](id: A): String = url"http://service.com?id=$id"
</code></pre>

<h2>The final string gotcha</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicity. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries such as <a href="http://spray.io/">Spray</a>.</p>

<h2>Conclusion</h2>

<p>I thought it would useful to compare an object-oriented and a functional approach to unifying data that share a domain-consistent notion of conversion to a string. Scala is a language that allows easy expression of both.</p>

<p>In part 3, we will look at languages that just don&rsquo;t have the <code>toString</code> problem at all.</p>
]]></content>
  </entry>
  
</feed>
