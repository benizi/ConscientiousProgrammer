<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2013-12-24T04:28:58-05:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[toString considered harmful]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful/"/>
    <updated>2013-12-23T23:54:00-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/23/tostring-considered-harmful</id>
    <content type="html"><![CDATA[<p>It is easy to rant about the problems or unexpected subtleties involving the use <a href="http://en.wikipedia.org/wiki/String_%28computer_science%29">strings</a> in programming languages. This post, however, is not so much a rant about strings as about design and meaning, with <code>toString</code> only as an obvious example.</p>

<p>I&rsquo;ll describe a pitfall that came up in my code, and a solution, and make observations about how different programming languages address or avoid this problem.</p>

<!--more-->


<h2>A bug when evolving my code</h2>

<p>My example code is in Scala, but the problem illustrated actually extends to many (most?) other currently popular object-oriented languages as well, including Java (which Scala inherited <code>Object.toString</code> from), C# (<code>Object.ToString</code> stolen from Java), Ruby (<code>Object#to_s</code>), Python (<code>str</code>, which uses <code>object.__str__</code> in case of an object). (Later in the post, I discuss languages without this specific feature.)</p>

<h3>First working code</h3>

<p>Here&rsquo;s the first version of the code, which is a simplification of logic in a real application. A name is looked up to find an ID, then the ID is used to construct a URL to submit to a Web service.</p>

<p>```scala
object Example {
  type Id = Int</p>

<p>  /**</p>

<pre><code>@param name User name to look up
@return ID of user
*/
</code></pre>

<p>  def findId(name: String): Id =</p>

<pre><code>if (name == "name") {
  42
} else {
  0
}
</code></pre>

<p>  def makeUrl(id: Id): String = s"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"</p>

<p>  /<em>* Simulate making the Web request. </em>/
  def getUrl(url: String): Unit = println(url)</p>

<p>  def main(args: Array[String]): Unit = {</p>

<pre><code>val id = findId("name")
getUrl(makeUrl(id))
// output: http://service.com?id=42
</code></pre>

<p>  }
}
```</p>

<p>In this code, everything seems fine. This was the situation in my application when it was certain that finding an ID would succeed.</p>

<p>If you don&rsquo;t know Scala, just note that <code>s"...$id"</code> is just Scala&rsquo;s string interpolation syntax that behind the scenes calls <code>id.toString</code>.</p>

<h3>Non-working code</h3>

<p>It turned out that finding an ID could fail, so I changed <code>findId</code> to return the type <code>Option[Id]</code> instead of <code>Id</code>. To get the code to compile, I had to change the type of the parameter to <code>makeUrl</code> also:</p>

<p>```scala
  /**</p>

<pre><code>@param name User name to look up
@return Some(ID of user) if found, else None
*/
</code></pre>

<p>  def findId(name: String): Option[Id] =</p>

<pre><code>if (name == "name") {
  Some(42)
} else {
  None
}
</code></pre>

<p>  // Oops, now this has an unintended bug!
  def makeUrl(id: Option[Id]): String = s"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"
```</p>

<p>But this resulted in a bug (thankfully caught by my test suite that actually went over the Web to fetch stuff)! The bug was that the URL constructed was nothing resembling what I ever wanted to construct: <code>http://service.com?id=Some(42)</code> was being requested.</p>

<p>Furthermore, in the case of an ID not found, the URL constructed is <code>http://service.com?id=None</code>. How many of you have seen applications or Web sites or emails in which something was clearly missing and the text contained either an empty space or the string &ldquo;null&rdquo; or &ldquo;nullvalue&rdquo; such as</p>

<p>{% blockquote %}
Dear NULL,</p>

<p>You ordered NULL items.
{% endblockquote %}</p>

<p>Yup, you guessed it: someone wrote crappy code like what I just showed you, and frightening thing is, <em>it could have been me</em> and <em>it could have been you</em>.</p>

<h4>What&rsquo;s the big deal?</h4>

<p>You might think, &ldquo;Big deal, you changed your code, ran your test, and immediately found the bug, so what&rsquo;s the problem?&rdquo;</p>

<p>The problem is that I have higher standards than that. I don&rsquo;t want to rely on my tests to find my bugs. In fact, the test that went over the Web to do stuff was an <em>integration test</em>, not a <em>unit test</em>. The bug only manifested itself when the actual Web request failed. And as we see in real life, many apps are not sufficiently tested to root out all possible accidental string generations.</p>

<p>So although I caught the bug quickly, I caught it far less quickly than I wanted. I didn&rsquo;t want to even construct an obviously garbage URL like <code>http://service.com?id=Some(42)</code> at all. I prefer to have the type checker catch stupid design-level bugs up front. So I was furious at myself that I wrote code that the compiler was perfectly happy with but was obviously wrong. I had gotten lazy in more ways than one, and had been punished accordingly.</p>

<h2>A symptom of bad design</h2>

<p>There were a couple of things wrong with my original code that made it not evolve well.</p>

<h3>Don&rsquo;t use <code>toString</code></h3>

<p>First, by using string interpolation at all, I was relying on the implicit <code>toString</code> method of all objects. String interpolation is an admittedly very convenient feature that I use extensively, but now I consider it rather dangerous.</p>

<p>But even if I hadn&rsquo;t used string interpolation, I would have had to build up strings myself anyway, and would have called <code>toString</code> <em>explicitly</em>, and I would have had the same problem: changing the type of something from <code>Id</code> to <code>Option[Id]</code> does not get rid of <code>toString</code>. In fact, in object-oriented languages where <code>toString</code> is defined way up at the top, <em>everything</em> has <code>toString</code>, whether you like it or not! The best you can do is override <code>toString</code>. (Actually, Scala &ldquo;helpfully&rdquo; generates a nice <code>toString</code> override for you when you use case classes, hence the output of <code>Some(42)</code>.)</p>

<p>I consider this <em>global infection</em> a flaw in object-oriented languages that impose a set of methods on all objects whether you want them or not. <code>toString</code> is hardly the worst offending method, actually, but I&rsquo;ll save my complaints about others for later.</p>

<p>First step in cleaning up the code: make <code>toString</code> explicit:</p>

<p>```scala
  /<em>* Only ever use a String to create a URL. </em>/
  def makeUrl(id: String): String = s"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"</p>

<p>  def main(args: Array[String]): Unit = {</p>

<pre><code>val id = findId("name")
getUrl(makeUrl(id.toString))
</code></pre>

<p>  }
```</p>

<p>(Later in the post, I will discuss alternatives to this explicit <code>toString</code>.)</p>

<h3>Primitive obsession</h3>

<p>Another design smell was that of using</p>

<p><code>scala
type Id = Int
</code></p>

<p>in the first place. This is a well-known lazy practice called <a href="http://c2.com/cgi/wiki?PrimitiveObsession">primitive obsession</a>. I know better than that.</p>

<p>The solution to primitive obsession is easy: create a new wrapper type. Hence, the original code, even before the possibly failing ID lookup, should have been</p>

<p>```scala
  case class Id(id: Int)</p>

<p>  /**</p>

<pre><code>@param name User name to look up
@return ID of user
*/
</code></pre>

<p>  def findId(name: String): Id =</p>

<pre><code>if (name == "name") {
  Id(42)
} else {
  Id(0)
}
</code></pre>

<p>```</p>

<p>Note that this still <em>would not</em> have solved the <code>toString</code> problem, since the output would simply have been <code>http://service.com?id=Some(Id(42))</code> or the dreaded <code>http://service.com?id=None</code>!</p>

<h3><code>toString</code> is a bad concept anyway</h3>

<p>The real problem is one that transcends programming language design. (Later in this post I&rsquo;ll show languages that don&rsquo;t have <code>toString</code> but still easily allow a similar problem.)</p>

<p>The real problem is that strings are used for <em>multiple</em> purposes. Some are used just for debugging, showing an internal representation of data. Some are used for &ldquo;human&rdquo; reading. In fact, many languages distinguish between these two purposes: Lisp has <a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_wr_pr.htm"><code>write</code>, <code>prin1</code>, <code>print</code>, <code>pprint</code></a>; Scheme has <a href="http://www.scheme.com/tspl3/io.html"><code>write</code> and <code>display</code></a>; Ruby has <a href="http://ruby-doc.org/core-2.0.0/Object.html"><code>to_s</code> and <code>to_str</code></a>; Python has <a href="http://docs.python.org/2/library/functions.html"><code>repr</code> and <code>str</code></a>.</p>

<p>One is often directed to override the &ldquo;human-oriented&rdquo; version of these mechanisms (implementing one&rsquo;s own special non-default format). In Java and Scala, that&rsquo;s <code>toString</code>. But this is precisely the problem. We are <em>encouraged</em> to abuse this built-in mechanism for getting a string from an object that is supposed to mean something in the <em>context of an application</em>. Yes, <code>Some(Id(42))</code> is a useful human-readable string, but it&rsquo;s not what I want to put into a URL for an ID parameter!</p>

<p>Instead of piggybacking on <code>toString</code>, we should call a spade a spade, and define our own methods whose name is actually informative and tells us for what <em>purpose</em> we are asking for a string.</p>

<p>Let&rsquo;s refactor the code:</p>

<p>```scala
  // Wrapper class
  case class Id(id: Int) {</p>

<pre><code>// Special method for turning to URL string fragment
def toUrlString = id.toString
</code></pre>

<p>  }</p>

<p>  /**</p>

<pre><code>@param name User name to look up
@return Some(ID of user) if found, else None
*/
</code></pre>

<p>  def findId(name: String): Option[Id] =</p>

<pre><code>if (name == "name") {
  Some(Id(42))
} else {
  None
}
</code></pre>

<p>  /<em>* Only ever use a String to create a URL. </em>/
  def makeUrl(id: String): String = s"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"</p>

<p>  /<em>* Simulate making the Web request. </em>/
  def getUrl(url: String): Unit = println(url)</p>

<p>  def main(args: Array[String]): Unit = {</p>

<pre><code>val id = findId("name")
// Will not compile because Option[Id] does not have toUrlString
//getUrl(makeUrl(id.toUrlString))
</code></pre>

<p>  }
```</p>

<p>Now the code that was creating a junk URL will no longer compile: <code>id</code> is of type <code>Option[Id]</code> but that type does <em>not</em> have a <code>toUrlString</code> method. Mission accomplished!</p>

<p>To fix the code to get it compile, we handle both the case in which the ID is not found and the case in which it is:</p>

<p>```scala</p>

<pre><code>// Will not compile because Option[Id] does not have toUrlString
//getUrl(makeUrl(id.toUrlString))

id match {
  case None =&gt; println("No id found!")
  case Some(n) =&gt; getUrl(makeUrl(n.toUrlString))
}
</code></pre>

<p>```</p>

<p>Simple!</p>

<h2>Other possible designs</h2>

<h3>OO vs. functional</h3>

<p>The fix presented was in <em>object-oriented</em> style, adding a method <code>toUrlString</code> to a class. The other solution is the <em>functional</em> style, leaving the <code>Id</code> class alone, and writing an external function instead:</p>

<p>```scala
  case class Id(id: Int)</p>

<p>  def toUrlString(id: Id) = id.toString
```</p>

<p>with</p>

<p>```scala</p>

<pre><code>id match {
  case None =&gt; println("No id found!")
  case Some(n) =&gt; getUrl(makeUrl(toUrlString(n)))
}
</code></pre>

<p>```</p>

<p>There are advantages and disadvantages to either solution.</p>

<h3>More advanced OO</h3>

<p>It would be very natural, given a whole set of domain classes in addition to <code>Id</code>, to want all of them to have a <code>toUrlString</code>. Then the natural thing to do is to create a mini-universe (parallel to the <code>toString</code> universe) by creating a hierarchy:</p>

<p>```scala
  trait UrlString {</p>

<pre><code>def toUrlString: String
</code></pre>

<p>  }</p>

<p>  case class Id(id: Int) extends UrlString {</p>

<pre><code>override def toUrlString = id.toString
</code></pre>

<p>  }</p>

<p>  case class &hellip;(&hellip;) extends UrlString {</p>

<pre><code>override def toUrlString = ...
</code></pre>

<p>  }
```</p>

<h3>Advanced string interpolation with OO</h3>

<p>In fact, Scala and other languages with advanced string interpolation facilities allow yet another refactoring by making sure that what gets into a URL isn&rsquo;t just an arbitrary string in the first place!</p>

<p>Below we define a string interpolator that only operates on objects of classes that implement the trait <code>UrlString</code>, and therefore does away with an explicit call to <code>toUrlString</code>:</p>

<p>```scala
  implicit class UrlHelper(val sc: StringContext) extends AnyVal {</p>

<pre><code>def url(args: UrlString*): String = {
  val strings = sc.parts.iterator
  val expressions = args.iterator
  val buf = new StringBuffer(strings.next)
  while (strings.hasNext) {
    buf append expressions.next.toUrlString
    buf append strings.next
  }
  buf.toString
}
</code></pre>

<p>  }</p>

<p>  /<em>* Only ever use UrlString to create a URL. </em>/
  def makeUrl(id: UrlString): String = url"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"
```</p>

<p>with</p>

<p>```scala</p>

<pre><code>id match {
  case None =&gt; println("No id found!")
  case Some(n) =&gt; getUrl(makeUrl(n))
}
</code></pre>

<p>```</p>

<p>This may or may not be overengineering.</p>

<h3>Advanced string interpolation with FP</h3>

<p>The functional approach doesn&rsquo;t like inheritance in the domain classes. We can implement it with <a href="http://en.wikipedia.org/wiki/Type_class">type classes</a> (a concept first pioneered in Haskell in the late 1980s) by means of implicits in Scala, in order to implement <code>toUrlString</code> outside of a class hierarchy but also allow it to be used in a constrained generic way. A full discussion of this is outside the scope of this post, but the basic point is that with type classes, one can write code that does <em>not</em> depend on an inheritance hierarchy. If you&rsquo;re used to monkey-patching in dynamic languages, think of it as compile-time monkey-patching.</p>

<p>```scala
  // A type class
  trait UrlString[A] {</p>

<pre><code>def toUrlString(a: A): String
</code></pre>

<p>  }</p>

<p>  // Wrapper class
  case class Id(id: Int)</p>

<p>  // Implement the type class UrlString for Id
  implicit object IdToUrlString extends UrlString[Id] {</p>

<pre><code>override def toUrlString(a: Id) = a.id.toString
</code></pre>

<p>  }</p>

<p>  implicit class UrlHelper(val sc: StringContext) extends AnyVal {</p>

<pre><code>def url[A: UrlString](args: A*): String = {
  val strings = sc.parts.iterator
  val expressions = args.iterator
  val buf = new StringBuffer(strings.next)
  while (strings.hasNext) {
    buf append implicitly[UrlString[A]].toUrlString(expressions.next)
    buf append strings.next
  }
  buf.toString
}
</code></pre>

<p>  }</p>

<p>  /<em>* Anything &ldquo;viewable&rdquo; as UrlString can be used to create a URL. </em>/
  def makeUrl<span id=" A">A: UrlString</span>: String = url"<a href="http://service.com?id=$id">http://service.com?id=$id</a>"
```</p>

<h2>The final string gotcha</h2>

<p>You may have noticed that there is still primitive obsession in this sample code: URLs are presented as <code>String</code> for simplicit. In real life, I use builders such as <code>URIBuilder</code> and <code>HttpGet</code> (Java <a href="http://hc.apache.org/">Apache HttpComponents</a>) or more sophisticated Scala-specific libraries such as <a href="http://spray.io/">Spray</a>.</p>

<h2>Languages without the <code>toString</code> problem</h2>

<p>There actually are quite a few languages that don&rsquo;t have this <code>toString</code> problem, or at least have it to a lesser degree.</p>

<h3>C</h3>

<p>There is no friendly generic conversion to a string (uh, really just a pointer to a null-terminated chunk of <code>char</code>) in C. The closest thing is using the type-unsafe <code>printf</code> family of functions, but you have to do almost all the work if you have some complicated <code>struct</code> and want to turn it into a C string.</p>

<h3>C++</h3>

<p>C++ introduced iostreams, where f you follow certain conventions and overload <code>operator&lt;&lt;</code> for every domain class of interest, you can build up decent looking strings, without using inheritance.</p>

<p>Or you could do the object-oriented thing and set up a hierarchy with a <code>ToString</code> abstract base class. But C++ does not come with everything already inheriting from an <code>Object</code>.</p>

<h3>Haskell</h3>

<p>Haskell does not force a <code>toString</code> on everything, but provides a <a href="http://www.haskell.org/tutorial/stdclasses.html"><code>Show</code> type class</a> for convenience in the standard prelude. It is easy (and convenient for debugging) to just tack on <code>deriving Show</code> and then call <code>show</code> to convert stuff to a string. This means that one can get lazy and fall into the same design traps as mentioned in the very first code example above. Again, the solution is to refuse to abuse <code>show</code>, and to use a different name instead for converting something to a string for a particular purpose.</p>

<h3>Go</h3>

<p>Go was invented at Google as a modernized C. It does not have classes, but does have <a href="http://research.swtch.com/interfaces">dynamic interfaces</a>. All that is required for a user-defined type to satisfy an interface is to implement the method <code>String()</code> returning a <code>string</code>. Basically, this makes the type implement the interface <a href="http://golang.org/pkg/fmt/#Stringer">fmt.Stringer</a>. Again, if you don&rsquo;t implement <code>String() string</code> for your type, then you will get a compile-time error when trying to treat it as a string.</p>

<p>Superficially, this sounds like Haskell type classes, but it&rsquo;s much more limited, because Go does not have generics and Go is only single dispatch. Go&rsquo;s interfaces really implement a kind of structural subtyping.</p>

<h3>Standard ML</h3>

<p><a href="http://www.standardml.org/">Standard ML</a> does not have the <code>toString</code> problem. It does, by convention, supply a <code>toString</code> function in many modules in the <a href="http://www.standardml.org/Basis/">Standard ML Basis Library</a>, such as <a href="http://www.standardml.org/Basis/integer.html">Int</a> and <a href="http://www.standardml.org/Basis/real.html">Real</a> and <a href="http://www.standardml.org/Basis/bool.html">Bool</a>, but these are just conventions and do not participate in any kind of unified conversion to string. If you want to convert anything besides a primitive type to a string, you have to write the conversion function yourself.</p>

<p>Furthermore, Standard ML, as a rather opinionated and <a href="http://mitpress.mit.edu/books/definition-standard-ml">&ldquo;purist&rdquo; language</a>, designed specifically for static simplicity, semantic minimalism, and <a href="http://mlton.org/">runtime efficiency</a>, does not believe in type classes, so there is no way to write a function that at runtime is generic over what can be turned into a string.</p>

<p>The best you can do is write something that is functorized, but then you have to apply it in a statically known context:</p>

<p>```sml
signature TO_STRING =
  sig</p>

<pre><code>type t
val toString : t -&gt; string
</code></pre>

<p>  end</p>

<p>functor DoStuff(ToString : TO_STRING) =
  struct</p>

<pre><code>fun doubleString (stuff: ToString.t) =
  let
    val s = ToString.toString stuff
  in
    s ^ s
  end
</code></pre>

<p>  end</p>

<p>structure MyStuff : TO_STRING =
  struct</p>

<pre><code>type t = int * bool
fun toString (i, b) =
  "(" ^ Int.toString i ^ ", " ^ Bool.toString b ^ ")"
</code></pre>

<p>  end</p>

<p>structure DoMyStuff = DoStuff(MyStuff)
```</p>

<p>with</p>

<p><code>sml
DoMyStuff.doubleString (42, true)
(* result is the string "(42, true)(42, true)" *)
</code></p>

<p>Since the Standard ML ecosystem is so minimalist, it&rsquo;s hard to fall into the <code>toString</code> trap, because you would have to set it all up yourself.</p>

<h3>OCaml</h3>

<p>OCaml, like Standard ML, does not provide a generic <code>toString</code> out of the box, but the OCaml ecosystem is much more practically oriented.</p>

<p>There is a <a href="http://en.wikipedia.org/wiki/Camlp4">pre-processor for OCaml</a> that can be used to generate convenient printers for types, <a href="https://github.com/ocsigen/deriving"><code>deriving</code></a>. There is also an S-expression based generator, <a href="http://realworldocaml.org/v1/en/html/data-serialization-with-s-expressions.html">Sexplib</a>. But these are mechanically generated, rather than part of something generic at runtime.</p>

<p>Of course, one could also use the <a href="http://caml.inria.fr/pub/docs/manual-ocaml-4.01/objectexamples.html">object-oriented part of OCaml</a> to make a generic &ldquo;to string&rdquo; hierarchy starting with a suitable interface:</p>

<p>```ocaml
class type convert_to_string =
  object</p>

<pre><code>method to_string : string
</code></pre>

<p>  end
```</p>

<p>But I don&rsquo;t actually know many people who use the object-oriented features of OCaml!</p>

<h2>Conclusion</h2>

<p>An annoying bug I temporarily created in my code led me to take stock of the state of <code>toString</code> design choices in various programming languages, and also consider how we can better escape fragility in our code, independent of whatever language we are using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surprised by the Go programming language's treatment of nil]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/10/31/surprised-by-the-go-programming-languages-treatment-of-nil/"/>
    <updated>2013-10-31T23:38:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/10/31/surprised-by-the-go-programming-languages-treatment-of-nil</id>
    <content type="html"><![CDATA[<p>{% img <a href="http://golang.org/doc/gopher/frontpage.png">http://golang.org/doc/gopher/frontpage.png</a> Go %}</p>

<p>So I happened to see an <a href="http://tip.golang.org/doc/go1.2">announcement of Go version 1.2</a>. I saw something that disturbed me, having to do with <code>nil</code>, a <a href="/blog/2013/06/29/nil-non-determinism-exceptions/">&ldquo;favorite&rdquo; topic of mine</a>.</p>

<!--more-->


<h2>What I know about Go</h2>

<p>I don&rsquo;t currently use the <a href="http://golang.org/">Go programming language</a>, although there actually is a local Pittsburgh Go programming meetup group, the <a href="http://www.meetup.com/Go-Steel-Programmers/">Go Steel Programmers</a>, whose meetings I have never attended.</p>

<p>Some months ago I did, out of curiosity (and respect for any new language that I hear about people actually using to get stuff done), work through the <a href="http://tour.golang.org/">tour of Go</a> tutorial, to learn about the Go language. I installed packages on my machine, and wrote some compiling and running programs. I know just enough that I could code in Go for some project if I wanted to.</p>

<h2><code>nil</code></h2>

<p>What caught my eye in the Go 1.2 announcement was a <a href="http://docs.google.com/document/d/14DgGJKGQeBTNJDXo3YxnlSwv7ouRqvj7BMmZw17vWV0/pub">note about changes in the semantics regarding <code>nil</code></a>.</p>

<p>For the record, I don&rsquo;t believe any new programming languages should be invented that have the <code>nil</code> construct, <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Hoare&rsquo;s &ldquo;billion dollar&rdquo; mistake</a>. I&rsquo;ve already <a href="http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/">previously given a talk</a> about why, so I won&rsquo;t repeat the arguments here.</p>

<p>But I think Russ Cox&rsquo;s note about <code>nil</code> checks speaks for itself.</p>

<p>It said that Go 1.2 tightens things up so that various uses (directly or indirectly) of <code>nil</code> will cause a <em>runtime panic rather than silently producing an unusable pointer</em>.</p>

<p>Read that again: until Go 1.2, you could get <em>silent</em> bad behavior, an <em>unusable</em> pointer. This from a language that purports to be &ldquo;statically typed&rdquo;, improve on C, and provide <a href="http://golang.org/doc/faq#unions"><em>memory safety guarantees</em></a>.</p>

<p>Before Go 1.2, a chain of code involving a <code>nil</code> could result in behavior of which <a href="http://swtch.com/~rsc/">Russ Cox</a> wrote:</p>

<p>{% blockquote %}
The current behavior is at best merely historical accident; it was definitely not thought through or discussed.
{% endblockquote %}</p>

<p>There is also a note about a particular special case:</p>

<p>{% blockquote %}
(it seemed like a good idea at a time)
{% endblockquote %}</p>

<p>You can read the <a href="http://docs.google.com/document/d/14DgGJKGQeBTNJDXo3YxnlSwv7ouRqvj7BMmZw17vWV0/pub">whole document about <code>nil</code></a> yourself. You will find that it is still not a formal spec, but more a rationale of various special cases and possible implementation details.</p>

<h2>C culture</h2>

<p>Go arose from C culture. It was invented by those in C culture who wanted an improvement over the known problems of C. Unfortunately, I perceive it as today&rsquo;s C, in the same way that the C invented in the 1970s was born with the problems that one could have avoided already at that very time.</p>

<h2>Conclusion</h2>

<p>The Go language continues to evolve, which is good, but I was surprised that the full ramifications of something as dangerous as rampant <code>nil</code> were not thought about up front.</p>
]]></content>
  </entry>
  
</feed>
