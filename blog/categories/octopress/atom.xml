<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2014-12-22T02:55:26-05:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nil, non-determinism, exceptions: a journey in debugging the software that generates my blog]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions/"/>
    <updated>2013-06-29T18:15:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/29/nil-non-determinism-exceptions</id>
    <content type="html"><![CDATA[<p>I mentioned in my <a href="/blog/2013/06/24/introducing-this-new-programming-blog/">initial post for this blog</a> that I have had some problems with the software I use to generate my personal blog, <a href="http://octopress.org/">Octopress</a>, and was thinking of migrating to a different platform that might in some ways be more robust to such problems. I ended up not doing so, and I still stand by that decision, but I just yet again ran into a problem with Octopress.</p>

<p>Here I report on how I figured out the problem and begin a conversation about the nature of error handling and API design.</p>

<!--more-->


<h2>A disclaimer</h2>

<p>I want to emphasize that although I will be critiquing some code, I do not mean to imply that I am a perfect programmer or that this software is of really poor quality. I have written software in the past that has crapped out with <code>null</code> or <code>nil</code> errors. In addition, the fact that I basically trust and use this software to drive my blogs is a reflection of the fact that it mostly works. Almost all software that has been written, is being written now, and will be written in the future has bugs. Every day we all trust and use software that we know has bugs. And this blogging platform I use is the product of many, many volunteers who contribute to the world through open source through the goodness of their hearts. I happily use this software, warts and all, and am grateful to everyone who works to maintain and improve it!</p>

<h2>Blog generation</h2>

<p>The problem arose when I tried to generate <a href="http://franklinchen.com/">my personal blog</a>. I got a <a href="http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/"><code>nil</code></a> failure.</p>

<p>Here&rsquo;s the error message (I have omitted the 46-line stack trace):</p>

<pre><code class="console">      Generating... Liquid Exception: undefined method `sub' for nil:NilClass in atom.xml
</code></pre>

<p>This is, unfortunately, an example of an error message that is next to useless, and should <em>never</em> appear. I have stated that <a href="/blog/2013/06/26/we-should-not-create-this-kind-of-terrible-error-message-for-the-end-user/">we as programmers should not generate useless end user error messages</a>, and of course, in context, I am an end user of the blog generating software I use.</p>

<h2>Debugging and finding the root cause</h2>

<p>Thanks to all the Ruby libraries being open source and installed on my machine, by using the stack trace and <code>debugger</code>, I figured out the immediate cause of the stray <code>nil</code>.</p>

<p>It turns out that Octopress uses Jekyll, which uses <a href="https://github.com/tmm1/pygments.rb">pygments.rb</a> to do HTML highlighting of code blocks. (I use Octopress precisely because of its built-in support for code block highlighting.)</p>

<p>The bug is that the code in Jekyll that does syntax highlighting using Pygments makes an assumption that the return value of <code>Pygments.highlight()</code> is never <code>nil</code>:</p>

<pre><code class="ruby">              @renderer ||= Class.new(Redcarpet::Render::HTML) do
                def block_code(code, lang)
                  lang = lang &amp;&amp; lang.split.first || "text"
                  output = add_code_tags(
                    Pygments.highlight(code, :lexer =&gt; lang, :options =&gt; { :encoding =&gt; 'utf-8' }),
                    lang
                  )
                end

                def add_code_tags(code, lang)
                  code = code.sub(/&lt;pre&gt;/,'&lt;pre&gt;&lt;code class="' + lang + '"&gt;')
                  code = code.sub(/&lt;\/pre&gt;/,"&lt;/code&gt;&lt;/pre&gt;")
                end
              end
</code></pre>

<p>Well, it <em>can</em> be <code>nil</code> and was for me, and therefore <code>add_code_tags</code> was calling <code>code.sub()</code> with <code>code</code> being <code>nil</code>.</p>

<p>The bug exists in all the more recent versions of pygments.rb, including 0.4.2 (which is used for my personal blog) and 0.3.7 (which is used for this blog) and the latest released version, 0.5.1. The bug was actually reported by someone two weeks ago, and I added extra commentary, but <a href="https://github.com/tmm1/pygments.rb/issues/78">it has not yet been fixed</a>, so I plan to contribute a fix and submit a pull request.</p>

<h2>Whose responsibility to check for <code>nil</code>?</h2>

<p>Whenever there is an error, one has to ask whose responsibility it was to</p>

<ul>
<li>detect the error</li>
<li>handle the error</li>
</ul>


<p>I think it is poor practice to engage in random and spotty &ldquo;defensive programming&rdquo; that checks for <code>nil</code> here and there, willy-nilly, just to avoid a big program crash. There should be clearly delineated boundaries of error handling.</p>

<p>In this case, it is surprising that a syntax highlighter for some text could return <code>nil</code>. One would think that if a syntax highlighter got confused, it could return the text verbatim, for example, without any special formatting. (By the way, don&rsquo;t get me started on the abominable use of HTML string hacking in this code instead of, say, building a proper HTML AST; I&rsquo;ll write about that topic later.)</p>

<h2>Documentation of API</h2>

<p>Unfortunately, the documentation of the Pygments API was incomplete in <code>lib/pygments/popen.rb</code>, where <code>highlight</code> is defined:</p>

<pre><code class="ruby">    # Public: Highlight code.
    #
    # Takes a first-position argument of the code to be highlighted, and a
    # second-position hash of various arguments specifiying highlighting properties.
    def highlight(code, opts={})
      # If the caller didn't give us any code, we have nothing to do,
      # so return right away.
      return code if code.nil? || code.empty?

      # Callers pass along options in the hash
      opts[:options] ||= {}

      # Default to utf-8 for the output encoding, if not given.
      opts[:options][:outencoding] ||= 'utf-8'

      # Get back the string from mentos and force encoding if we can
      str = mentos(:highlight, nil, opts, code)
      str.force_encoding(opts[:options][:outencoding]) if str.respond_to?(:force_encoding)
      str
    end
</code></pre>

<h2>A problem with dynamically typed language culture</h2>

<p>The documentation doesn&rsquo;t actually fully specify what the arguments can be, and does not specify what the result should be either! This is a glaring drawback of most code that I have seen in dynamically typed languages such as Ruby. People don&rsquo;t document exactly what can come in or out. A newcomer to a code base (such as me in this situation) cannot just read off the types and know immediately what is going on and what has been promised and what is delivered by a function. As a result, the code reader has to play compiler and read a lot more code to try to figure out what is going on.</p>

<p><em>In principle</em>, someone writing code in a dynamically typed language could provide very helpful comments that amount to informal type annotations, but in practice people do not. I have found in my two decades of programming that human psychology trumps theoretical possibility any day. If something is optional, people won&rsquo;t do it, unless there is a very strong de facto community standard. (It turns out, for example, that what I really admire about the Ruby community is that for some reason, there is a very strong de facto community standard of doing at least some <em>unit testing</em> as part of the whole development process. I find this sadly missing in some statically typed language communities.)</p>

<p>In code in a statically typed language such as OCaml (or Haskell or Scala), I would expect to see:</p>

<pre><code class="ocaml">let highlight (code : string) (opts : my_map) : string = //...
</code></pre>

<p>and expect that the return value should be a <code>String</code>, or</p>

<pre><code class="ocaml">let highlight (code : string) (opts : my_map) : string option = //...
</code></pre>

<p>to indicate that the return value could be either <code>Some(formatted_code)</code> or <code>None</code>.</p>

<h2><code>nil</code> all over the place</h2>

<p>Reading the Ruby code, I saw that the situation is even more complex than I thought:</p>

<pre><code class="ruby">      # If the caller didn't give us any code, we have nothing to do,
      # so return right away.
      return code if code.nil? || code.empty?
</code></pre>

<p>Wow: <code>code</code> can be <code>nil</code>, in which case <code>nil</code> is returned.</p>

<p><em>All code that can return <code>nil</code> should document this fact so that the caller knows what to do.</em> Ideally, the writer of pygments.rb should have documented this fact, and then the writer of Jekyll would in turn have added <code>nil</code> checking in its rendering code.</p>

<p>Furthermore, it turns out that <code>mentos()</code> can return <code>nil</code> on a non-<code>nil</code> code string! This was a surprise to me.</p>

<h2><code>nil</code> is not even the real problem here: non-determinism is</h2>

<p><code>mentos()</code> is not very well documented. Until I read this code, I didn&rsquo;t realize that pygments.rb actually embeds a call to the Python interpreter to execute the Python Pygments parser to do the real work! In <code>lib/pygments/popen.rb</code>:</p>

<pre><code class="ruby">    # Our 'rpc'-ish request to mentos. Requires a method name, and then optional
    # args, kwargs, code.
    def mentos(method, args=[], kwargs={}, original_code=nil)
      # Open the pipe if necessary
      start unless alive?

      begin
        # Timeout requests that take too long.
        timeout_time = 8

        Timeout::timeout(timeout_time) do
          # ...[I omitted some code]
        end
      rescue Timeout::Error
        # If we timeout, we need to clear out the pipe and start over.
        @log.error "[#{Time.now.iso8601}] Timeout on a mentos #{method} call"
        stop "Timeout on mentos #{method} call."
      end

    rescue Errno::EPIPE, EOFError
    stop "EPIPE"
    raise MentosError, "EPIPE"
    end
</code></pre>

<p>It turns out that fundamental problem is not <code>nil</code> so much as <em>non-determinism</em>: my computer was under heavy load when I was generating my blog, and therefore the timeout kicked in and caused a failure to communicate with the Python process and therefore for <code>nil</code> to end up being returned. This non-determinism is worse than <code>nil</code>. I think that in a situation like this, an <em>exception</em> is called for. <code>highlight()</code> should actually raise an exception, which would then be propagated to Jekyll, which could give a useful error message about the timeout. I think this is a better design than return <code>nil</code> (or if using a statically typed language, a <code>None</code>).</p>

<p>I was also disappointed that logging was used in this code, indicating that it was known that bad things could happen, but the logged information was not used in generating a useful exception.</p>

<p>Amusingly, upon discovering the logging code, I used it, setting the magic environment variable <code>MENTOS_LOG</code> (from reading the code) to a file, so that I could see what happens, and verify that the timeout happened:</p>

<pre><code class="console"># Logfile created on 2013-06-29 10:26:19 -0400 by logger.rb/36483
I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:19-04:00] Starting pid 16533 with fd 10.
I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:19-04:00] Out header: {"method":"highlight","args":null,"kwargs":{"lexer":"console","options":{"encoding":"utf-8","outencoding":"utf-8"},"fd":10,"id":"TVQSJNBV","bytes":147}}
E, [2013-06-29 10:26 #13799] ERROR -- : [2013-06-29T10:26:27-04:00] Timeout on a mentos highlight call
I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:27-04:00] Killing pid: 16533. Reason: Timeout on mentos highlight call.
I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:27-04:00] Killing pid: . Reason: Exiting
</code></pre>

<h2>Testing</h2>

<p>It turns out that there <em>is</em> a place where the intended behavior is in a sense documented: the unit tests in <code>test_pygments.rb</code>:</p>

<pre><code class="ruby">  def test_returns_nil_on_timeout
    large_code = REDIS_CODE * 300
    code = P.highlight(large_code) # a 30 mb highlight request will timeout
    assert_equal nil, code
  end
</code></pre>

<p>The test creates some huge string in hope of triggering a timeout, and then asserts that the result should be <code>nil</code>!</p>

<p>OK, fair enough: assuming that the Jekyll authors knew of this intention, then it was Jekyll&rsquo;s responsibility to test for <code>nil</code> in the call to <code>Pygments.highlight()</code>.</p>

<p>The test is not very satisfactory because it artificially tries to generate a timeout. Instead, one could do some mocking or refactoring of <code>mentos()</code>.</p>

<h2><code>nil</code> is still not OK; but are exceptions OK?</h2>

<p>So everything is OK, now that we can take <code>nil</code> to mean a timeout, right? No, actually, <code>highlight()</code> can still return a <code>nil</code> just because <code>code</code> was <code>nil</code>. It is bad to bin random different failure modes into one return value. Personally, I would choose to enforce that the input <code>code</code> is never <code>nil</code> and that the output is never <code>nil</code>, and that an exception is raised if there is a timeout.</p>

<p>An alternative is to not use an exception, but use a union success/failure type instead. This is the route that <a href="http://blog.stackmob.com/2013/03/why-we-avoid-throwing-exceptions-at-stackmob/">StackMob uses for its Scala code</a>. Other Scala developers such as <a href="http://blog.jessitron.com/2013/06/whats-dirtier-than-comments-exceptions.html">Jessica Kerr have been arguing against the use of exceptions also</a>.</p>

<p>Google&rsquo;s systems-level statically typed language <a href="http://golang.org/">Go</a> deliberately <a href="http://golang.org/doc/faq#exceptions">does not even have exceptions</a>, and therefore mandates a style of error handling that involves <a href="http://golang.org/doc/articles/error_handling.html">returning a success and failure everywhere</a>.</p>

<p>I think there are situations for exceptions and situations for reifying errors as ordinary values in a success/failure object. I will explore this topic further in this blog. Note that even in the Haskell community, there is continued debate over how to handle errors; a famous post compares <a href="http://blog.ezyang.com/2011/08/8-ways-to-report-errors-in-haskell-revisited/">eight different ways to handle errors in Haskell</a>. There is no consensus because there are a lot of tradeoffs involved when it comes to error handling.</p>

<h2>My fix</h2>

<p>For now, before I propose to pygments.rb that an exception be raised (this would be least intrusive to Jekyll, whose source code would not need to be changed for the exception to propagate usefully), I simply hacked <code>8</code> to <code>80</code> to avoid a timeout!</p>

<h3>(Update of 2013-12-18)</h3>

<p>The <code>pygments.rb</code> library <a href="https://github.com/tmm1/pygments.rb/commit/e0ed7f73f03aa59680b469f4f26e208d3cf8d999">has finally been updated with a <code>MENTOS_TIMEOUT</code> environment variable</a>.</p>

<p>This is obviously a short-term hack, and I don&rsquo;t see how a typical Octopress user would even find out about this new environment variable, but until I implement a better solution and submit a pull request to the <code>pygments.rb</code> team, I have no right to complain!</p>

<h2>Conclusion</h2>

<p>I&rsquo;ve used my recent frustration at being unable to publish my personal blog as a vehicle to begin a conversation about error handling and the issues of API design and documentation in the face of errors. I hope you enjoyed the ride.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing this new programming blog]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/06/24/introducing-this-new-programming-blog/"/>
    <updated>2013-06-24T09:40:00-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/06/24/introducing-this-new-programming-blog</id>
    <content type="html"><![CDATA[<p>Hi. My name is Franklin Chen. I already have a <a href="http://franklinchen.com/">personal Web site and blog</a>.</p>

<p>But I ended up only writing <a href="http://franklinchen.com/blog/categories/programming/">a little bit about programming on that blog</a>.</p>

<p>So I decided it was time to start a separate blog to devoted entirely to computer programming. The problem with the all-in-one personal blog was that I ended up never really working up a momentum to post the kinds of articles I wanted to write about programming.</p>

<h2>Why &ldquo;The Conscientious Programmer&rdquo;?</h2>

<p>At some point in the past year or two, I reflected on how I could best summarize my attitudes and aspirations as a programmer, as someone who loves programming and also works as a professional software developer.</p>

<p>I came up with the decidedly non-sexy term <em>conscientious programmer</em>. It is also a term that requires explanation, because you could easily interpret it as having a connotation that is moralistic, pretentious, or boring!</p>

<p>It is impossible to summarize in a sound bite what I mean by the term, so I have created this blog in order to continually illustrate, by example, the kinds of technical and other issues that come up in software development that I grapple with.</p>

<p>However, since a sound bite is required in some circumstances, here&rsquo;s what I currently have:</p>

<p><blockquote><p>I am a conscientious computer programmer, committed to designing, building, and testing correct, efficient, documented, maintainable software that meets users&#8217; real needs.</p></blockquote></p>

<p>My material will come from my own experiences (successes and failures, past and present) as well as from those of others. See the <a href="/about/">About page</a> for more sound bites about what this blog will be about.</p>

<p>Let&rsquo;s start immediately with my personal experience from just the past couple of days!</p>

<h2>Future topics</h2>

<p>But first, here is a little sample of topics I will write about in the future:</p>

<ul>
<li>positive and negative experiences with statically typed languages</li>
<li>positive and negative experiences with dynamically typed languages</li>
<li>the good and bad of the polyglot programming world</li>
<li>what is object-oriented programming anyway?</li>
<li>what is functional programming anyway?</li>
<li>Agile notions</li>
<li>test-driven development, behavior-driven development, other testing topics</li>
<li>static analysis</li>
<li>code performance</li>
<li>human performance</li>
<li>controversies over the adjective &ldquo;pragmatic&rdquo;</li>
<li>how much theory should one know or use?</li>
<li>how to teach</li>
<li>how to learn</li>
<li>how to focus and not be a dilettante</li>
<li>how to spread ideas</li>
<li>is syntax important?</li>
<li>are macros a good idea?</li>
<li>are unsound type systems justified?</li>
<li>what is a type system anyway or what should it be?</li>
<li>monads</li>
<li>editors and IDEs</li>
<li>are software patterns a mistake in disguise?</li>
<li>software evolution and maintenance</li>
<li>planning for the future vs. getting it done today</li>
<li>role of emotion in decision making</li>
<li>what is &ldquo;community&rdquo;?</li>
<li>politics of open source vs. free software</li>
<li>open standards</li>
<li>questions of diversity in our profession</li>
<li>education</li>
</ul>


<h2>The dilemmas I encountered when deciding to create this blog</h2>

<p>I already encountered a dilemma some years ago when I thought that I should have a personal blog to regularly post to. I had messed around with Blogger and WordPress and they were not at all suitable for me. Luckily, I discovered <a href="http://octopress.org/">Octopress</a> and it got me going very quickly. I&rsquo;m still using it.</p>

<p>If all were going smoothly with the personal blog, then I probably would not have any dilemma when deciding to create the new blog; I would just use exactly the same Octopress platform.</p>

<p><em>Or would I?</em></p>

<h3>Desire for novelty: good or bad?</h3>

<p>I am not immune to the thrill of novelty. I am not an extreme <a href="http://en.wikipedia.org/wiki/Early_adopter">early adopter</a>, but I also do not entirely subscribe to the philosophy <a href="http://en.wiktionary.org/wiki/if_it_ain%27t_broke,_don%27t_fix_it">&ldquo;if it ain&rsquo;t broke, don&rsquo;t fix it&rdquo;</a>. I like opportunities for doing something differently and better than in the past, but I like to evaluate these rationally. This is an example of what I mean by &ldquo;conscientious programmer&rdquo;: <em>always be aware of risks and tradeoffs when making any kind of decision</em>.</p>

<p>One thing that is sometimes forgotten in the rush to make a decision is that it is premature to immediately start making lists of risks and tradeoffs. First, you have to step back and figure out what the real goals are. Many projects fail because the assessments and the followup actions were <em>correct</em>, but toward the <em>wrong</em> goal. <em>Solving the correct problem</em> is more important than <em>solving the wrong problem correctly</em>.</p>

<p>In the case of choosing which software to use for my new blog, there were actually several considerations.</p>

<h3>Unstable branch of Octopress</h3>

<p>Octopress&rsquo;s stable <a href="https://github.com/imathis/octopress"><code>master</code> branch</a> is a continuation of version 2.0. At some point for my personal blog, I got excited about trying out the <a href="https://github.com/imathis/octopress/tree/2.1">unstable <code>2.1</code> branch</a> because of various improvements. I migrated over, and periodically endured a surprising amount of pain. It wasn&rsquo;t just because I had to manually move files around and resolve merge conflicts and refactor my config files, but also bugs kept popping up, and I had to spend time fixing them.</p>

<p>In retrospect, <em>it was a mistake being an early adopter</em> of branch <code>2.1</code>. I stopped pulling and merging over a month ago, when it became clear that the migration to <a href="http://jekyllrb.com/">Jekyll</a> 1.0 was causing major refactorings by the developers of the Octopress <code>2.1</code> branch that were breaking everything on my blog.</p>

<p>It would <em>not</em> have been a mistake if my goal were to help test and develop Octopress. That is a noble goal, because Octopress has been a <em>huge</em> positive contributor to the world of blogging, as a static site generator that is programmable and comes with a good default theme (which I still use). But my <em>real goal</em> is to write and post content, not spend my time fixing or configuring Octopress.</p>

<h3>Coming back to Octopress <code>master</code> branch?</h3>

<p>The official recommendation of the Octopress team right now (<a href="https://twitter.com/octopress/status/348465809624027136">as of two days ago, June 22</a>) is to use <code>master</code>, because once <code>2.1</code> is cleaned up, it will actually become <code>3.0</code> and there will be a tested migration path from <code>2.0</code>.</p>

<p>I confess to having a psychological resistance to &ldquo;downgrading&rdquo;, for this new blog, from my <code>2.1</code>-based setup on my personal blog, but this is exactly the moment when it is necessary to remember that I want to be a <em>conscientious</em> programmer.</p>

<h3>Switching to a new blogging platform?</h3>

<p>The idea also occurred to me to use a completely different blogging platform. <a href="http://jaspervdj.be/hakyll/">Hakyll</a> has always seemed appealing to me, because it is driven by Haskell (Octopress is driven by Ruby). I prefer programming in Haskell to programming in Ruby, both because of the static type safety and because of the expected considerable performance improvement in site generation (right now, full generation of my personal blog takes a very long time).</p>

<p>But after looking at Hakyll, and being tempted to get into it, I decided that my real goal is <em>not</em> to spend a lot of time hacking Haskell as a personal side project, and creating cool themes and features for Hakyll, but to get a blog up and running so that I can focus on content for the blog. <a href="http://en.wiktionary.org/wiki/bikeshedding">Bikeshedding</a> is not what I&rsquo;m here for.</p>

<p>So I used Octopress again for this new blog.</p>

<p>By the way, if you are interested in using Octopress, here is a great <a href="http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/">tutorial</a>.</p>

<h3>Flexibility</h3>

<p>Another thing I try to remember is to avoid getting backed into a corner when it comes to decision-making. I like to think about the future as well as the present. <em>What if&hellip;?</em></p>

<p>I know that if I wanted to, in the future I could switch blogging platforms at will, by doing some programming. The decisions that I am making <em>now</em> are not irreversible. Using a programmable static site generator means that I have full control over paths, styles, generation of RSS feeds, insertion of JavaScript-based features (such as the <a href="http://disqus.com/">Disqus</a> commenting system), etc.</p>

<p>Thinking up front about the future and how it might be different and what I might need or want to do in the future is not just idle daydreaming; I find it an essential final step in making a decision <em>now</em> and focusing on action <em>now</em>, with the peace of mind that I no longer have to worry about the future because I already have a <a href="http://en.wikipedia.org/wiki/Plan_B">Plan B</a>. We must always assume possible failure and future change. But we don&rsquo;t have to panic about it.</p>

<h2>Conclusion</h2>

<p>I&rsquo;ve started this new programming blog, using the stable <code>master</code> branch of Octopress. I hope we&rsquo;ll share some interesting experiences here!</p>
]]></content>
  </entry>
  
</feed>
