<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | The Conscientious Programmer]]></title>
  <link href="http://ConscientiousProgrammer.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://ConscientiousProgrammer.com/"/>
  <updated>2014-09-17T23:24:29-04:00</updated>
  <id>http://ConscientiousProgrammer.com/</id>
  <author>
    <name><![CDATA[Franklin Chen]]></name>
    <email><![CDATA[franklinchen@franklinchen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Clojure transducers through types]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/08/07/understanding-cloure-transducers-through-types/"/>
    <updated>2014-08-07T22:58:16-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/08/07/understanding-cloure-transducers-through-types</id>
    <content type="html"><![CDATA[<p>Yesterday, Rich Hickey published a blog post, <a href="http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming">&ldquo;Transducers are Coming&rdquo;</a>, which attracted a lot of attention.</p>

<p>I have a confession to make, which I have made before: I find it very difficult to understand ideas or code not presented with <em>types</em>. So I decided that the only way I could possibly understand what &ldquo;transducers&rdquo; are would be to actually implement them in a typed language. I ended up doing so and am sharing my findings here.</p>

<!--more-->


<h2>Vague types in the original blog post</h2>

<p>Rich informally gave some type signatures in his blog post:</p>

<pre><code class="text">;;reducing function signature
whatever, input -&gt; whatever

;;transducer signature
(whatever, input -&gt; whatever) -&gt; (whatever, input -&gt; whatever)
</code></pre>

<p>This was, unfortunately, not very helpful. It is hard to make sense of this pseudo-notation for types. What is quantified over what? And what is bound to what? I&rsquo;ll explain later what I mean by these questions.</p>

<h2>First discussion thread I saw</h2>

<p>There was much tweeting online about transducers after Rich Hickey&rsquo;s initial announcement; the tweets did not help me, except for links posted to discussion elsewhere.</p>

<p>One of them was <a href="https://news.ycombinator.com/item?id=8143905">on Hacker News</a>. I browsed through it but found it mostly not useful. The problem was that although a lot of interesting Haskell code was thrown around, it tended to be <em>related</em> to transducers but not an <em>exact</em> translation of the concept. I already had my own intuitions about transducers being related to well-known types such as <a href="http://www.haskell.org/haskellwiki/Foldable_and_Traversable">foldables</a>, <a href="http://en.wikipedia.org/wiki/Iteratee">iteratees</a>, <a href="https://lens.github.io/">lenses</a>, etc. That &ldquo;ordinary function composition&rdquo; was involved immediately suggested the connections, because function composition is huge in these existing Haskell libraries.</p>

<p>But what I wanted was to understand transducers <em>as they are</em>, before even thinking about generalizations and comparisons.</p>

<h3>What are the types?</h3>

<p>Rich Hickey <a href="https://news.ycombinator.com/item?id=8144385">informally offered some types</a> (which he said were &ldquo;a la Haskell&rdquo;) to try to help out:</p>

<pre><code class="text">    ;;reducing fn
    x-&gt;a-&gt;x

    ;;transducer fn
    (x-&gt;a-&gt;x)-&gt;(x-&gt;b-&gt;x)
</code></pre>

<p>OK, by using type variables <code>a</code>, <code>b</code>, and <code>x</code>, that indicates what is bound to what. The blog post should have used this notation rather than</p>

<pre><code class="text">;;transducer signature
(whatever, input -&gt; whatever) -&gt; (whatever, input -&gt; whatever)
</code></pre>

<h3>Sample Clojure code</h3>

<p>He also posted some sample Clojure code:</p>

<p><div><script src='https://gist.github.com/b5aefa622180681e1c81.js'></script>
<noscript><pre><code>(require &#39;[clojure.core.async :as a])

(def xform (comp (map inc)
              (filter even?)
              (dedupe)
              (flatmap range)
              (partition-all 3)
              (partition-by #(&lt; (apply + %) 7))
              (flatmap flatten)
              (random-sample 1.0)
              (take-nth 1)
              (keep #(when (odd? %) (* % %)))
              (keep-indexed #(when (even? %1) (* %1 %2)))
              (replace {2 &quot;two&quot; 6 &quot;six&quot; 18 &quot;eighteen&quot;})
              (take 11)
              (take-while #(not= 300 %))
              (drop 1)
              (drop-while string?)
              (remove string?)))

(def data (vec (interleave (range 18) (range 20))))

;; lazily transform the data
(sequence xform data)
;; reduce with a transformation (no laziness)
(transduce xform + 0 data)
;;build one collection from a transformation of another, again no laziness
(into [] xform data)
;;create a recipe for a transformation, which can be subsequently sequenced, iterated or reduced
(iteration xform data)
;;transform everything that goes through a channel - same transducer stack!
(let [c (a/chan 1 xform)]
  (a/thread (a/onto-chan c data))
  (a/&lt;!! (a/into [] c)))</code></pre></noscript></div>
</p>

<h2>Second discussion thread I saw</h2>

<p>Then today, I saw a discussion thread on Reddit, titled <a href="http://www.reddit.com/r/haskell/comments/2cv6l4/clojures_transducers_are_perverse_lenses/">&ldquo;Clojure&rsquo;s Transducers are Perverse Lenses&rdquo;</a>.</p>

<h3>Actual runnable Haskell code</h3>

<p>Rich finally posted some actual <a href="http://www.reddit.com/r/haskell/comments/2cv6l4/clojures_transducers_are_perverse_lenses/">type-checked, runnable Haskell code</a>!</p>

<pre><code class="haskell">-- Transducers in Haskell

mapping :: (a -&gt; b) -&gt; (r -&gt; b -&gt; r) -&gt; (r -&gt; a -&gt; r)
-- Original was (b -&gt; a) -&gt; (r -&gt; a -&gt; r) -&gt; (r -&gt; b -&gt; r)
-- but Michael O'Keefe in comment pointed out this is misleading
mapping f xf r a = xf r (f a)

filtering :: (a -&gt; Bool) -&gt; (r -&gt; a -&gt; r) -&gt; (r -&gt; a -&gt; r)
filtering p xf r a = if p a then xf r a else r

flatmapping :: (a -&gt; [b]) -&gt; (r -&gt; b -&gt; r) -&gt; (r -&gt; a -&gt; r)
flatmapping f xf r a = foldl xf r (f a)

-- for exposition only, yes, conj is gross for lazy lists
-- in Clojure conj and left folds dominate
conj xs x = xs ++ [x]
xlist xf = foldl (xf conj) []

-- build any old list function with its transducer, all the same way
xmap :: (a -&gt; b) -&gt; [a] -&gt; [b]
xmap f = xlist $ mapping f 

xfilter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]
xfilter p = xlist $ filtering p

xflatmap :: (a -&gt; [b]) -&gt; [a] -&gt; [b]
xflatmap f = xlist $ flatmapping f

-- again, not interesting for lists, but the same transform 
-- can be put to use wherever there's a step fn

xform :: (r -&gt; Integer -&gt; r) -&gt; (r -&gt; Integer -&gt; r)
xform = mapping (+ 1) . filtering even . flatmapping (\x -&gt; [0 .. x])


print $ xlist xform [1..5]
-- [0,1,2,0,1,2,3,4,0,1,2,3,4,5,6]
</code></pre>

<p>After this post, I knew it would not take me long to figure out transducers.</p>

<h2>Refactoring his Haskell code</h2>

<p>Two things to notice about the original code:</p>

<ul>
<li>It has long, low-level function types rather than types that actually <em>name</em> the concepts being discussed (<em>reducers</em> and <em>transducers</em>).</li>
<li>It uses hardcoded list types <code>[a]</code>.</li>
</ul>


<h3>Type synonyms and higher-rank types</h3>

<p>Defining lots and lots of types (whether synonyms or <a href="http://www.haskell.org/haskellwiki/Newtype">newtypes</a> is standard practice when programming in a modern typed language. OK, so I defined a type synonym</p>

<pre><code class="haskell">-- Left reduce
type Reducer a r = r -&gt; a -&gt; r
</code></pre>

<p>But what about transducer? This is trickier.</p>

<p>An <em>invalid</em> attempt at a type would be</p>

<pre><code class="haskell">-- Illegal!
type Transducer a b = Reducer a r -&gt; Reducer b r
</code></pre>

<p>because the type variable <code>r</code> is not bound in the type definition. And it would be incorrect to just randomly add <code>r</code> on the left hand side as an extra parameter to the <code>Transducer</code> type, because in fact it is <em>critical</em> that a transducer <em>does not care</em> about the underlying reducer&rsquo;s return type <code>r</code>. How do we write the desired type?</p>

<p>It turns out you need <a href="http://www.haskell.org/haskellwiki/Rank-N_types">higher-rank types</a>. Rank-1 types are not sufficient; we need a rank-2 type to quantify <code>r</code>, to say that a transducer from <code>a</code> to <code>b</code> is a transformation that takes a reducer to a specific <code>r</code> and returns another reducer to the <em>same</em> <code>r</code>.</p>

<pre><code class="haskell">-- Here's where the rank-2 type is needed
type Transducer a b = forall r . Reducer a r -&gt; Reducer b r
</code></pre>

<p>Now we can see more clearly some <em>completely generic</em> ways to create a transducer:</p>

<pre><code class="haskell">mapping :: (a -&gt; b) -&gt; Transducer b a
mapping f xf r a = xf r (f a)

filtering :: (a -&gt; Bool) -&gt; Transducer a a
filtering p xf r a = if p a then xf r a else r
</code></pre>

<h4>A bit of history</h4>

<p>Higher-rank types are a powerful technique for expressing &ldquo;hiding&rdquo; of unnecessary details about types going on somewhere. My first recollection of the real world use of rank-2 types is from 1994 (the year I started using Haskell, although I did not actually use it in my work as a software engineer until 1995), when I was excited to read a paper by John Launchbury and Simon Peyton Jones that solved, using a rank-2 type, a specific, important, practical problem, <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.3299">&ldquo;Lazy Functional State Threads&rdquo;</a>; twenty years later, their <a href="http://hackage.haskell.org/package/base-4.7.0.1/docs/Control-Monad-ST.html">ST monad</a> is still part of the standard library!</p>

<h3>Introducing type classes</h3>

<p>Clojure uses <a href="http://clojure.org/protocols">protocols</a> as an abstraction mechanism, and the &ldquo;magic&rdquo; of transducers uses protocols. In Haskell, type classes are the major abstraction mechanism (this is true of Scala also).</p>

<p>So I abstracted away from the hardcoded list-oriented functions and values in Rich Hickey&rsquo;s Haskell code:</p>

<ul>
<li><code>foldl</code> abstracted to a <code>class Foldable</code></li>
<li><code>conj</code> and empty list <code>[]</code> abstracted to a <code>class Conjable</code></li>
</ul>


<pre><code class="haskell">-- Left fold
class Foldable f where
  fold :: Transducer a (f a)

class Conjable f where
  empty :: f a
  conj :: Reducer a (f a)
</code></pre>

<p>Note our reliance on transducing and reducing from one type <code>a</code> to another, <code>f a</code>.</p>

<h4><code>Foldable</code> constraint</h4>

<p>Unlike <code>mapping</code> and <code>filtering</code>, <code>flatmapping</code> is <em>not completely generic</em>, because it depends on something being <code>Foldable</code> (implementing a <code>fold</code>):</p>

<pre><code class="haskell">flatmapping :: Foldable f =&gt; (a -&gt; f b) -&gt; Transducer b a
flatmapping f xf r a = fold xf r (f a)
</code></pre>

<h4><code>Conjable</code> constraint</h4>

<p>Finally, here&rsquo;s the originally list-specific code that now depends only on <code>Foldable</code> and <code>Conjable</code>:</p>

<pre><code class="haskell">-- I changed Rich Hickey's code to be more general than just list
-- but accept anything Conjable
xlist :: (Foldable f, Conjable f) =&gt; Transducer b a -&gt; f a -&gt; f b
xlist xf = fold (xf conj) empty

-- build any old Foldable function with its transducer, all the same way
xmap :: (Foldable f, Conjable f) =&gt; (a -&gt; b) -&gt; f a -&gt; f b
xmap f = xlist $ mapping f 

xfilter :: (Foldable f, Conjable f) =&gt; (a -&gt; Bool) -&gt; f a -&gt; f a
xfilter p = xlist $ filtering p

xflatmap :: (Foldable f, Conjable f) =&gt; (a -&gt; f b) -&gt; f a -&gt; f b
xflatmap f = xlist $ flatmapping f
</code></pre>

<h3>List-specific stuff</h3>

<p>Here is the list-specific code:</p>

<pre><code class="haskell">-- Stuff specialized to lists.
-- To use another type, just make it a Foldable and Conjable.
instance Foldable [] where
  fold = foldl

-- for exposition only, yes, conj is gross for lazy lists
-- in Clojure conj and left folds dominate
instance Conjable [] where
  empty = []
  conj xs x = xs ++ [x]

-- Note: the type does not say anything about Foldable or Conjable,
-- even though the implementation just happens to use a list!
xform :: Transducer Integer Integer
xform = mapping (+ 1) . filtering even . flatmapping (\x -&gt; [0 .. x])

-- Again, this can munge anything Foldable and Conjable, not just a list.
munge :: (Foldable f, Conjable f) =&gt; f Integer -&gt; f Integer
munge = xlist xform
</code></pre>

<p>Notice some very important properties of this code:</p>

<ul>
<li><code>xform</code> has a type that does not mention lists at all, even though it is implemented using a list and cannot compile without the list <code>instance</code> implementations.</li>
<li><code>munge</code> also does not mention lists, and can transform anything that is <code>Foldable</code> and <code>Conjable</code>.</li>
</ul>


<p>Example:</p>

<pre><code class="haskell">-- munge a list
-- [0,1,2,0,1,2,3,4,0,1,2,3,4,5,6]
example1 :: [Integer]
example1 = munge [1..5]
</code></pre>

<h3>Implementing another type to illustrate the genericity of transducers</h3>

<p>To illustrate Rich Hickey&rsquo;s main point, I implemented instances of <code>Foldable</code> and <code>Conjable</code> for a standard Haskell <code>Vector</code> library as an alternate &ldquo;collection-like&rdquo; type.</p>

<pre><code class="haskell">-- For example using Vector instead of list
import qualified Data.Vector as V

-- Implement Foldable, Conjable type classes for Vector
instance Foldable V.Vector where
  fold = V.foldl

instance Conjable V.Vector where
  empty = V.empty
  conj = V.snoc
</code></pre>

<p>And we can run <code>munge</code> directly on a vector instead of a list, <em>without making any changes</em>:</p>

<pre><code class="haskell">-- return a vector rather than a list; note the fact that munge actually
-- internally uses a list
example2 :: V.Vector Integer
example2 = munge $ V.enumFromN 1 5
</code></pre>

<p>This is <em>code reuse</em> at its best.</p>

<p>Note that there is nothing that ties transducers to any concrete &ldquo;collection&rdquo; type. We could write instances of <code>Foldable</code> and <code>Conjable</code> for some kind of &ldquo;channel&rdquo; abstraction, for example, and instantaneously be able to munge data coming from it and to another. In fact, this is already what is done in the real world, where Haskell and Scala are used in production at places like Facebook and Twitter to efficiently handle large amounts of data.</p>

<h2>My code repository</h2>

<p>My complete code is available <a href="https://github.com/FranklinChen/clojure-transducers-in-haskell">on GitHub</a>.</p>

<h2>Conclusion</h2>

<p>It was pretty exciting to see the announcement of the transducers library for Clojure, because it represents a level of abstraction that I think has not been expressed much in the world of dynamically typed languages, although the techniques are two decades old in the Haskell community in a statically typed setting. And I hope that I was able to convey the sheer elegance of Haskell as a way to express interesting types with practical ramifications for abstraction and pluggability.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Exploring type-directed, test-driven development using FizzBuzz (my practice talk)]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed/"/>
    <updated>2014-05-15T22:49:48-04:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met, with me presenting a <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/">practice talk</a> for &ldquo;Exploring type-directed, test-driven development using FizzBuzz&rdquo;, which I am presenting at the upcoming local <a href="http://pghtechfest.com/">Pittsburgh TechFest</a> conference.</p>

<!--more-->


<h2>Presentation</h2>

<p>I have only recently completed the slides and code for my talk, and had not actually given the talk yet, so this was a practice talk that did not go so well, unfortunately.</p>

<p>I spoke too quickly and had too much material to cover, and also got lost in some of my own slides. Oops. I think reaction to my talk was mixed. Some enjoyed it, while others seemed lost at places.</p>

<p>After going home, I frankly felt that I had <em>failed</em>.</p>

<p>But I believe I can do much better. I have plenty of time to do a thorough revision before Pittsburgh TechFest in three weeks. I need to cut out material that is not needed for the core of what I am trying to achieve and make some things clearer (especially for the intended Pittsburgh TechFest audience, which I do not expect to even know Scala).</p>

<h2>Supporting material</h2>

<p>Here is the <a href="https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz">GitHub repository</a>.</p>

<p>I don&rsquo;t recommend looking at them, but for historical purposes, here are slides of the presentation <a href="https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/meetup/doc/presentation.pdf">as it was given in the first draft</a>.</p>

<h2>(Update of 2014-05-16)</h2>

<p>One day makes a difference in my confidence and determination! I noticed that the new <a href="http://www.meetup.com/Pittsburgh-Code-Supply/">Pittsburgh Code and Supply</a> group (which I have not yet attended) is soon having its inaugural <a href="http://www.rust-lang.org/">Rust</a> <a href="http://www.meetup.com/Pittsburgh-Code-Supply/events/181773312/">soon</a>.</p>

<p>So I decided to offer to do a version of my talk for Pittsburgh Code and Supply using Rust as the programming language (rather than Scala). I want to spread the news about how to effectively use a sufficiently typed programming language, whether it&rsquo;s Scala or Rust or anything else sufficiently derived from the ML family of type systems.</p>

<p>Justin will schedule it for some time in July. That should give me enough time, after Pittsburgh TechFest in early June, to learn enough Rust to convert my Scala code over properly!</p>

<h2>(Update of 2014-06-07)</h2>

<p>I much improved the presentation for Pittsburgh TechFest, which I <a href="/blog/2014/06/07/report-on-the-2014-pittsburgh-techfest-my-third-year/">attended for the third year</a>.</p>

<p>I recommend reading the <a href="https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/master/doc/article.pdf">article version of the presentation</a>, rather than the slides. This is the first time I&rsquo;ve created both an article version of a presentation and slides for use during the live presentation. I will do this in the future as well. Slides are not meant to stand alone or even be read alone, but in case you really want to see them, they are here:</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/37257104" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/FranklinChen/presentation-37257104" title="Exploring type-directed, test-driven development: a case study using FizzBuzz" target="_blank">Exploring type-directed, test-driven development: a case study using FizzBuzz</a> </strong> from <strong><a href="http://www.slideshare.net/FranklinChen" target="_blank">Franklin Chen</a></strong> </div></p>

<h2>(Update of 2014-07-17)</h2>

<p>It&rsquo;s crunch time. My Rust version of the talk, <a href="http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/">&ldquo;Type-Directed TDD in Rust&rdquo;</a> is coming next week.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Implicits]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits/"/>
    <updated>2014-02-13T21:45:59-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met with Justin presenting on <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/">&ldquo;Implicits&rdquo;</a>.</p>

<!--more-->


<h2>Implicits</h2>

<p>Implicits are a novel and fantastically important feature of Scala. I wish there were a comprehensive and concise single resource about them out there, but I don&rsquo;t actually know of one.</p>

<p>I&rsquo;ve been doing stuff with implicits lately. Not long ago, I wrote a blog post that involved <a href="/blog/2013/12/26/tostring-considered-harmful-part-2/">using Scala implicits to avoid relying on the inherited Java <code>toString</code> method</a>. More recently, for this meetup I posted some code that I hoped someone would comment on, in which <a href="https://github.com/franklinchen/test-specs2-matchers">I used implicits to try to simplify a DSL</a>. I&rsquo;m not sure this is the right design choice, but it was an experiment.</p>

<h2>Presentation</h2>

<p>Around 7 of us showed up.</p>

<p>Justin did some live coding using the Scala Worksheet to demonstrate various uses of implicits.</p>

<p>One use is to define an &ldquo;implicit function&rdquo; that can convert of a value of one type to another. This can be overused badly, unfortunately.</p>

<p>Another is to define an &ldquo;implicit parameter&rdquo; for a function so that you don&rsquo;t have to explicitly pass a parameter to the function, if there is an implicit value in scope.</p>

<p>Scala 2.10 greatly improved implicits by encapsulating the &ldquo;conversion&rdquo; pattern by means of an &ldquo;implicit class&rdquo;. Strangely, Scala Worksheet seemed to get confused when we played around and defined an implicit class that also had an implicit parameter. This led to some interesting detective work as we examined the generated JVM byte code to figure out what was going on! I thought it was useful for us to dig into this level; often it is useful to understand what something compiles to in order to better understand and appreciate a high-level language construct.</p>

<p>Finally, we briefly discussed the type class pattern, which is arguably the most important use of implicits. This was too big a topic to get into here though.</p>

<h2>Resources</h2>

<p>I posted some good resources that have popped up on my radar on Scala implicits:</p>

<ul>
<li>A fine <a href="http://like-a-boss.net/2013/03/29/polymorphism-and-typeclasses-in-scala.html">tutorial on type classes in Scala</a>.</li>
<li><a href="http://typelevel.org/blog/2014/01/18/implicitly_existential.html">Scary stuff with implicits</a> that I don&rsquo;t understand (yet).</li>
</ul>


<h2>Conclusion</h2>

<p>Justin gave a nice introduction to implicits. I think the live coding and experimentation is a great way to involve people in code suggestions and discussion of what things mean and do. It was a fun time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pittsburgh Scala Meetup: Introduction to Reactive]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2014/01/09/pittsburgh-scala-meetup-introduction-to-reactive/"/>
    <updated>2014-01-09T21:29:20-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2014/01/09/pittsburgh-scala-meetup-introduction-to-reactive</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a> met with Josh presenting an <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581352/">&ldquo;Introduction to Reactive&rdquo;</a>.</p>

<p>It was great.</p>

<!--more-->


<h2>Pre-meetup dinner</h2>

<p>A couple of us (Justin, Josh, Chris, me) had an early dinner at Everyday Noodles before the meetup. Very filling!</p>

<h2>Turnout</h2>

<p>Ten of us showed up for this meeting.</p>

<h2>Presentation</h2>

<h3>What is &ldquo;reactive&rdquo; anyway?</h3>

<p>In case you didn&rsquo;t hear about it in the media, the term &ldquo;reactive&rdquo; has been popularized in recent months, and I <a href="/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming/">reviewed the free Coursera course &ldquo;Principles of Reactive Programming&rdquo;</a> that some of us in the Pittsburgh Scala group just completed, so check out my post for more on &ldquo;reactive&rdquo;.</p>

<h3>Futures</h3>

<p>Josh did a live SBT session reviewing futures and promises.</p>

<p>He noted that futures have limitations as a component of reactive systems. (This had become apparent when <a href="http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/">I started using futures last year in my personal projects</a> and then <a href="/blog/2013/08/02/pittsburgh-ruby-python-social/">for work</a>.) By themselves, futures do not support cancellation or <a href="http://en.wikipedia.org/wiki/Back_pressure">back pressure</a>. Futures are a low-level, limited mechanism that are the right tool only if you have a pipeline all the way through forward, no back channel.</p>

<p>An alternative to futures, of course, is to go all out and use Akka actors. But the drawback I&rsquo;ve found with that is that this is a heavyweight mechanism for problems that don&rsquo;t need the full power of actors. I&rsquo;ve wanted something more structured and lightweight than using actors directly. I find it tricky to program using actors, because it is very easy to start writing spaghetti code that is spread out everywhere (which is what happened to me in the final project for the Coursera course).</p>

<p>It turns out, according to Josh, that Typesafe is working on precisely this problem! Nice. He&rsquo;ll tell us more when it comes out.</p>

<h4>(Update of 2014-07-10)</h4>

<p>Half a year later, the promise was realized, as the Pittsburgh Scala Meetup had Josh <a href="/blog/2014/07/10/pittsburgh-scala-meetup-reactive-streams/">gave a talk on the new API called Reactive Streams</a>!</p>

<h3>Play</h3>

<p>Josh demonstrated <a href="http://typesafe.com/activator">Typesafe Activator</a>, the cool new Web browser-based platform for using Scala. He showed an app using Play that looks at blogs simultaneously and uses <code>recoverWith</code>.</p>

<h2>Random other questions and discussions</h2>

<p>What I like about the Pittsburgh Scala Meetup is that even when we have a presentation, discussion often wanders off to related topics (or unrelated topics). Anything goes, and I usually learn a lot.</p>

<p>Someone asked about support for channels as in Go or Clojure&rsquo;s <a href="https://github.com/clojure/core.async"><code>core.async</code></a>. Josh said they&rsquo;re working on this sort of thing with support for back pressure.</p>

<p>Someone asked about how to connect <a href="http://www.playframework.com/documentation/2.0/Iteratees">iteratees</a> with actors. Josh said, you can feed from an iteratee to an actor, and then just let the actor do stuff. However, there is some controversy about the whole iteratee thing in Play.</p>

<h2>Conclusion</h2>

<p>This was a great Pittsburgh Scala Meetup session. I felt that a lot of questions that had built up in my mind after having gotten into reactive programming are being addressed with continuing work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of the free Coursera course "Principles of Reactive Programming"]]></title>
    <link href="http://ConscientiousProgrammer.com/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming/"/>
    <updated>2013-12-31T21:29:39-05:00</updated>
    <id>http://ConscientiousProgrammer.com/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming</id>
    <content type="html"><![CDATA[<p>At long last, I have officially completed the free Coursera course <a href="http://www.coursera.org/course/reactive">&ldquo;Principles of Reactive Programming&rdquo;</a>, receiving my &ldquo;Statement of Accomplishment&rdquo;.</p>

<p>This was an intense course, a lot of work, actually, and made the last two month s of my life (November and December) challenging as I juggled many activities. But it was worth the effort. I would definitely recommend this course to anyone who has completed the introductory course <a href="http://www.coursera.org/course/progfun">&ldquo;Principles of Functional Programming in Scala&rdquo;</a> (or has the equivalent background). (See my <a href="http://franklinchen.com/blog/2012-11-15-review-of-courseras-fall-2012-functional-programming-principles-in-scala/">review of that course as offered in fall of 2012</a>.)</p>

<p>I took this course along with a bunch of local friends who are also members of the <a href="http://www.meetup.com/Pittsburgh-Scala-Meetup/">Pittsburgh Scala Meetup</a>.</p>

<!--more-->


<h2>What is &ldquo;Reactive&rdquo;?</h2>

<p>&ldquo;Reactive&rdquo; is a fairly new buzzword, popularized recently by the <a href="http://www.reactivemanifesto.org/">Reactive Manifesto</a> to urge consideration of four traits modern applications may need to have:</p>

<ul>
<li>responsive</li>
<li>scalable</li>
<li>resilient</li>
<li>event-driven</li>
</ul>


<h2>Instructors and topics</h2>

<p>Each instructor was responsible for covering a key technology.</p>

<h3>Martin Odersky</h3>

<p>Martin Oderksy, the inventor of Scala and instructor for the previously mentioned &ldquo;Principles of Functional Programming in Scala&rdquo; course, focused on covering more advanced usage of Scala.</p>

<p>He immediately introduced monads, which are key to many of the concepts and libraries used throughout this course. Scala&rsquo;s support for monads through the syntax of for-comprehensions is very helpful. He introduced the property-based testing framework <a href="http://www.scalacheck.org/">ScalaCheck</a> (which uses monads for generation of data), and the first assignment involved working with the framework. (By the way, I gave a <a href="http://franklinchen.com/blog/2013/04/11/my-pittsburgh-scala-meetup-talk-on-property-based-testing-using-scalacheck/">talk on property-based testing using ScalaCheck</a> eight months ago.)</p>

<p>Then he discussed modeling event simulation in Scala using mutable objects. I felt that this unit was not in the spirit of the others, because there was so much uncontrolled mutable state running around. My friends and I agreed that the assignment for this unit was burdensome and not really useful. I thought to myself, in fact, that I would never solve the problems in this way.</p>

<h3>Erik Meijer</h3>

<p>Erik Meijer is a very energetic and humorous speaker. I really enjoyed his lectures.</p>

<p>In his first unit, he introduced asynchronous programming using Scala&rsquo;s <a href="http://docs.scala-lang.org/overviews/core/futures.html"><code>Future</code> monad (backed by a <code>Promise</code>)</a>, as well as the cool new <a href="https://github.com/scala/async">macro-based <code>async</code>/<code>await</code> library</a>, which greatly simplifies writing code. Our assignment, which was instructive and interesting, was to implement a baby version of Node.js in Scala, ha!</p>

<p>Then he introduced <a href="https://rxscala.github.io/"><code>RxScala</code></a>, a Scala adaptor for <a href="https://github.com/Netflix/RxJava"><code>RxJava</code></a>, which is a Java port of Microsoft&rsquo;s &ldquo;reactive extensions&rdquo; <code>Rx</code> framework. I enjoyed this unit a lot, and appreciated the great documentation available (the &ldquo;marble diagrams&rdquo; are particularly useful). One nitpick I suppose I must have with his presentation is that I&rsquo;m not sure that, for a non-theory-oriented audience, the discussions of &ldquo;duality&rdquo; were necessary. The assignment was very practically-oriented, gathering data asynchronously and displaying it and allowing user interaction. It was enjoyable and showcased the power of using a framework like Rx.</p>

<h3>Roland Kuhn</h3>

<p>Roland Kuhn covered the most complex section of the course, introducing actors by means of the <a href="http://akka.io/">Akka</a> framework.</p>

<p>The first assignment was fairly straightforward, on implemented a distributed binary tree with actors.</p>

<p>The second assignment I found quite difficult, and not only because it was crunch time at the end of December before holiday season! It was a distributed key-value store with multiple levels of possible failure. There is no way I would have successfully and correctly completed this assignment without the helpful discussions I found on the online Coursera forums. To really figure out what was going on required (for me) turning on logging in various places and writing a lot of tests using Akka&rsquo;s <a href="http://doc.akka.io/docs/akka/snapshot/scala/testing.html"><code>TestKit</code></a>. I realized eventually that my code was ugly and not entirely clean and idiomatic, but it was definitely a worthwhile learning experience on a realistic problem to solve.</p>

<h2>Conclusion</h2>

<p>I learned quite a lot from this course. It is a very practical course on &ldquo;reactive&rdquo; programming. I felt after completing this course that I was ready to use the concepts and technologies covered in real problems. I am grateful to the instructors (who were active on the forums, by the way) for sharing their theoretical and practical knowledge as a free Coursera course.</p>
]]></content>
  </entry>
  
</feed>
