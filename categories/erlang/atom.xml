<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erlang on The Conscientious Programmer</title>
    <link>http://ConscientiousProgrammer.com/categories/erlang/</link>
    <description>Recent content in Erlang on The Conscientious Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Aug 2013 22:09:00 +0000</lastBuildDate>
    <atom:link href="http://ConscientiousProgrammer.com/categories/erlang/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OpenHack Pittsburgh: learning Elixir test-driven and package-publishing</title>
      <link>http://conscientiousprogrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing/</link>
      <pubDate>Mon, 26 Aug 2013 22:09:00 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a long time since I went to an &lt;a href=&#34;http://openhack.github.io/pittsburgh/&#34;&gt;OpenHack Pittsburgh&lt;/a&gt; meeting. The last time was &lt;a href=&#34;http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/&#34;&gt;five months ago&lt;/a&gt;. On June 24, there was an &lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/120200292/&#34;&gt;OpenHack Pittsburgh&lt;/a&gt; held at &lt;a href=&#34;http://www.4moms.com/&#34;&gt;4moms&lt;/a&gt;, but I really needed to stay home and take it easy that evening, because of my busy schedule later in the week, including attending a &lt;a href=&#34;../../blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/&#34;&gt;PittJUG meeting&lt;/a&gt; and preparing a &lt;a href=&#34;../../blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module/&#34;&gt;Pittsburgh Python talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/120201842/&#34;&gt;This August meeting of OpenHack Pittsburgh&lt;/a&gt; was held at &lt;a href=&#34;http://www.modcloth.com/&#34;&gt;ModCloth&lt;/a&gt;, which I had never been to. It&amp;rsquo;s in Crafton, which is a place I&amp;rsquo;ve never been before, nearly half an hour drive from Pittsburgh. Because of worries about driving there near rush hour after work, I probably would not have signed up to attend had it not been for &lt;a href=&#34;http://justinxreese.com/&#34;&gt;Justin&lt;/a&gt;, the organizer of OpenHack Pittsburgh.&lt;/p&gt;

&lt;p&gt;What happened was that he asked for feedback about who was planning to work on what, and said he planned to learn some &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;Elixir&lt;/a&gt;, a fairly new programming language built on top of the &lt;a href=&#34;http://www.erlang.org/&#34;&gt;Erlang&lt;/a&gt; runtime. Since this language had been on my list of things to look into, I decided that learning loves company, so I proposed to learn some Elixir in a test-driven way!&lt;/p&gt;

&lt;p&gt;What does that mean?&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://distilleryimage10.ak.instagram.com/1e5597280ea711e3b2db22000aeb1b88_7.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Franklin working on laptop&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;how-to-learn-a-programming-language:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;How to learn a programming language&lt;/h2&gt;

&lt;p&gt;I have written code in probably around fifty (50) programming languages. I&amp;rsquo;m not kidding, and I&amp;rsquo;m not proud, but this is simply a fact of my having done programming since 1982, thirty-one (31!!) years ago. Let&amp;rsquo;s face it: languages come and go. I have personally sat at an IBM &lt;a href=&#34;http://en.wikipedia.org/wiki/Keypunch&#34;&gt;keypunch&lt;/a&gt; machine punching out cards for my COBOL and Fortran code.&lt;/p&gt;

&lt;p&gt;As with human languages, the fact is that to be truly productive in a language requires much more than learning some syntax and semantics. It requires actually writing and running and fixing code, and in the context of a realistic project.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve learned through trial and error that the most common ways of learning a programming language, like the most common ways of learning human languages (other than one&amp;rsquo;s first language), are terribly inefficient and misleading, resulting in minimal competence. I mean, reading through books, typing into a REPL, submitting a single file to a compiler or interpreter, etc.&lt;/p&gt;

&lt;p&gt;I feel that we should learn programming languages using a variety of approaches. Yes, the academic bottom-up semantics-based approach is critical in the long run, to avoid wasting a lot of time on pointless misunderstandings. Exploration in a REPL can be very rewarding. But I think what is often missing is the &lt;em&gt;biggest possible picture&lt;/em&gt;: immediately seeing how to write a program that is integrated with a test framework, uses libraries, is exportable and publishable publicly as a library, can be submitted to a continuous integration server, is editable in a decent editor or IDE, etc.&lt;/p&gt;

&lt;p&gt;Without seeing the biggest possible picture, one usually gets a horribly inaccurate picture of what it is like to program in a particular language ecosystem. (I will be writing more about this subject of pedagogy later.)&lt;/p&gt;

&lt;h2 id=&#34;my-proposal:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;My proposal&lt;/h2&gt;

&lt;p&gt;The last couple of languages I have learned in recent years, I slowly came to work with in a more efficient way than in the past, because I focused on matters such as testability. In particular, as I grew to wholly adopt TDD when writing any code at all in any language, it became clear to me that the best way to learn a new language must be in a test-driven way.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an analogy: I believe the best way to learn a human language is to dive into how to be able to converse in some coherent way right off the bat. &lt;a href=&#34;http://www.fluentin3months.com/4-hour/&#34;&gt;Tim Ferriss and others&lt;/a&gt; have exploited this idea to &lt;em&gt;drive&lt;/em&gt; the learning of what is most relevant in &lt;a href=&#34;http://www.fourhourworkweek.com/blog/2007/11/07/how-to-learn-but-not-master-any-language-in-1-hour-plus-a-favor/&#34;&gt;grammar&lt;/a&gt; and &lt;a href=&#34;http://www.fourhourworkweek.com/blog/2009/01/20/learning-language/&#34;&gt;vocabulary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the past, I learned human languages in a terrible way, taking lots of courses, but never actually getting fluent in everyday use. This is how we tend to learn &amp;ldquo;foreign&amp;rdquo; programming languages. My proposal is that learning a new programming language should involve getting as quickly as possible up to speed on a &lt;em&gt;minimum viable publishable library&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That the software artifact should be a &lt;em&gt;library&lt;/em&gt;, and not just some executable program, is vital, because it means having to adhere by whatever standards apply to real-world API design in the language ecosystem, producing something that client code can import and call.&lt;/p&gt;

&lt;p&gt;That it should be &lt;em&gt;publishable&lt;/em&gt; is vital because it means adhering to standards of testing, of discovery through metadata, and enabling easy use by a client.&lt;/p&gt;

&lt;h2 id=&#34;my-concrete-example-with-learning-elixir-tonight:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;My concrete example with learning Elixir tonight&lt;/h2&gt;

&lt;h3 id=&#34;prior-background-in-erlang-and-elixir:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Prior background in Erlang and Elixir&lt;/h3&gt;

&lt;p&gt;I went to OpenHack Pittsburgh &lt;em&gt;never&lt;/em&gt; having yet read any Elixir language material, never having written Elixir code, not even &amp;ldquo;hello, world&amp;rdquo;. The only things I had done before tonight:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I first heard of Erlang nearly two decades ago, and when I saw it, I was turned off by the Prolog-style syntax, and it didn&amp;rsquo;t seem relevant to anything I was doing at the time, so I ignored it.&lt;/li&gt;
&lt;li&gt;I intended to learn some Erlang earlier this year, but made little progress before putting it aside: I went to the free book &lt;a href=&#34;http://learnyousomeerlang.com/&#34;&gt;&amp;ldquo;Learn You Some Erlang for Great Good!&amp;rdquo;&lt;/a&gt; and downloaded the code and &lt;a href=&#34;https://github.com/FranklinChen/learn-you-some-erlang&#34;&gt;got it to compile&lt;/a&gt;, but did not proceed any further.&lt;/li&gt;
&lt;li&gt;I installed Elixir on my Mac &lt;a href=&#34;http://elixir-lang.org/getting_started/1.html&#34;&gt;using Homebrew&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I installed an &lt;a href=&#34;https://github.com/elixir-lang/emacs-elixir&#34;&gt;Emacs Elixir mode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I made a note of a free online book &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001642&#34;&gt;&amp;ldquo;Etudes for Elixir&amp;rdquo;&lt;/a&gt; and checked out the GitHub repository, but did not look at the book or code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;find-a-testing-framework:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Find a testing framework&lt;/h3&gt;

&lt;p&gt;Upon arrival at ModCloth, getting pizza to eat, and plugging in my MacBook and connecting to the guest WiFi, the first thing I did was search for a testing framework for Elixir.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s 2013, not 1993, so it is hard to convince me to invest any time at all in learning to operate in a language ecosystem that does not have at least a de facto standard testing framework. For every language that I currently actively use for writing serious programs, I operate with TDD. Some examples of languages and the test frameworks I currently use for them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C/C++: &lt;a href=&#34;https://code.google.com/p/googletest/&#34;&gt;googletest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clojure: &lt;a href=&#34;https://github.com/marick/Midje&#34;&gt;Midje&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haskell: &lt;a href=&#34;http://hspec.github.io/&#34;&gt;HSpec&lt;/a&gt; and &lt;a href=&#34;http://www.haskell.org/haskellwiki/Introduction_to_QuickCheck2&#34;&gt;QuickCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java or Scala: &lt;a href=&#34;http://specs2.org/&#34;&gt;Specs2&lt;/a&gt; and &lt;a href=&#34;http://www.scalacheck.org/&#34;&gt;ScalaCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript: &lt;a href=&#34;http://pivotal.github.io/jasmine/&#34;&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl: &lt;a href=&#34;http://search.cpan.org/~mschwern/Test-Simple-0.98/lib/Test/More.pm&#34;&gt;Test::More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python: &lt;a href=&#34;http://pytest.org/&#34;&gt;pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby: &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Racket: &lt;a href=&#34;http://docs.racket-lang.org/rackunit/&#34;&gt;RackUnit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, first Web search hit for Elixir and unit testing was &lt;a href=&#34;http://elixir-lang.org/getting_started/ex_unit/1.html&#34;&gt;ExUnit&lt;/a&gt;, so that was encouraging.&lt;/p&gt;

&lt;p&gt;Justin was still stuck installing Elixir, so we started exploring Elixir together off my laptop.&lt;/p&gt;

&lt;h3 id=&#34;one-test-file:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;One test file&lt;/h3&gt;

&lt;p&gt;The first thing I did after discovering ExUnit was to copy and paste the code for a sample test into Emacs and save it into a file &lt;code&gt;test_hello.exs&lt;/code&gt;, see that the Elixir mode was working (with syntax highlighting), and figure out how to run the test: &lt;code&gt;$ elixir test_hello.exs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;Then we explored adding more tests, changing some assertions, and learning as went, by looking up the Elixir documentation. For example, Elixir uses an interesting callback mechanism for cleanly passing &amp;ldquo;setup&amp;rdquo; state to tests inside a single test case. Also, &lt;code&gt;assert&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; are &lt;a href=&#34;http://en.wikipedia.org/wiki/Macro_%28computer_science%29#Syntactic_macros&#34;&gt;syntactic macros&lt;/a&gt;, enabling them to do magic to analyze expressions, hence the support of natural assertion syntax (which &lt;a href=&#34;../../blog/2013/07/11/pittsburgh-ruby-lightning-talk-night/&#34;&gt;I like a lot better than special syntax&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;After writing some failing tests involving arithmetic and making them pass, I wrote a division by zero test. I was intrigued that not only did it fail, as expected, but also the compiler warned ahead of time that an exception was going to be raised. Nice. In any case, I learned how to make an assertion of the raising of an exception. This is very important. We should always pay attention to &lt;a href=&#34;http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/&#34;&gt;testing the sad paths&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We saw in the documentation for ExUnit that there was a way to mark a test case as being OK to run concurrently with others. Great! These days there is no excuse not to be able to run tests concurrently. So I wrote another test case, which I put in the same source file (for the moment), and I wanted to see for myself that concurrency was happening. I wanted to call some kind of &amp;ldquo;sleep&amp;rdquo; function. To do that, I did a Web search, and found that Erlang comes with &lt;code&gt;sleep&lt;/code&gt; in the &lt;code&gt;timer&lt;/code&gt; module. I found out how to call Erlang from Elixir, and it worked!&lt;/p&gt;

&lt;h3 id=&#34;more-than-one-source-file:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;More than one source file&lt;/h3&gt;

&lt;p&gt;The next obvious step was to write a test for code that did not yet exist, but was to be written outside the test source file. For that, I had to figure out how to define a module and import it. OK, but then there&amp;rsquo;s the question of file organization. Hmm.&lt;/p&gt;

&lt;p&gt;At this point, the only reasonable thing to do (and which in retrospect should have been done first) was to find out what the &amp;ldquo;standard&amp;rdquo; way of organizing a project&amp;rsquo;s source files is supposed to be, and what the standard way to build everything is.&lt;/p&gt;

&lt;p&gt;A Web search quickly came up with &lt;a href=&#34;http://elixir-lang.org/getting_started/mix/1.html&#34;&gt;Mix&lt;/a&gt;. Awesome, the Elixir people are serious about real software development! Mix turns out to be inspired by Clojure&amp;rsquo;s &lt;a href=&#34;https://github.com/technomancy/leiningen&#34;&gt;Leiningen&lt;/a&gt;, which of course I use to start any new Clojure project. &lt;code&gt;$ mix new hello&lt;/code&gt; did the trick, creating the scaffolding for a new Elixir project.&lt;/p&gt;

&lt;p&gt;I refactored our existing &lt;code&gt;test_hello.exs&lt;/code&gt; file into two files (one for each test case) in the &lt;code&gt;test&lt;/code&gt; directory, then wrote a module &lt;code&gt;hello.ex&lt;/code&gt; into &lt;code&gt;lib&lt;/code&gt;. A failed test, then making it succeed, and finally I wrote my first non-test code in Elixir!&lt;/p&gt;

&lt;p&gt;Running tests is very easy once you are using Mix. Just &lt;code&gt;$ mix test&lt;/code&gt; does it.&lt;/p&gt;

&lt;h3 id=&#34;packaging-for-publshing:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Packaging for publshing&lt;/h3&gt;

&lt;p&gt;At this point, I decided I wanted to create an actual Elixir package to publish.&lt;/p&gt;

&lt;p&gt;So I did a Web search to find out whether there was a standard repository and how to publish to it.&lt;/p&gt;

&lt;p&gt;Here we go, &lt;a href=&#34;http://expm.co/&#34;&gt;Expm&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I installed the package manager, set up my user name and password, and went to work on a simple package to publish.&lt;/p&gt;

&lt;p&gt;I saw that nobody had yet contributed an implementation of &lt;a href=&#34;http://franklinchen.com/blog/2012/03/14/for-real-geeks-today-is-not-pi-day-but-half-tau-day/&#34;&gt;tau&lt;/a&gt;, so I quickly created a tau library with Mix, did &lt;code&gt;$ expm new&lt;/code&gt; to create a &lt;code&gt;package.exs&lt;/code&gt; template, filled it out, wrote an ExUnit test that passed, completed the &lt;code&gt;README.md&lt;/code&gt;, and just as OpenHack Pittsburgh was officially closing for the evening, I successfully published &lt;a href=&#34;http://expm.co/tau&#34;&gt;my tau package&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Actually, I accidentally screwed up the first time, forgetting to change all the fields of the template &lt;code&gt;package.exs&lt;/code&gt; and ending up published &lt;code&gt;yourlib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and I committed my project in Git and pushed &lt;a href=&#34;https://github.com/franklinchen/tau&#34;&gt;to GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;some-haskell-stuff:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Some Haskell stuff&lt;/h2&gt;

&lt;p&gt;Steve McCarthy of &lt;a href=&#34;http://www.spacefinity.com/&#34;&gt;Spacefinity&lt;/a&gt; had announced, in the introduction at the beginning of the evening when each of us stood up to say what we planned to work on, that he wanted to do more with the &lt;a href=&#34;http://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt; package manager for Haskell, so I spent a little bit of time getting him going by pointing him toward a sample Haskell code repository I initially &lt;a href=&#34;http://franklinchen.com/blog/2012/11/05/the-start-of-a-local-haskell-study-group.markdown/&#34;&gt;set up last year when some friends were interested in getting into Haskell&lt;/a&gt;; sadly, we&amp;rsquo;ve all been too busy for Haskell, so I&amp;rsquo;ve let the project rot, in the sense that my configuration file is not optimally organized and also there have been updates in the test framework world in Haskell since then.&lt;/p&gt;

&lt;p&gt;Anyway, here&amp;rsquo;s my &lt;a href=&#34;https://github.com/FranklinChen/project-euler-haskell&#34;&gt;&amp;ldquo;Project Euler in Haskell&amp;rdquo; repository&lt;/a&gt;. I plan to get around to improving it.&lt;/p&gt;

&lt;h2 id=&#34;thanks:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Thanks to ModCloth for providing the space, pizza, cookies, and WiFi!&lt;/p&gt;

&lt;p&gt;A big thank-you to Justin for providing the inspiration for me to try this experiment in learning!&lt;/p&gt;

&lt;p&gt;And thanks to Steve McCarthy for getting me to drag up an old Haskell project and making me think that I should soon update it to be a better example.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Tonight was the first time I ever started learning a new programming language, wrote unit tests right off the bat with proper project organization and also published a library immediately.&lt;/p&gt;

&lt;p&gt;Of course, there is much more to go in actually really learning and using Elixir, but as a first step in showing that Elixir has a viable ecosystem, I think the experiment was a success. My next steps in continuing to learn Elixir would include writing tests in conjunction with a deep dive into the actual semantics of the language. There is no substitute for the latter; the alternative is dangerously making assumptions based on superficial syntactic similarity with other languages (such as Ruby).&lt;/p&gt;

&lt;h3 id=&#34;update-of-2013-08-27:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;(Update of 2013-08-27)&lt;/h3&gt;

&lt;p&gt;One thing I didn&amp;rsquo;t get around to was setting up &lt;a href=&#34;http://travis-ci.org/&#34;&gt;Travis&lt;/a&gt; continuous integration. I believe this should also be part of the story in getting up and running in a new programming language environment.&lt;/p&gt;

&lt;p&gt;So I did a Web search and figured out how to create a suitable &lt;code&gt;.travis.yml&lt;/code&gt;. I committed and pushed to GitHub, flipped the switch in my Travis account, and you can see its &lt;a href=&#34;https://travis-ci.org/FranklinChen/tau&#34;&gt;passing status&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Java User Group: Building and Evolving a Java API</title>
      <link>http://conscientiousprogrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/</link>
      <pubDate>Tue, 25 Jun 2013 21:49:00 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/</guid>
      <description>

&lt;p&gt;The topic for the featured presentation at the &lt;a href=&#34;http://java.net/projects/pittjug/&#34;&gt;Pittsburgh Java User Group&lt;/a&gt; (PittJUG) was &amp;ldquo;Building and Evolving a Java API&amp;rdquo;, presented by Eric Stein of &lt;a href=&#34;http://www.fulminatus.com/&#34;&gt;Fulminatus Consulting&lt;/a&gt;. I was excited to attend because API design is difficult but important, and today more than ever, because of the trend toward integrating many services to build an application, and toward providing such services (both externally and internally).&lt;/p&gt;

&lt;p&gt;(For past reports of mine on PittJUG, see the &lt;a href=&#34;http://franklinchen.com/categories/pittjug/&#34;&gt;PittJUG archives in my other blog&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The presentation was very good. (Eric&amp;rsquo;s slides are available &lt;a href=&#34;http://www.fulminatus.com/presentations/PittJUG%20API%20Presentation.pdf&#34;&gt;here&lt;/a&gt;, but as always with slides, be aware that it is just an outline, as good slides really should be, and the actual presentation and group discussion had all the substance.) Note that although some of the specific recommendations and examples are Java-specific, the entire area of good API design is &lt;em&gt;general&lt;/em&gt; and is applicable no matter what programming language you are using.&lt;/p&gt;

&lt;p&gt;However, the presentation also filled me with a combination of &lt;em&gt;sadness&lt;/em&gt;, because our computing profession could have done better up front to make good API design much easier in various ways. On the positive side, it&amp;rsquo;s better late than never.&lt;/p&gt;

&lt;p&gt;A report on the presentation, with my commentary:&lt;/p&gt;

&lt;h2 id=&#34;api-design-for-whom:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;API design for whom?&lt;/h2&gt;

&lt;p&gt;Whenever doing something at all, the question &amp;ldquo;for whom?&amp;rdquo; should always be asked and answered. Eric observed that APIs must meet the different needs of different users, so it&amp;rsquo;s useful to identify three specific end users with different needs, and look at the situation from each of their points of view:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API owner&lt;/li&gt;
&lt;li&gt;specification owner&lt;/li&gt;
&lt;li&gt;logging owner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;His inclusion of the &amp;ldquo;logging owner&amp;rdquo; was intriguing because the point of view from someone whose job it is to wade through logs is often slighted. But in light of ever more complex applications as well as errors and the need for recovery and quick turnaround in fixing them, I believe that Eric is right to argue that logging should be seriously designed, to &amp;ldquo;tell a consistent story&amp;rdquo;. I am taking this advice to heart.&lt;/p&gt;

&lt;h2 id=&#34;design-process:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Design process&lt;/h2&gt;

&lt;p&gt;Eric advised that design should start with use cases. And client code, from the perspective of the end user, as well as tests, should be written up front. He didn&amp;rsquo;t use the term, but this is &lt;a href=&#34;http://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;test-driven development&lt;/a&gt; (TDD), which in my mind has been an unfortunate term, because it is really &lt;em&gt;test-driven design&lt;/em&gt;, which happens to have the nice effect of kick-starting development as well. (I&amp;rsquo;ll be writing more later on this blog about TDD; I no longer start a new project without a TDD mentality and process, so productive and efficient I have found it.)&lt;/p&gt;

&lt;p&gt;One thing that Eric said was to start with the &lt;em&gt;most important&lt;/em&gt; cases first, not the easy cases. Very good advice: I have learned the hard way that it is easy to pat yourself on the back and start with easy cases to feel like you&amp;rsquo;re making progress, but this often leads to hitting a block when getting to the hard cases, and then having to do some major redesign at that point. I&amp;rsquo;ve found that if something is really important, it needs to be addressed immediately, and often will drive the design of the components required to make the important hard case work. (I&amp;rsquo;ll be writing more later on this blog about &amp;ldquo;the hard case&amp;rdquo;, especially in the context of &amp;ldquo;sad paths&amp;rdquo; that are critical.)&lt;/p&gt;

&lt;h2 id=&#34;stability:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Stability&lt;/h2&gt;

&lt;p&gt;Stability is the big difficulty in API design. It&amp;rsquo;s really daunting, actually, to think of the idea of &amp;ldquo;write once, support forever&amp;rdquo;, but people get very unhappy, rightfully, if they start using your API and then things break on them after it changes.&lt;/p&gt;

&lt;h2 id=&#34;simplicity:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Simplicity&lt;/h2&gt;

&lt;p&gt;Eric argued that a good API should be easy to read as well as easy to write. This is all about human psychology.&lt;/p&gt;

&lt;p&gt;Also, he noted that a side effect of his recommendation to write client code and tests first is that you get to see the point of view of the client, and can use this experience to weed out, for example, APIs that require a lot of annoying boilerplate code.&lt;/p&gt;

&lt;h2 id=&#34;subclassing:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Subclassing&lt;/h2&gt;

&lt;p&gt;There was a lot of good material covered about the dangers of exposing or mandating or allowing subclassing.&lt;/p&gt;

&lt;p&gt;I agree with Eric about the &lt;em&gt;dangers of subclassing&lt;/em&gt;. The ability to subclass existing classes is the single most abused feature of object-oriented languages, and when it comes to API design, the problems are even more magnified because of the needs for API security and evolution. Almost always, you want to use composition, not subclassing. I&amp;rsquo;m pretty annoyed that composition, which was well-understood in the 1960s and 1970s, ended up being &amp;ldquo;forgotten&amp;rdquo; in some circles. Eric gave the classic example of a totally disastrous API resulting from the Java library originally coming with a &lt;code&gt;Properties&lt;/code&gt; class that was a subclass of &lt;code&gt;Hashtable&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;immutability:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Immutability&lt;/h2&gt;

&lt;p&gt;Immutable objects have huge advantages over mutable objects.&lt;/p&gt;

&lt;p&gt;This is something has been known by the &lt;a href=&#34;http://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt; community since Lisp in the 1950s and &lt;a href=&#34;http://en.wikipedia.org/wiki/ML_(programming_language)&#34;&gt;ML&lt;/a&gt; in the 1970s and &lt;a href=&#34;http://en.wikipedia.org/wiki/Haskell_(programming_language)&#34;&gt;Haskell&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Erlang_(programming_language)&#34;&gt;Erlang&lt;/a&gt; in the 1980s.&lt;/p&gt;

&lt;p&gt;But better late than never.&lt;/p&gt;

&lt;h3 id=&#34;my-example-apache-http-components:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;My example: Apache HTTP Components&lt;/h3&gt;

&lt;p&gt;I have observed that APIs in such languages as Java and Ruby have more and more gravitated toward the use of immutable objects. A very good pattern I have seen is to use a builder (which has internal mutable state) to finally build an instance of an immutable object. Just recently, I was using the &lt;a href=&#34;http://hc.apache.org/httpcomponents-client-ga/&#34;&gt;Java Apache HTTP Components library&lt;/a&gt; and moved from the stable version (4.2.5) to the &lt;a href=&#34;http://hc.apache.org/httpcomponents-client-dev/&#34;&gt;beta version&lt;/a&gt; (4.3-beta2) (because of bugs in the stable version), and happened to notice that a whole slew of methods I was calling were deprecated in favor of a &lt;a href=&#34;http://www.apache.org/dist/httpcomponents/httpclient/RELEASE_NOTES.txt&#34;&gt;new builder-based API&lt;/a&gt;. Excerpts from the release notes of the beta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Java 7 try-with-resources&lt;/li&gt;
&lt;li&gt;Added fluent Builder classes&lt;/li&gt;
&lt;li&gt;Deprecation of preference and configuration API based on HttpParams interface in favor of constructor injection and plain configuration objects&lt;/li&gt;
&lt;li&gt;Reliance on object immutability instead of access synchronization for thread safety&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was very good to see that decades-old lessons about good design are finally making it into important Java libraries!&lt;/p&gt;

&lt;h2 id=&#34;types:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Types&lt;/h2&gt;

&lt;p&gt;A lot of what Eric talked about had to do with types: type safety as well as the ramifications of types when evolving an API.&lt;/p&gt;

&lt;h3 id=&#34;null:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Several of his examples (see his slides) involved the problem of &lt;code&gt;null&lt;/code&gt;, &lt;a href=&#34;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&#34;&gt;Hoare&amp;rsquo;s billion-dollar mistake&lt;/a&gt;, which I gave a little &lt;a href=&#34;http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/&#34;&gt;talk about last year&lt;/a&gt;. Basically, &lt;code&gt;null&lt;/code&gt; is a hole in a type system, and as a result, in Java one has to compensate by documenting in comments (but not having type checked) when and where something could be null or could not be, so that API clients know what to pass into methods and what to expect in return.&lt;/p&gt;

&lt;p&gt;Java is not hopelessly behind: Java 8 has the &lt;a href=&#34;http://download.java.net/jdk8/docs/api/java/util/Optional.html&#34;&gt;&lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; class&lt;/a&gt; to help programmers transition away from using &lt;code&gt;null&lt;/code&gt;. C++14 has a &lt;a href=&#34;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3527.html&#34;&gt;proposal to add to the standard library &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Admittedly, these are late patches that do not actually prevent continued use of &lt;code&gt;null&lt;/code&gt; (ideally, a programming language should simply not even have it; languages such as ML and Haskell from the 1970s and 1980s happily did without this terrible construct), but these are definitely steps forward. New languages being designed and implemented today from a clean slate have no excuse to perpetuate this billion-dollar error: for example, &lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; does not have &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;strings:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Strings&lt;/h3&gt;

&lt;p&gt;Eric noted that use a string is throwing away type safety.&lt;/p&gt;

&lt;p&gt;I think the use of strings everywhere is a disaster second to that of using &lt;code&gt;null&lt;/code&gt;. The problem is that strings have to be parsed for information. And many people do not actually correctly do such parsing and validation, hence the prevalence of &lt;a href=&#34;http://en.wikipedia.org/wiki/SQL_injection&#34;&gt;injection attacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even apart from security, the manipulation of strings that actually are supposed to have an intended structure is a major cause of late-caught runtime errors, and of programmer confusion. For example, &lt;a href=&#34;http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding&#34;&gt;this report on URLs&lt;/a&gt; has been recirculating lately, because of errors in both libraries and client code when dealing with URLs as strings rather than as strongly typed data.&lt;/p&gt;

&lt;h3 id=&#34;booleans:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Booleans&lt;/h3&gt;

&lt;p&gt;Eric observed that even booleans are an API design smell: booleans are a special case of an enumeration of possible states. What happens if you want to add a new state but your old API used booleans?&lt;/p&gt;

&lt;h3 id=&#34;exceptions:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;Eric recommended &lt;em&gt;unchecked&lt;/em&gt; over Java&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Exception_handling#Checked_exceptions&#34;&gt;&lt;em&gt;checked&lt;/em&gt; exceptions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, in my Java programming in the past decade, I&amp;rsquo;ve had to deal with the fact that Java made a big mistake by introducing checked exceptions in the first place; the ramifications were not thought out then. Note that C++11 has finally deprecated exception specifiers, and exceptions in ML have always been unchecked since the introduction in the 1970s, while Java ignored two decades of experience and went ahead and bolted on checked exceptions.&lt;/p&gt;

&lt;h4 id=&#34;not-strings:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Not strings!&lt;/h4&gt;

&lt;p&gt;Eric advised that all failure data should be included in a thrown exception. Too often, we see exception throwing code that just throws a string message. Then the catcher has to try to parse this message for important data (which may not even be present in the string). If you&amp;rsquo;re going to throw an exception, write a class and stash away important information, not a string message.&lt;/p&gt;

&lt;h2 id=&#34;a-short-note-on-primitive-obsession:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;A short note on primitive obsession&lt;/h2&gt;

&lt;p&gt;My friend Adam who also attended the PittJUG meeting noted that what we&amp;rsquo;re basically talking about is &lt;a href=&#34;http://c2.com/cgi/wiki?PrimitiveObsession&#34;&gt;primitive obsession&lt;/a&gt;. The larger lesson here is that when designing robust, clear, and safe APIs, using primitives is often a mistake. Everything in the problem domain should really be modeled as its own type, not as a primitive.&lt;/p&gt;

&lt;h2 id=&#34;evolution-of-an-api:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Evolution of an API&lt;/h2&gt;

&lt;p&gt;The trickiest thing to get right is making an API so that it can evolve in the future without breaking backwards &lt;em&gt;compatibility&lt;/em&gt;. This compatibility can be of different forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;behavioral&lt;/li&gt;
&lt;li&gt;binary&lt;/li&gt;
&lt;li&gt;source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eric talked a lot about weakening or strengthening contracts. There is a lot of hairy stuff involved, including knowledge of Java compiler internals. I think this is a space where more research is needed for the future in order to get the formal semantics of API evolution done right.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/japi-checker/&#34;&gt;japi-checker&lt;/a&gt; was mentioned as one tool that one can use for Java.&lt;/p&gt;

&lt;h2 id=&#34;resources:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;In the context of software development in Java, it is impossible to avoid mentioning &lt;a href=&#34;http://en.wikipedia.org/wiki/Joshua_Bloch&#34;&gt;Joshua Bloch&lt;/a&gt;&amp;rsquo;s early book (subsequently revised for a second edition), &amp;ldquo;Effective Java&amp;rdquo;. It is a daunting book, over 300 pages long, but it is an indispensable reference for anyone caring about good programming in Java. Eric called it the &amp;ldquo;gold standard&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Check out his links to other resources on his slides.&lt;/p&gt;

&lt;h2 id=&#34;package-design:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Package design&lt;/h2&gt;

&lt;p&gt;A question came up about Eric&amp;rsquo;s recommendation of using package-private visibility and his observation that a lot of people don&amp;rsquo;t know about package-private, and don&amp;rsquo;t design packages.&lt;/p&gt;

&lt;h3 id=&#34;modules:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Modules&lt;/h3&gt;

&lt;p&gt;My observation is that people don&amp;rsquo;t design packages because they&amp;rsquo;re not actually modules. &lt;em&gt;Java was invented without a module system&lt;/em&gt;, although Java 8 originally was slated to finally include a module system in the form of Jigsaw, which was, however, &lt;a href=&#34;http://www.infoworld.com/d/application-development/project-jigsaw-delayed-until-java-9-198007&#34;&gt;delayed to Java 9&lt;/a&gt;. Meanwhile, there is &lt;a href=&#34;http://en.wikipedia.org/wiki/OSGi&#34;&gt;OSGi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t like sounding like a broken record, but &lt;a href=&#34;http://en.wikipedia.org/wiki/Standard_ML&#34;&gt;Standard ML came with a module system in the 1980s&lt;/a&gt;, and there has been further work in the area of module systems, including first-class module systems that go beyond stratified module systems. The reality is that Java was born in the 1990s an &amp;ldquo;old&amp;rdquo; language, with no positive technical innovations, that feels more like a language from the 1960s.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Eric Stein gave an excellent talk about API design, both from the broadest perspective, focused on human beings and clients, and down and dirty with Java language features to avoid or use carefully.&lt;/p&gt;

&lt;h2 id=&#34;addendum-my-involvement-with-java:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Addendum: my involvement with Java&lt;/h2&gt;

&lt;p&gt;I had a chance to review some of my feelings I have had about programming in Java myself. I&amp;rsquo;ve been a member of PittJUG for well over a decade now. I first signed up on the PittJUG mailing list in June 1999. I have not always been a regular attendee of the meetings: after some initial years of interest, I stopped attending for some years, and became regular again in 2009. So I&amp;rsquo;ve been around Java since it was a very young language, and all the while knowing of all the problems with the language. So why did I chose it as my main programming language a decade ago, and why have I stuck with it for so long, until last last year, when &lt;a href=&#34;http://franklinchen.com/blog/2013/01/11/2013-is-my-year-of-scala/&#34;&gt;I decided to write no &lt;em&gt;new&lt;/em&gt; Java code, and move on to Scala&lt;/a&gt;? I will explain my decision-making in a forthcoming blog post.&lt;/p&gt;

&lt;h2 id=&#34;update-of-2013-07-05:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;(Update of 2013-07-05)&lt;/h2&gt;

&lt;p&gt;An interesting &lt;a href=&#34;http://www.infoq.com/presentations/enterprise-api&#34;&gt;presentation on APIs in the enterprise&lt;/a&gt; came my way.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>