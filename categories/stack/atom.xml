<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on The Conscientious Programmer</title>
    <link>http://ConscientiousProgrammer.com/categories/stack/</link>
    <description>Recent content in Stack on The Conscientious Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Dec 2015 08:20:32 -0500</lastBuildDate>
    <atom:link href="http://ConscientiousProgrammer.com/categories/stack/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>24 days of Hackage, 2015: day 5: should-not-typecheck: making Haskell sort of dynamically typed with deferred type errors</title>
      <link>http://conscientiousprogrammer.com/blog/2015/12/05/24-days-of-hackage-2015-day-5-should-not-typecheck-making-haskell-sort-of-dynamically-typed-with-deferred-type-errors/</link>
      <pubDate>Sat, 05 Dec 2015 08:20:32 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/12/05/24-days-of-hackage-2015-day-5-should-not-typecheck-making-haskell-sort-of-dynamically-typed-with-deferred-type-errors/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents-for-the-whole-series:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Table of contents for the whole series&lt;/h2&gt;

&lt;p&gt;A table of contents is at the top of the article for &lt;a href=&#34;../../blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;day 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;day-5:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Day 5&lt;/h2&gt;

&lt;p&gt;Have you ever been frustrated when using a statically typed language
because there&amp;rsquo;s a type error somewhere in your code base but you want
to run your program anyway, either because you don&amp;rsquo;t care about that
remote type error that has nothing to do with what you&amp;rsquo;re working on,
or because you want to step through your code and debug what the type
error really is? I certainly have.&lt;/p&gt;

&lt;p&gt;Also, have you ever wanted to write a unit test to verify that your
typed code disallows code you want to disallow, but you are
frustrated because how do you write code in a typed language that
says, &amp;ldquo;This code (that you won&amp;rsquo;t typecheck) won&amp;rsquo;t typecheck&amp;rdquo; and passes
the typechecker and runs?&lt;/p&gt;

&lt;p&gt;Welcome to the land of GHC&amp;rsquo;s
&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/DeferErrorsToRuntime&#34;&gt;&amp;ldquo;deferred type errors&amp;rdquo;&lt;/a&gt;,
a feature that has been part of GHC &lt;a href=&#34;https://downloads.haskell.org/~ghc/7.6.1/docs/html/users_guide/defer-type-errors.html&#34;&gt;since version 7.6.1&lt;/a&gt; in 2013. Since
this was not covered in Ollie&amp;rsquo;s
&lt;a href=&#34;https://ocharles.org.uk/blog/pages/2014-12-01-24-days-of-ghc-extensions.html&#34;&gt;2014 series &amp;ldquo;24 Days of GHC Extensions&amp;rdquo;&lt;/a&gt;,
I decided to bring it up here, and in the context of a cute package, &lt;a href=&#34;https://hackage.haskell.org/package/should-not-typecheck&#34;&gt;&lt;code&gt;should-not-typecheck&lt;/code&gt;&lt;/a&gt;
that hooks up with HSpec to make assertions that something won&amp;rsquo;t
typecheck.&lt;/p&gt;

&lt;h2 id=&#34;installation:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Since LTS does not know about this obscure package, Stack helpfully
tells us exactly what to add to our &lt;code&gt;stack.yaml&lt;/code&gt; to bring it in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;extra-deps:
- should-not-typecheck-2.0.1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;let-s-write-some-tests:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Let&amp;rsquo;s write some tests&lt;/h2&gt;

&lt;p&gt;The full documentation of &lt;code&gt;should-not-typecheck&lt;/code&gt; is right there on
&lt;a href=&#34;https://hackage.haskell.org/package/should-not-typecheck&#34;&gt;its Hackage page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we need to enable the GHC option &lt;code&gt;-fdefer-type-errors&lt;/code&gt; in the
test module, with a directive:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;{-# OPTIONS_GHC -fdefer-type-errors #-}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;our-first-test:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Our first test&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ShouldNotTypecheckExample&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Test.Hspec&lt;/span&gt; ( &lt;span style=&#34;color: #B00040&#34;&gt;Spec&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;hspec&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;describe&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;it&lt;/span&gt;
                  , &lt;span style=&#34;color: #0000FF&#34;&gt;shouldBe&lt;/span&gt;
                  , &lt;span style=&#34;color: #0000FF&#34;&gt;shouldThrow&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;anyException&lt;/span&gt;
                  )
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Test.ShouldNotTypecheck&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;shouldNotTypecheck&lt;/span&gt;)

&lt;span style=&#34;color: #0000FF&#34;&gt;spec&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Spec&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;spec&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  describe &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;should-not-typecheck&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
    it &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;should not allow mapping negation over a list of strings&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
      shouldNotTypecheck (map not [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s self-explanatory. We can&amp;rsquo;t do a Boolean negation on a
string. Haskell is not a &amp;ldquo;truthy&amp;rdquo;-based language, but a truth-based
language.&lt;/p&gt;

&lt;h2 id=&#34;some-puzzling-code:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Some puzzling code&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s look at the &lt;code&gt;ShouldNotTypecheckExample&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;{-# OPTIONS_GHC -fdefer-type-errors #-}&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ShouldNotTypecheckExample&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;thisWorks&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;thisFails&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color: #0000FF&#34;&gt;thisWorks&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;thisWorks&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  fst (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;True&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;])

&lt;span style=&#34;color: #0000FF&#34;&gt;thisFails&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;thisFails&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  snd (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;True&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pause for a moment, and think of what should happen when &lt;code&gt;thisWorks&lt;/code&gt;
and &lt;code&gt;thisFails&lt;/code&gt; are used, and in what way, and why. In both cases, we
have a tuple and are returning the first element or the second element of
the tuple. The second element is a list that is clearly ill-typed,
because it contains something that is nonsensical (division of a
string by a boolean).&lt;/p&gt;

&lt;h2 id=&#34;the-role-of-laziness:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;The role of laziness&lt;/h2&gt;

&lt;p&gt;To understand what happens in the following tests, you need to
understand how laziness works in Haskell. The word &amp;ldquo;lazy&amp;rdquo; has come to
be used for many different ideas and constructs in different
programming languages, but Haskell&amp;rsquo;s &amp;ldquo;laziness&amp;rdquo; is unique. A full
discussion is outside the scope of this article, but I thought that
showing what happens with deferred type errors might be a gateway
toward better understanding the execution model of Haskell.&lt;/p&gt;

&lt;h3 id=&#34;never-reached:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Never reached&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    it &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;you can run code even if it contains ill-typed parts&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
      thisWorks `shouldBe` &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works because tuples in Haskell are lazy, and therefore in
ordinary typechecking, taking the first element of a well-typed tuple
succeeds no matter what is in the second element of the tuple. The
difference when operating in deferred typechecking mode is that the
tuple doesn&amp;rsquo;t even need to be well-typed, and the second element can
be complete junk, as it is here. So this example is straightforward if
you consider that what GHC does is somehow push the type error into a
reasonably small context so that outside of it, things still typecheck
and run normally.&lt;/p&gt;

&lt;h3 id=&#34;laziness-all-the-way-down:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Laziness all the way down&lt;/h3&gt;

&lt;p&gt;So what happens if we get the second element of the tuple, it is junk,
and take its length?&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    it &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;deferred type errors are only lazily reached&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
      length thisFails `shouldBe` &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The answer is that everything is still fine, because the embedded list
inside the lazy tuple is a lazy list (because lists in Haskell are
lazy), and &lt;code&gt;length&lt;/code&gt; never looks at the elements of the list, only
counts their number, so it passes over the junky thunk for &lt;code&gt;&amp;quot;world&amp;quot; /
True&amp;quot;&lt;/code&gt; perfectly fine without needing to evaluate it.&lt;/p&gt;

&lt;h3 id=&#34;forcing-the-laziness:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Forcing the laziness&lt;/h3&gt;

&lt;p&gt;To explicitly force laziness into fully evaluated data (the kind of
data in standard programming languages), we need to use the
&lt;a href=&#34;https://hackage.haskell.org/package/deepseq&#34;&gt;&lt;code&gt;deepseq&lt;/code&gt;&lt;/a&gt; package. It&amp;rsquo;s
work to fully, deeply evaluate something in Haskell! We use
&lt;a href=&#34;https://hackage.haskell.org/package/deepseq-1.4.1.2/docs/Control-DeepSeq.html#v:force&#34;&gt;&lt;code&gt;force&lt;/code&gt;&lt;/a&gt;
from that package.&lt;/p&gt;

&lt;p&gt;In order to catch, in HSpec, the exception we expect to finally get, we
also need to use
&lt;a href=&#34;https://hackage.haskell.org/package/base-4.8.1.0/docs/Control-Exception.html#v:evaluate&#34;&gt;&lt;code&gt;evaluate&lt;/code&gt;&lt;/a&gt;
from &lt;code&gt;Control.Exception&lt;/code&gt; in
&lt;a href=&#34;https://hackage.haskell.org/package/base&#34;&gt;&lt;code&gt;base&lt;/code&gt;&lt;/a&gt;, the main package
of the ecosystem (discussed
in a &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-23-24-days-of-hackage-base.html&#34;&gt;2012 Day of Hackage post&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Control.Exception&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;evaluate&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Control.DeepSeq&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;force&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Our test (which for simplicity is coarse in that it catches any
exception, rather than the specific typechecking exception):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    it &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;deferred type errors cause an exception only when reached&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
      evaluate (force thisFails) `shouldThrow` anyException
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The deep evaluation will go all the way down to the junky expression
in the list in the tuple of our example, and a typechecking error is
thrown there at run time, as expected.&lt;/p&gt;

&lt;p&gt;Suppose we were just evaluating &lt;code&gt;thisFails&lt;/code&gt; from code, say within
GHCi. This is what we get:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;*Main&amp;gt; import ShouldNotTypecheckExample&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;*Main ShouldNotTypecheckExample&amp;gt; thisFails&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;&amp;quot;*** Exception: /Users/chen/Sync/haskell/twenty-four-days2015-of-hackage/src/ShouldNotTypecheckExample.hs:14:26:&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;    No instance for (Fractional Char) arising from a use of ‘/’&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;    In the expression: &amp;quot;world&amp;quot; / True&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;    In the expression: [&amp;quot;world&amp;quot; / True, &amp;quot;!&amp;quot;]&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;    In the first argument of ‘snd’, namely&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;      ‘(&amp;quot;hello&amp;quot;, [&amp;quot;world&amp;quot; / True, &amp;quot;!&amp;quot;])’&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;(deferred type error)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;haskell-is-not-really-being-dynamic-here:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Haskell is not really being dynamic here&lt;/h2&gt;

&lt;p&gt;So is Haskell dynamically typed then, when running in this mode? Not
really. It&amp;rsquo;s faking it. What it&amp;rsquo;s basically doing is that the
typechecker is &lt;em&gt;still finding the type error at compile time&lt;/em&gt;, but
then secretly creating the exception information at the site of the
crappy code and replacing that code with a call to throw that
exception. The technical details are
&lt;a href=&#34;http://dreixel.net/research/pdf/epdtecp.pdf&#34;&gt;in this paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is completely different from the dynamic checking where nothing
is checked at compile time and an error is discovered during the
course of run time execution. Here, the error is discovered up front,
stashed away, and kept a secret until or unless it is demanded.&lt;/p&gt;

&lt;h2 id=&#34;for-more-on-laziness-and-forcing:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;For more on laziness and forcing&lt;/h2&gt;

&lt;p&gt;Simon Marlow&amp;rsquo;s free book
&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1230000000929&#34;&gt;&amp;ldquo;Parallel and Concurrent Programming in Haskell&amp;rdquo;&lt;/a&gt;
has chapters on evaluation strategies, starting with &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-sudoku2&#34;&gt;chapter 2&lt;/a&gt;. This stuff is subtle.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For day 5, I introduced the &lt;code&gt;should-not-typecheck&lt;/code&gt; package and briefly
discussed Haskell&amp;rsquo;s lazy evaluation and how it interacts with GHC&amp;rsquo;s
deferred type errors. A later Day of Hackage will venture into the
world of doing &amp;ldquo;real&amp;rdquo; dynamic typing in Haskell.&lt;/p&gt;

&lt;h2 id=&#34;all-the-code:60dd71330bbedef1aba1bef45daea5dd&#34;&gt;All the code&lt;/h2&gt;

&lt;p&gt;All my code for my article series are at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskell tidbits: 24 days of Hackage, 2015: day 1: Introduction and Stack</title>
      <link>http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/</link>
      <pubDate>Mon, 30 Nov 2015 16:20:11 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents-for-the-whole-series:c37cfe20acfff0cff8579f026185f721&#34;&gt;Table of contents for the whole series&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Day 1: &lt;a href=&#34;../../blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;Introduction and Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 2: &lt;a href=&#34;../../blog/2015/12/02/24-days-of-hackage-2015-day-2-regexes-with-pcre-heavy-standalone-haskell-scripts-using-stack/&#34;&gt;Regexes with pcre-heavy; standalone Haskell scripts using Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 3: &lt;a href=&#34;../../blog/2015/12/03/24-days-of-hackage-2015-day-3-hspec-the-importance-of-testing/&#34;&gt;HSpec; the importance of testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 4:
&lt;a href=&#34;../../blog/2015/12/04/24-days-of-hackage-2015-day-4-wreq-web-client-programming-with-notes-on-lens-and-operator-syntax/&#34;&gt;wreq: Web client programming; with notes on lens and operator syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 5: &lt;a href=&#34;../../blog/2015/12/05/24-days-of-hackage-2015-day-5-should-not-typecheck-making-haskell-sort-of-dynamically-typed-with-deferred-type-errors/&#34;&gt;should-not-typecheck: making
Haskell sort of dynamically typed with deferred type errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 6: &lt;a href=&#34;../../blog/2015/12/06/24-days-of-hackage-2015-day-6-finding-utilities-with-hoogle-and-hayoo-missingh-extra/&#34;&gt;finding utilities with Hoogle
and Hayoo: MissingH, extra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 7: &lt;a href=&#34;../../blog/2015/12/07/24-days-of-hackage-2015-day-7-semigroups-nonempty-list-and-a-case-study-of-types-and-tests/&#34;&gt;semigroups; NonEmpty list and
a case study of types and tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 8: &lt;a href=&#34;../../blog/2015/12/08/24-days-of-hackage-2015-day-8-multiset-i-wish-this-were-in-the-standard-containers-package/&#34;&gt;multiset; I wish this were in the standard containers package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;day-1:c37cfe20acfff0cff8579f026185f721&#34;&gt;Day 1&lt;/h2&gt;

&lt;p&gt;A couple of days ago, I happened to see a
&lt;a href=&#34;https://twitter.com/acid2/status/669882628695281669&#34;&gt;tweet from Ollie Charles&lt;/a&gt;
that he didn&amp;rsquo;t have time to do his usual annual December &amp;ldquo;24 days of&amp;hellip;&amp;rdquo;
Haskell blog posts this year (2015) and felt sad because I&amp;rsquo;ve
learned a huge amount from
&lt;a href=&#34;https://ocharles.org.uk/blog/&#34;&gt;reading them&lt;/a&gt;. In both 2012 and 2013, he
wrote &amp;ldquo;24 days of Hackage&amp;rdquo;, daily short and sweet blog posts that
showed how to use selected Haskell packages you can get from the
community archive &lt;a href=&#34;http://hackage.haskell.org/&#34;&gt;Hackage&lt;/a&gt;, and in 2014
he covered GHC language extensions.&lt;/p&gt;

&lt;p&gt;With some trepidation, I decided that I would do a &amp;ldquo;24 days of
Hackage&amp;rdquo; series myself to cap off this year, to share a selection of
the huge number of Haskell packages I find useful. I thought it would
be particularly appropriate to do this given that 2015 was the year
that I migrated to &lt;em&gt;using Haskell as my main language&lt;/em&gt; for most new work and
personal projects, and therefore this has been a year of considerable
discovery for me.&lt;/p&gt;

&lt;h2 id=&#34;all-the-code:c37cfe20acfff0cff8579f026185f721&#34;&gt;All the code&lt;/h2&gt;

&lt;p&gt;All my code for my article series will be at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;my-selection-criteria:c37cfe20acfff0cff8579f026185f721&#34;&gt;My selection criteria&lt;/h2&gt;

&lt;p&gt;How to choose what to cover? I like what Ollie wrote in his
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-01-24-days-of-hackage.html&#34;&gt;2012 inaugural post&lt;/a&gt;:
&amp;ldquo;This will be a whirlwind tour of some modules that I use on an almost
daily basis, including modules that have inspired me, modules that
have changed the way I think about code, and some modules that are so
amazing I’m not even smart enough to use them!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;My own intention: some of what I&amp;rsquo;ll cover is already popular and
well-known, some may be just minor but useful utilities, some may be
completely obscure, but the underlying theme will be &amp;ldquo;stuff I use and
can briefly say something useful about&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;stack:c37cfe20acfff0cff8579f026185f721&#34;&gt;Stack&lt;/h2&gt;

&lt;p&gt;It was a no-brainer to choose the first day&amp;rsquo;s topic:
&lt;a href=&#34;http://haskellstack.org/&#34;&gt;Stack&lt;/a&gt;, the main new thing for Haskell in
2015 other than &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; 7.10.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack changed my (Haskell) life.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stack is a game changer for the Haskell community. It is an all-in-one
solution for creating Haskell projects, managing dependencies,
building, and more. Since Stack came out, I&amp;rsquo;ve been slowly migrating
old projects to use it, and I use Stack for all new projects,
including the
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;repo for this article series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not giving a full-blown tutorial on Stack here today, just a
little taste, and you can read the
&lt;a href=&#34;http://haskellstack.org/&#34;&gt;official documentation&lt;/a&gt; for details, but
what I want to emphasize is that Stack is useful not only for
experienced developers, but especially also for newcomers, so part of
today&amp;rsquo;s article is geared specifically to newcomers (or those who
tried Haskell once and are interested in a fresh start with better
tooling).&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-get-started-with-haskell:c37cfe20acfff0cff8579f026185f721&#34;&gt;&amp;ldquo;How do I get started with Haskell&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;When I launched &lt;a href=&#34;http://pittsburghhaskell.org/&#34;&gt;Pittsburgh Haskell&lt;/a&gt;
in February this year (2015), I faced a huge hurdle: helping newcomers
to Haskell get started. I created an introductory workshop session,
but a huge number of people were discouraged by my best shot at
creating &lt;a href=&#34;https://github.com/pittsburgh-haskell/haskell-installation&#34;&gt;a now-obsolete set of Haskell installation instructions&lt;/a&gt; that would work for Mac OS,
Windows, and Linux, and people had major problems installing a basic
tool chain, and versioning issues if they already had an old version
of GHC installed. Too much time was wasted on trying to help people with
installation.&lt;/p&gt;

&lt;p&gt;Pittsburgh Haskell happened to go on hiatus in April as I got busy
with many other things and there was no momentum at the time to keep
it going, but I believe one huge problem in trying to create a new
local Haskell community from newcomers was the tooling/setup
annoyance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack solves this problem.&lt;/strong&gt; If I gave an introductory Haskell workshop again, I would definitely use Stack.&lt;/p&gt;

&lt;h2 id=&#34;an-example-of-getting-started-with-stack-using-a-custom-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;An example of getting started with Stack using a custom template&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t already use Stack,
&lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Stack Web site already has documentation on how to get started
with Stack using a default template. Here, I want to promote the idea
of using and sharing custom templates. This is not documented so well,
but I think will become more and more important for newcomers, and is
also of course useful for any of us who end up creating the same
boilerplate project setups.&lt;/p&gt;

&lt;h3 id=&#34;using-an-official-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;Using an official template&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve created a custom template called &lt;code&gt;franklinchen&lt;/code&gt; that is part of
the official &lt;a href=&#34;https://github.com/commercialhaskell/stack-templates&#34;&gt;&lt;code&gt;stack-templates&lt;/code&gt;&lt;/a&gt;
repo.&lt;/p&gt;

&lt;p&gt;If you run&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack new stack-template-demo franklinchen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you will be prompted for information to create a new project called &lt;code&gt;stack-template-demo&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;using-your-own-local-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;Using your own local template&lt;/h3&gt;

&lt;p&gt;Note that the template specified does &lt;em&gt;not&lt;/em&gt; have to be in the official
&lt;code&gt;stack-templates&lt;/code&gt; repo. It can also be on your local file system. For
example, before I submitted my template to &lt;code&gt;stack-templates&lt;/code&gt;, I used
to run&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack new stack-template-demo /path/on/my/computer/to/franklinchen.hsfiles
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;franklinchen.hsfiles&lt;/code&gt; is my template (read below on creating
your own template).&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;ve put up an instance of the generated project up
&lt;a href=&#34;https://github.com/FranklinChen/stack-template-demo&#34;&gt;on GitHub&lt;/a&gt; if
you want to look at its structure without installing and running Stack
right now.)&lt;/p&gt;

&lt;h3 id=&#34;getting-started-with-the-newly-generated-project:c37cfe20acfff0cff8579f026185f721&#34;&gt;Getting started with the newly generated project&lt;/h3&gt;

&lt;p&gt;Enter the project directory:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;cd &lt;/span&gt;stack-template-demo
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;stack-downloads-ghc-for-you:c37cfe20acfff0cff8579f026185f721&#34;&gt;Stack downloads GHC for you&lt;/h3&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack setup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you do not already have an appropriate version of GHC installed,
Stack will &lt;em&gt;automatically&lt;/em&gt; download and install it for you, into an
area in Stack&amp;rsquo;s configuration directory &lt;code&gt;~/.stack/&lt;/code&gt;. The important
thing to note is that when using Stack, multiple versions of GHC can
coexist as desired for different build configurations and setups. This
feature is really important, because not everyone uses the same
version of GHC and you can build your project against multiple
versions of GHC easily.&lt;/p&gt;

&lt;p&gt;This automatic-downloading feature is particularly useful for
newcomers who don&amp;rsquo;t need to mess around with some kind of separate
global installation requiring special privileges.&lt;/p&gt;

&lt;p&gt;The output, if Stack needs to download anything:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;Preparing to install GHC to an isolated location.&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;This will not interfere with any system-level installation.&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Downloaded ghc-7.10.2.&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Installed GHC.&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;stack will use a locally installed GHC&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;For more information on paths, see &amp;#39;stack path&amp;#39; and &amp;#39;stack exec env&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;To use this GHC and packages outside of a project, consider using:&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;stack ghc, stack ghci, stack runghc, or stack exec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;launching-the-ghci-repl:c37cfe20acfff0cff8579f026185f721&#34;&gt;Launching the GHCi REPL&lt;/h3&gt;

&lt;p&gt;The most important thing for a newcomer to Haskell is to get started
with the GHCi REPL, so let&amp;rsquo;s do that right away. Doing this within the
context of a project while preloading the modules of the project is
simple with Stack.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack ghci
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;strong&gt;only the first time&lt;/strong&gt; you do this (or other commands that
require getting library dependencies), Stack may take a while to
download and build them. The dependencies will actually end up being
installed and cached such that &lt;em&gt;other projects&lt;/em&gt; in the future that use
them can reuse them. This is a huge advantage of using Stack versus
the old days before Stack, when there was always an issue of
redownloading and recompiling the same libraries for different
projects; that was a tremendous time and space waster! Stack
intelligently figures out for you what can be shared consistently or
not.&lt;/p&gt;

&lt;p&gt;Stack launches a GHCi REPL with our modules preloaded:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;Ok, modules loaded: Lib, Main.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;src/Lib.hs&lt;/code&gt; of the sample project, we have a silly module
illustrating some &lt;a href=&#34;https://www.haskell.org/haddock/&#34;&gt;Haddock&lt;/a&gt;
documentation comments:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | A library to do stuff.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Lib&lt;/span&gt;
    (
      &lt;span style=&#34;color: #0000FF&#34;&gt;ourAdd&lt;/span&gt;
    ) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | Add two &amp;#39;Int&amp;#39; values.&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;ourAdd&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Int&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- ^ left&lt;/span&gt;
       &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Int&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- ^ right&lt;/span&gt;
       &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Int&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- ^ sum&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;ourAdd&lt;/span&gt; x y &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can access the &lt;code&gt;Lib&lt;/code&gt; module from the REPL:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;*Main&amp;gt; ourAdd 2 3&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;*Main&amp;gt; Lib.ourAdd 4 5&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also access &lt;code&gt;Main&lt;/code&gt;, which is defined in &lt;code&gt;app/Main.hs&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Main&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Lib&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;ourAdd&lt;/span&gt;)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Text.Printf&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;printf&lt;/span&gt;)

&lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; printf &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2 + 3 = %d&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; (ourAdd &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;*Main&amp;gt; main&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;2 + 3 = 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;building-and-running-the-project:c37cfe20acfff0cff8579f026185f721&#34;&gt;Building and running the project&lt;/h3&gt;

&lt;p&gt;You could have explicitly compiled the project first, before launching
the REPL. In practice in real projects, I start by compiling a project
to get the dependencies compiled, before I use GHCi, but the above
does it for you too:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack build
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Because I defined a native-compiled binary executable named
&lt;code&gt;stack-template-demo&lt;/code&gt; in our Cabal file &lt;code&gt;stack-template-demo.cabal&lt;/code&gt;,
we can run the executable:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack &lt;span style=&#34;color: #008000&#34;&gt;exec &lt;/span&gt;stack-template-demo
&lt;span style=&#34;color: #888888&#34;&gt;2 + 3 = 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I supplied unit tests for &lt;code&gt;Lib&lt;/code&gt; in &lt;code&gt;test/LibSpec.hs&lt;/code&gt; that can be run:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack &lt;span style=&#34;color: #008000&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Lib&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;  Lib&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;    works&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;    ourAdd is commutative&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;Finished in 0.0007 seconds&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;2 examples, 0 failures&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;installing-the-library-and-executable:c37cfe20acfff0cff8579f026185f721&#34;&gt;Installing the library and executable&lt;/h3&gt;

&lt;p&gt;You can now install the library and executable for your own use later:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack install
&lt;span style=&#34;color: #888888&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Copying from /Users/chen/stack-template-demo/.stack-work/install/x86_64-osx/lts-3.16/7.10.2/bin/stack-template-demo to /Users/chen/.local/bin/stack-template-demo&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;Copied executables to /Users/chen/.local/bin:&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;- stack-template-demo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;For example (since &lt;code&gt;~/.local/bin&lt;/code&gt; is in my &lt;code&gt;PATH&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; stack-template-demo
&lt;span style=&#34;color: #888888&#34;&gt;2 + 3 = 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;your-own-stack-template-configuration:c37cfe20acfff0cff8579f026185f721&#34;&gt;Your own Stack template configuration&lt;/h3&gt;

&lt;p&gt;When using Stack templates, it&amp;rsquo;s useful to set up a
configuration so that information can automatically be filled out for
you when you generate new projects. The documentation for
configuration is
&lt;a href=&#34;http://docs.haskellstack.org/en/stable/yaml_configuration.html&#34;&gt;here&lt;/a&gt;. Create
a file in
&lt;code&gt;~/.stack/config.yaml&lt;/code&gt;. Mine has:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;templates:
  params:
    author-email: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;franklinchen@franklinchen.com&amp;quot;&lt;/span&gt;
    author-name: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Franklin&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;Chen&amp;quot;&lt;/span&gt;
    category: test
    copyright: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2015&amp;quot;&lt;/span&gt;
    github-username: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;FranklinChen&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;other-bells-and-whistles:c37cfe20acfff0cff8579f026185f721&#34;&gt;Other bells and whistles&lt;/h3&gt;

&lt;p&gt;I try to use &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; for any public
code I put up, so my template generates a &lt;code&gt;.travis.yml&lt;/code&gt; file that uses
Stack. I&amp;rsquo;ve started to migrate my former Travis setups based on
&lt;a href=&#34;https://github.com/hvr/multi-ghc-travis&#34;&gt;&lt;code&gt;multi-ghc-travis&lt;/code&gt;&lt;/a&gt; to use
Stack instead.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-custom-stack-project-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;Creating a custom Stack project template&lt;/h2&gt;

&lt;p&gt;It was surprising to me that how to create a custom template is not
covered in the main Stack documentation. Instead, I found it at the
&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates&#34;&gt;&lt;code&gt;stack-templates&lt;/code&gt;&lt;/a&gt;
site.&lt;/p&gt;

&lt;p&gt;The method of creating a custom template is kind of clumsy, involving
creating a single file with embedded directives to indicate generated
file name and directory structure, but it&amp;rsquo;s a start.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:c37cfe20acfff0cff8579f026185f721&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For day 1 of my &amp;ldquo;24 days of Hackage, 2015&amp;rdquo;, I&amp;rsquo;ve briefly introduced
how to use Stack, the Haskell tool that I&amp;rsquo;m using to build and run all
the sample code for this article series.&lt;/p&gt;

&lt;p&gt;Next up: some real code!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>