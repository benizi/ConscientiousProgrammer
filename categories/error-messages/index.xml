<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Error Messages on The Conscientious Programmer</title>
    <link>http://ConscientiousProgrammer.com/categories/error-messages/</link>
    <description>Recent content in Error Messages on The Conscientious Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jun 2013 18:15:00 +0000</lastBuildDate>
    <atom:link href="http://ConscientiousProgrammer.com/categories/error-messages/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>nil, non-determinism, exceptions: a journey in debugging the software that generates my blog</title>
      <link>http://conscientiousprogrammer.com/blog/2013/06/29/nil-non-determinism-exceptions/</link>
      <pubDate>Sat, 29 Jun 2013 18:15:00 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/06/29/nil-non-determinism-exceptions/</guid>
      <description>

&lt;p&gt;I mentioned in my &lt;a href=&#34;../../blog/2013/06/24/introducing-this-new-programming-blog/&#34;&gt;initial post for this blog&lt;/a&gt; that I have had some problems with the software I use to generate my personal blog, &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;, and was thinking of migrating to a different platform that might in some ways be more robust to such problems. I ended up not doing so, and I still stand by that decision, but I just yet again ran into a problem with Octopress.&lt;/p&gt;

&lt;p&gt;Here I report on how I figured out the problem and begin a conversation about the nature of error handling and API design.&lt;/p&gt;

&lt;h2 id=&#34;a-disclaimer:08c2e7a867293a37060f4f671511a7f1&#34;&gt;A disclaimer&lt;/h2&gt;

&lt;p&gt;I want to emphasize that although I will be critiquing some code, I do not mean to imply that I am a perfect programmer or that this software is of really poor quality. I have written software in the past that has crapped out with &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; errors. In addition, the fact that I basically trust and use this software to drive my blogs is a reflection of the fact that it mostly works. Almost all software that has been written, is being written now, and will be written in the future has bugs. Every day we all trust and use software that we know has bugs. And this blogging platform I use is the product of many, many volunteers who contribute to the world through open source through the goodness of their hearts. I happily use this software, warts and all, and am grateful to everyone who works to maintain and improve it!&lt;/p&gt;

&lt;h2 id=&#34;blog-generation:08c2e7a867293a37060f4f671511a7f1&#34;&gt;Blog generation&lt;/h2&gt;

&lt;p&gt;The problem arose when I tried to generate &lt;a href=&#34;http://franklinchen.com/&#34;&gt;my personal blog&lt;/a&gt;. I got a &lt;a href=&#34;http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/&#34;&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/a&gt; failure.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the error message (I have omitted the 46-line stack trace):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;      Generating... Liquid Exception: undefined method `sub&amp;#39; for nil:NilClass in atom.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is, unfortunately, an example of an error message that is next to useless, and should &lt;em&gt;never&lt;/em&gt; appear. I have stated that &lt;a href=&#34;../../blog/2013/06/26/we-should-not-create-this-kind-of-terrible-error-message-for-the-end-user/&#34;&gt;we as programmers should not generate useless end user error messages&lt;/a&gt;, and of course, in context, I am an end user of the blog generating software I use.&lt;/p&gt;

&lt;h2 id=&#34;debugging-and-finding-the-root-cause:08c2e7a867293a37060f4f671511a7f1&#34;&gt;Debugging and finding the root cause&lt;/h2&gt;

&lt;p&gt;Thanks to all the Ruby libraries being open source and installed on my machine, by using the stack trace and &lt;code&gt;debugger&lt;/code&gt;, I figured out the immediate cause of the stray &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It turns out that Octopress uses Jekyll, which uses &lt;a href=&#34;https://github.com/tmm1/pygments.rb&#34;&gt;pygments.rb&lt;/a&gt; to do HTML highlighting of code blocks. (I use Octopress precisely because of its built-in support for code block highlighting.)&lt;/p&gt;

&lt;p&gt;The bug is that the code in Jekyll that does syntax highlighting using Pygments makes an assumption that the return value of &lt;code&gt;Pygments.highlight()&lt;/code&gt; is never &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;              &lt;span style=&#34;color: #19177C&#34;&gt;@renderer&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color: #880000&#34;&gt;Redcarpet&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Render&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;HTML&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;block_code&lt;/span&gt;(code, lang)
                  lang &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; lang &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; lang&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;split&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
                  output &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_code_tags(
                    &lt;span style=&#34;color: #880000&#34;&gt;Pygments&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;highlight(code, &lt;span style=&#34;color: #19177C&#34;&gt;:lexer&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; lang, &lt;span style=&#34;color: #19177C&#34;&gt;:options&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color: #19177C&#34;&gt;:encoding&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt; }),
                    lang
                  )
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add_code_tags&lt;/span&gt;(code, lang)
                  code &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; code&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color: #BB6688&#34;&gt;/&amp;lt;pre&amp;gt;/&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; lang &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;)
                  code &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; code&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color: #BB6688&#34;&gt;/&amp;lt;\/pre&amp;gt;/&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;)
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Well, it &lt;em&gt;can&lt;/em&gt; be &lt;code&gt;nil&lt;/code&gt; and was for me, and therefore &lt;code&gt;add_code_tags&lt;/code&gt; was calling &lt;code&gt;code.sub()&lt;/code&gt; with &lt;code&gt;code&lt;/code&gt; being &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The bug exists in all the more recent versions of pygments.rb, including 0.4.2 (which is used for my personal blog) and 0.3.7 (which is used for this blog) and the latest released version, 0.5.1. The bug was actually reported by someone two weeks ago, and I added extra commentary, but &lt;a href=&#34;https://github.com/tmm1/pygments.rb/issues/78&#34;&gt;it has not yet been fixed&lt;/a&gt;, so I plan to contribute a fix and submit a pull request.&lt;/p&gt;

&lt;h2 id=&#34;whose-responsibility-to-check-for-nil:08c2e7a867293a37060f4f671511a7f1&#34;&gt;Whose responsibility to check for &lt;code&gt;nil&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;Whenever there is an error, one has to ask whose responsibility it was to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;detect the error&lt;/li&gt;
&lt;li&gt;handle the error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think it is poor practice to engage in random and spotty &amp;ldquo;defensive programming&amp;rdquo; that checks for &lt;code&gt;nil&lt;/code&gt; here and there, willy-nilly, just to avoid a big program crash. There should be clearly delineated boundaries of error handling.&lt;/p&gt;

&lt;p&gt;In this case, it is surprising that a syntax highlighter for some text could return &lt;code&gt;nil&lt;/code&gt;. One would think that if a syntax highlighter got confused, it could return the text verbatim, for example, without any special formatting. (By the way, don&amp;rsquo;t get me started on the abominable use of HTML string hacking in this code instead of, say, building a proper HTML AST; I&amp;rsquo;ll write about that topic later.)&lt;/p&gt;

&lt;h2 id=&#34;documentation-of-api:08c2e7a867293a37060f4f671511a7f1&#34;&gt;Documentation of API&lt;/h2&gt;

&lt;p&gt;Unfortunately, the documentation of the Pygments API was incomplete in &lt;code&gt;lib/pygments/popen.rb&lt;/code&gt;, where &lt;code&gt;highlight&lt;/code&gt; is defined:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Public: Highlight code.&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Takes a first-position argument of the code to be highlighted, and a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# second-position hash of various arguments specifiying highlighting properties.&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;highlight&lt;/span&gt;(code, opts&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;{})
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# If the caller didn&amp;#39;t give us any code, we have nothing to do,&lt;/span&gt;
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# so return right away.&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; code &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; code&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;nil? &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; code&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;empty?

      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Callers pass along options in the hash&lt;/span&gt;
      opts&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;:options&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;||=&lt;/span&gt; {}

      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Default to utf-8 for the output encoding, if not given.&lt;/span&gt;
      opts&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;:options&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;:outencoding&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;

      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Get back the string from mentos and force encoding if we can&lt;/span&gt;
      str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mentos(&lt;span style=&#34;color: #19177C&#34;&gt;:highlight&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;nil&lt;/span&gt;, opts, code)
      str&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;force_encoding(opts&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;:options&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;:outencoding&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; str&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;respond_to?(&lt;span style=&#34;color: #19177C&#34;&gt;:force_encoding&lt;/span&gt;)
      str
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;a-problem-with-dynamically-typed-language-culture:08c2e7a867293a37060f4f671511a7f1&#34;&gt;A problem with dynamically typed language culture&lt;/h2&gt;

&lt;p&gt;The documentation doesn&amp;rsquo;t actually fully specify what the arguments can be, and does not specify what the result should be either! This is a glaring drawback of most code that I have seen in dynamically typed languages such as Ruby. People don&amp;rsquo;t document exactly what can come in or out. A newcomer to a code base (such as me in this situation) cannot just read off the types and know immediately what is going on and what has been promised and what is delivered by a function. As a result, the code reader has to play compiler and read a lot more code to try to figure out what is going on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In principle&lt;/em&gt;, someone writing code in a dynamically typed language could provide very helpful comments that amount to informal type annotations, but in practice people do not. I have found in my two decades of programming that human psychology trumps theoretical possibility any day. If something is optional, people won&amp;rsquo;t do it, unless there is a very strong de facto community standard. (It turns out, for example, that what I really admire about the Ruby community is that for some reason, there is a very strong de facto community standard of doing at least some &lt;em&gt;unit testing&lt;/em&gt; as part of the whole development process. I find this sadly missing in some statically typed language communities.)&lt;/p&gt;

&lt;p&gt;In code in a statically typed language such as OCaml (or Haskell or Scala), I would expect to see:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt; highlight &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;code &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;opts &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; my_map&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;//...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and expect that the return value should be a &lt;code&gt;String&lt;/code&gt;, or&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt; highlight &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;code &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;opts &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; my_map&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; option &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;//...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;to indicate that the return value could be either &lt;code&gt;Some(formatted_code)&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;nil-all-over-the-place:08c2e7a867293a37060f4f671511a7f1&#34;&gt;&lt;code&gt;nil&lt;/code&gt; all over the place&lt;/h2&gt;

&lt;p&gt;Reading the Ruby code, I saw that the situation is even more complex than I thought:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# If the caller didn&amp;#39;t give us any code, we have nothing to do,&lt;/span&gt;
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# so return right away.&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; code &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; code&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;nil? &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; code&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;empty?
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Wow: &lt;code&gt;code&lt;/code&gt; can be &lt;code&gt;nil&lt;/code&gt;, in which case &lt;code&gt;nil&lt;/code&gt; is returned.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All code that can return &lt;code&gt;nil&lt;/code&gt; should document this fact so that the caller knows what to do.&lt;/em&gt; Ideally, the writer of pygments.rb should have documented this fact, and then the writer of Jekyll would in turn have added &lt;code&gt;nil&lt;/code&gt; checking in its rendering code.&lt;/p&gt;

&lt;p&gt;Furthermore, it turns out that &lt;code&gt;mentos()&lt;/code&gt; can return &lt;code&gt;nil&lt;/code&gt; on a non-&lt;code&gt;nil&lt;/code&gt; code string! This was a surprise to me.&lt;/p&gt;

&lt;h2 id=&#34;nil-is-not-even-the-real-problem-here-non-determinism-is:08c2e7a867293a37060f4f671511a7f1&#34;&gt;&lt;code&gt;nil&lt;/code&gt; is not even the real problem here: non-determinism is&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mentos()&lt;/code&gt; is not very well documented. Until I read this code, I didn&amp;rsquo;t realize that pygments.rb actually embeds a call to the Python interpreter to execute the Python Pygments parser to do the real work! In &lt;code&gt;lib/pygments/popen.rb&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Our &amp;#39;rpc&amp;#39;-ish request to mentos. Requires a method name, and then optional&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# args, kwargs, code.&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;mentos&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;method&lt;/span&gt;, args&lt;span style=&#34;color: #666666&#34;&gt;=[]&lt;/span&gt;, kwargs&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;{}, original_code&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;nil&lt;/span&gt;)
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Open the pipe if necessary&lt;/span&gt;
      start &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;unless&lt;/span&gt; alive?

      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;begin&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Timeout requests that take too long.&lt;/span&gt;
        timeout_time &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;

        &lt;span style=&#34;color: #880000&#34;&gt;Timeout&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timeout(timeout_time) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# ...[I omitted some code]&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;Timeout&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Error&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# If we timeout, we need to clear out the pipe and start over.&lt;/span&gt;
        &lt;span style=&#34;color: #19177C&#34;&gt;@log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;error &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;[&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;now&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;iso8601&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;] Timeout on a mentos &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt; call&amp;quot;&lt;/span&gt;
        stop &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Timeout on mentos &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt; call.&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;Errno&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;EPIPE&lt;/span&gt;, &lt;span style=&#34;color: #880000&#34;&gt;EOFError&lt;/span&gt;
    stop &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;EPIPE&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;MentosError&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;EPIPE&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It turns out that fundamental problem is not &lt;code&gt;nil&lt;/code&gt; so much as &lt;em&gt;non-determinism&lt;/em&gt;: my computer was under heavy load when I was generating my blog, and therefore the timeout kicked in and caused a failure to communicate with the Python process and therefore for &lt;code&gt;nil&lt;/code&gt; to end up being returned. This non-determinism is worse than &lt;code&gt;nil&lt;/code&gt;. I think that in a situation like this, an &lt;em&gt;exception&lt;/em&gt; is called for. &lt;code&gt;highlight()&lt;/code&gt; should actually raise an exception, which would then be propagated to Jekyll, which could give a useful error message about the timeout. I think this is a better design than return &lt;code&gt;nil&lt;/code&gt; (or if using a statically typed language, a &lt;code&gt;None&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I was also disappointed that logging was used in this code, indicating that it was known that bad things could happen, but the logged information was not used in generating a useful exception.&lt;/p&gt;

&lt;p&gt;Amusingly, upon discovering the logging code, I used it, setting the magic environment variable &lt;code&gt;MENTOS_LOG&lt;/code&gt; (from reading the code) to a file, so that I could see what happens, and verify that the timeout happened:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;#&lt;/span&gt; Logfile created on 2013-06-29 10:26:19 -0400 by logger.rb/36483
&lt;span style=&#34;color: #888888&#34;&gt;I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:19-04:00] Starting pid 16533 with fd 10.&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:19-04:00] Out header: {&amp;quot;method&amp;quot;:&amp;quot;highlight&amp;quot;,&amp;quot;args&amp;quot;:null,&amp;quot;kwargs&amp;quot;:{&amp;quot;lexer&amp;quot;:&amp;quot;console&amp;quot;,&amp;quot;options&amp;quot;:{&amp;quot;encoding&amp;quot;:&amp;quot;utf-8&amp;quot;,&amp;quot;outencoding&amp;quot;:&amp;quot;utf-8&amp;quot;},&amp;quot;fd&amp;quot;:10,&amp;quot;id&amp;quot;:&amp;quot;TVQSJNBV&amp;quot;,&amp;quot;bytes&amp;quot;:147}}&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;E, [2013-06-29 10:26 #13799] ERROR -- : [2013-06-29T10:26:27-04:00] Timeout on a mentos highlight call&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:27-04:00] Killing pid: 16533. Reason: Timeout on mentos highlight call.&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;I, [2013-06-29 10:26 #13799]  INFO -- : [2013-06-29T10:26:27-04:00] Killing pid: . Reason: Exiting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;testing:08c2e7a867293a37060f4f671511a7f1&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;It turns out that there &lt;em&gt;is&lt;/em&gt; a place where the intended behavior is in a sense documented: the unit tests in &lt;code&gt;test_pygments.rb&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;test_returns_nil_on_timeout&lt;/span&gt;
    large_code &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;REDIS_CODE&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;300&lt;/span&gt;
    code &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; P&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;highlight(large_code) &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# a 30 mb highlight request will timeout&lt;/span&gt;
    assert_equal &lt;span style=&#34;color: #008000&#34;&gt;nil&lt;/span&gt;, code
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The test creates some huge string in hope of triggering a timeout, and then asserts that the result should be &lt;code&gt;nil&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;OK, fair enough: assuming that the Jekyll authors knew of this intention, then it was Jekyll&amp;rsquo;s responsibility to test for &lt;code&gt;nil&lt;/code&gt; in the call to &lt;code&gt;Pygments.highlight()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The test is not very satisfactory because it artificially tries to generate a timeout. Instead, one could do some mocking or refactoring of &lt;code&gt;mentos()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;nil-is-still-not-ok-but-are-exceptions-ok:08c2e7a867293a37060f4f671511a7f1&#34;&gt;&lt;code&gt;nil&lt;/code&gt; is still not OK; but are exceptions OK?&lt;/h2&gt;

&lt;p&gt;So everything is OK, now that we can take &lt;code&gt;nil&lt;/code&gt; to mean a timeout, right? No, actually, &lt;code&gt;highlight()&lt;/code&gt; can still return a &lt;code&gt;nil&lt;/code&gt; just because &lt;code&gt;code&lt;/code&gt; was &lt;code&gt;nil&lt;/code&gt;. It is bad to bin random different failure modes into one return value. Personally, I would choose to enforce that the input &lt;code&gt;code&lt;/code&gt; is never &lt;code&gt;nil&lt;/code&gt; and that the output is never &lt;code&gt;nil&lt;/code&gt;, and that an exception is raised if there is a timeout.&lt;/p&gt;

&lt;p&gt;An alternative is to not use an exception, but use a union success/failure type instead. This is the route that &lt;a href=&#34;http://blog.stackmob.com/2013/03/why-we-avoid-throwing-exceptions-at-stackmob/&#34;&gt;StackMob uses for its Scala code&lt;/a&gt;. Other Scala developers such as &lt;a href=&#34;http://blog.jessitron.com/2013/06/whats-dirtier-than-comments-exceptions.html&#34;&gt;Jessica Kerr have been arguing against the use of exceptions also&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Google&amp;rsquo;s systems-level statically typed language &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; deliberately &lt;a href=&#34;http://golang.org/doc/faq#exceptions&#34;&gt;does not even have exceptions&lt;/a&gt;, and therefore mandates a style of error handling that involves &lt;a href=&#34;http://golang.org/doc/articles/error_handling.html&#34;&gt;returning a success and failure everywhere&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think there are situations for exceptions and situations for reifying errors as ordinary values in a success/failure object. I will explore this topic further in this blog. Note that even in the Haskell community, there is continued debate over how to handle errors; a famous post compares &lt;a href=&#34;http://blog.ezyang.com/2011/08/8-ways-to-report-errors-in-haskell-revisited/&#34;&gt;eight different ways to handle errors in Haskell&lt;/a&gt;. There is no consensus because there are a lot of tradeoffs involved when it comes to error handling.&lt;/p&gt;

&lt;h2 id=&#34;my-fix:08c2e7a867293a37060f4f671511a7f1&#34;&gt;My fix&lt;/h2&gt;

&lt;p&gt;For now, before I propose to pygments.rb that an exception be raised (this would be least intrusive to Jekyll, whose source code would not need to be changed for the exception to propagate usefully), I simply hacked &lt;code&gt;8&lt;/code&gt; to &lt;code&gt;80&lt;/code&gt; to avoid a timeout!&lt;/p&gt;

&lt;h3 id=&#34;update-of-2013-12-18:08c2e7a867293a37060f4f671511a7f1&#34;&gt;(Update of 2013-12-18)&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;pygments.rb&lt;/code&gt; library &lt;a href=&#34;https://github.com/tmm1/pygments.rb/commit/e0ed7f73f03aa59680b469f4f26e208d3cf8d999&#34;&gt;has finally been updated with a &lt;code&gt;MENTOS_TIMEOUT&lt;/code&gt; environment variable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is obviously a short-term hack, and I don&amp;rsquo;t see how a typical Octopress user would even find out about this new environment variable, but until I implement a better solution and submit a pull request to the &lt;code&gt;pygments.rb&lt;/code&gt; team, I have no right to complain!&lt;/p&gt;

&lt;h2 id=&#34;conclusion:08c2e7a867293a37060f4f671511a7f1&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve used my recent frustration at being unable to publish my personal blog as a vehicle to begin a conversation about error handling and the issues of API design and documentation in the face of errors. I hope you enjoyed the ride.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>We should not create this kind of terrible error message for the end user</title>
      <link>http://conscientiousprogrammer.com/blog/2013/06/26/we-should-not-create-this-kind-of-terrible-error-message-for-the-end-user/</link>
      <pubDate>Wed, 26 Jun 2013 23:44:00 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/06/26/we-should-not-create-this-kind-of-terrible-error-message-for-the-end-user/</guid>
      <description>

&lt;p&gt;I have a &lt;a href=&#34;http://franklinchen.com/blog/2012/03/22/paradox-i-will-observe-the-national-day-of-unplugging-but-just-bought-my-first-smartphone-this-week/&#34;&gt;Samsung Galaxy S II smartphone&lt;/a&gt;. I recently encountered a problem: auto-updating of apps failed with this terrible error message:&lt;/p&gt;

&lt;blockquote&gt;
Application cannot be installed in the default install location.
&lt;/blockquote&gt;

&lt;p&gt;Also, a lot of time and bandwidth was each time spent on re-downloading the app and then failing, with no way to gracefully recover.&lt;/p&gt;

&lt;p&gt;If you search the Web for this unpleasant error message, you will see hundreds if not thousands of confused end users like me asking on various forums how to deal with this.&lt;/p&gt;

&lt;p&gt;I feel pretty bad about this situation, both as a programmer and as an end user.&lt;/p&gt;

&lt;h2 id=&#34;as-an-end-user:e84e5720ba1a79447557437f40b64c27&#34;&gt;As an end user&lt;/h2&gt;

&lt;p&gt;As an end user, I know very little about smartphones. I am not currently a mobile-device developer. I just want things to work, and I have never read the huge manual that came with my phone. If there is an error in my operation of the phone, I want some kind of useful guidance (ideally very specific and tailored to a common use case known by the vendor), not a mysterious generic error message.&lt;/p&gt;

&lt;h2 id=&#34;as-a-programmer:e84e5720ba1a79447557437f40b64c27&#34;&gt;As a programmer&lt;/h2&gt;

&lt;p&gt;It turns out that there is internal device storage and SD card storage, and if you run out of space somewhere, an error can happen, and that there is a default install location for apps. The gory details for developers are &lt;a href=&#34;https://developer.android.com/guide/topics/data/install-location.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clearing some space and also moving a large app to SD card storage solved my problem.&lt;/p&gt;

&lt;p&gt;So why that terrible error message? Why not just tell the end user exactly what is going on? Why not something like:&lt;/p&gt;

&lt;blockquote&gt;
The application X could not be installed at (device storage | SD card storage) because you don&#39;t have enough space. You can try clearing more space, or go to your application settings to move it to (SD card storage | device storage).
&lt;/blockquote&gt;

&lt;p&gt;The application should know exactly what is going on, and not only that, should be able to suggest a course of action based on all the relevant variables, such as how much space there is in different places, how large the application is, etc.&lt;/p&gt;

&lt;h3 id=&#34;why:e84e5720ba1a79447557437f40b64c27&#34;&gt;Why?&lt;/h3&gt;

&lt;p&gt;I haven&amp;rsquo;t seen the source code that generates the existing error message, but as a programmer, I can guess what might be happening.&lt;/p&gt;

&lt;p&gt;I have been as guilty as anyone else of not providing good end user error messages in software I have written. It is very easy to do the following sloppy things instead:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Throwing exceptions that contain no useful information except some string&lt;/li&gt;
&lt;li&gt;Not handling an exception close to where useful recovery can actually happen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is superficially &amp;ldquo;more work&amp;rdquo; to throw an exception that includes all relevant information, and for handlers to also do something intelligent rather than just pass the buck all the way to some top level catch-all handler.&lt;/p&gt;

&lt;p&gt;Also, why should the phone download the whole app and then fail, if there is actually enough information to guess that the whole update might fail? Surely there is information about how big the app is, before downloading it?&lt;/p&gt;

&lt;p&gt;And what&amp;rsquo;s with the default concurrent downloads of many updates at the same time, which greatly increases the probability of failure of all of them, when serializing the downloads results in less use of temporary space?&lt;/p&gt;

&lt;h2 id=&#34;conclusion:e84e5720ba1a79447557437f40b64c27&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We programmers clearly are not conscientious enough about error handling and reporting. I believe that today, more than ever, we have a responsibility to &lt;em&gt;handle failure gracefully&lt;/em&gt; in software. I believe that failure should even be considered to be the &lt;em&gt;default&lt;/em&gt; expectation, rather than success, in order to create reliable software. As &lt;a href=&#34;http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/&#34;&gt;Dick Wall said at the recent 2013 Pittsburgh TechFest&lt;/a&gt;, it&amp;rsquo;s not enough to design and code and test primarily for the &amp;ldquo;happy path&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;There are ways to do error handling better, but they require serious thinking up front. This is a large topic we will be exploring in depth on this blog.&lt;/p&gt;

&lt;h3 id=&#34;update-of-2013-06-27:e84e5720ba1a79447557437f40b64c27&#34;&gt;(Update of 2013-06-27)&lt;/h3&gt;

&lt;p&gt;By sheer coincidence, a great &lt;a href=&#34;http://programming.oreilly.com/2013/06/human-centered-design-may-be-what-makes-your-app-stand-out.html&#34;&gt;interview on &lt;em&gt;human-centered design&lt;/em&gt;&lt;/a&gt; arrived in my RSS feed. Check it out.&lt;/p&gt;

&lt;p&gt;I will be the first to admit that I don&amp;rsquo;t know much about UX or human-centered design. I just have some intuitions as an end user. I think we developers should learn more about this stuff in a more formal, serious way. And it&amp;rsquo;s just a matter of thinking about the ultimate end user. Even if we are not programming for the ultimate end user, we are at least programming for other programmers. If we are writing an API, the principles that guide human behavior must still be valid, even if programmers are an unusual subset of human beings! We write code &lt;em&gt;not&lt;/em&gt; primarily for computers but for other human beings (including our future selves).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Java User Group: Building and Evolving a Java API</title>
      <link>http://conscientiousprogrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/</link>
      <pubDate>Tue, 25 Jun 2013 21:49:00 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/</guid>
      <description>

&lt;p&gt;The topic for the featured presentation at the &lt;a href=&#34;http://java.net/projects/pittjug/&#34;&gt;Pittsburgh Java User Group&lt;/a&gt; (PittJUG) was &amp;ldquo;Building and Evolving a Java API&amp;rdquo;, presented by Eric Stein of &lt;a href=&#34;http://www.fulminatus.com/&#34;&gt;Fulminatus Consulting&lt;/a&gt;. I was excited to attend because API design is difficult but important, and today more than ever, because of the trend toward integrating many services to build an application, and toward providing such services (both externally and internally).&lt;/p&gt;

&lt;p&gt;(For past reports of mine on PittJUG, see the &lt;a href=&#34;http://franklinchen.com/blog/categories/pittjug/&#34;&gt;PittJUG archives in my other blog&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The presentation was very good. (Eric&amp;rsquo;s slides are available &lt;a href=&#34;http://www.fulminatus.com/presentations/PittJUG%20API%20Presentation.pdf&#34;&gt;here&lt;/a&gt;, but as always with slides, be aware that it is just an outline, as good slides really should be, and the actual presentation and group discussion had all the substance.) Note that although some of the specific recommendations and examples are Java-specific, the entire area of good API design is &lt;em&gt;general&lt;/em&gt; and is applicable no matter what programming language you are using.&lt;/p&gt;

&lt;p&gt;However, the presentation also filled me with a combination of &lt;em&gt;sadness&lt;/em&gt;, because our computing profession could have done better up front to make good API design much easier in various ways. On the positive side, it&amp;rsquo;s better late than never.&lt;/p&gt;

&lt;p&gt;A report on the presentation, with my commentary:&lt;/p&gt;

&lt;h2 id=&#34;api-design-for-whom:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;API design for whom?&lt;/h2&gt;

&lt;p&gt;Whenever doing something at all, the question &amp;ldquo;for whom?&amp;rdquo; should always be asked and answered. Eric observed that APIs must meet the different needs of different users, so it&amp;rsquo;s useful to identify three specific end users with different needs, and look at the situation from each of their points of view:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API owner&lt;/li&gt;
&lt;li&gt;specification owner&lt;/li&gt;
&lt;li&gt;logging owner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;His inclusion of the &amp;ldquo;logging owner&amp;rdquo; was intriguing because the point of view from someone whose job it is to wade through logs is often slighted. But in light of ever more complex applications as well as errors and the need for recovery and quick turnaround in fixing them, I believe that Eric is right to argue that logging should be seriously designed, to &amp;ldquo;tell a consistent story&amp;rdquo;. I am taking this advice to heart.&lt;/p&gt;

&lt;h2 id=&#34;design-process:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Design process&lt;/h2&gt;

&lt;p&gt;Eric advised that design should start with use cases. And client code, from the perspective of the end user, as well as tests, should be written up front. He didn&amp;rsquo;t use the term, but this is &lt;a href=&#34;http://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;test-driven development&lt;/a&gt; (TDD), which in my mind has been an unfortunate term, because it is really &lt;em&gt;test-driven design&lt;/em&gt;, which happens to have the nice effect of kick-starting development as well. (I&amp;rsquo;ll be writing more later on this blog about TDD; I no longer start a new project without a TDD mentality and process, so productive and efficient I have found it.)&lt;/p&gt;

&lt;p&gt;One thing that Eric said was to start with the &lt;em&gt;most important&lt;/em&gt; cases first, not the easy cases. Very good advice: I have learned the hard way that it is easy to pat yourself on the back and start with easy cases to feel like you&amp;rsquo;re making progress, but this often leads to hitting a block when getting to the hard cases, and then having to do some major redesign at that point. I&amp;rsquo;ve found that if something is really important, it needs to be addressed immediately, and often will drive the design of the components required to make the important hard case work. (I&amp;rsquo;ll be writing more later on this blog about &amp;ldquo;the hard case&amp;rdquo;, especially in the context of &amp;ldquo;sad paths&amp;rdquo; that are critical.)&lt;/p&gt;

&lt;h2 id=&#34;stability:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Stability&lt;/h2&gt;

&lt;p&gt;Stability is the big difficulty in API design. It&amp;rsquo;s really daunting, actually, to think of the idea of &amp;ldquo;write once, support forever&amp;rdquo;, but people get very unhappy, rightfully, if they start using your API and then things break on them after it changes.&lt;/p&gt;

&lt;h2 id=&#34;simplicity:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Simplicity&lt;/h2&gt;

&lt;p&gt;Eric argued that a good API should be easy to read as well as easy to write. This is all about human psychology.&lt;/p&gt;

&lt;p&gt;Also, he noted that a side effect of his recommendation to write client code and tests first is that you get to see the point of view of the client, and can use this experience to weed out, for example, APIs that require a lot of annoying boilerplate code.&lt;/p&gt;

&lt;h2 id=&#34;subclassing:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Subclassing&lt;/h2&gt;

&lt;p&gt;There was a lot of good material covered about the dangers of exposing or mandating or allowing subclassing.&lt;/p&gt;

&lt;p&gt;I agree with Eric about the &lt;em&gt;dangers of subclassing&lt;/em&gt;. The ability to subclass existing classes is the single most abused feature of object-oriented languages, and when it comes to API design, the problems are even more magnified because of the needs for API security and evolution. Almost always, you want to use composition, not subclassing. I&amp;rsquo;m pretty annoyed that composition, which was well-understood in the 1960s and 1970s, ended up being &amp;ldquo;forgotten&amp;rdquo; in some circles. Eric gave the classic example of a totally disastrous API resulting from the Java library originally coming with a &lt;code&gt;Properties&lt;/code&gt; class that was a subclass of &lt;code&gt;Hashtable&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;immutability:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Immutability&lt;/h2&gt;

&lt;p&gt;Immutable objects have huge advantages over mutable objects.&lt;/p&gt;

&lt;p&gt;This is something has been known by the &lt;a href=&#34;http://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt; community since Lisp in the 1950s and &lt;a href=&#34;http://en.wikipedia.org/wiki/ML_(programming_language)&#34;&gt;ML&lt;/a&gt; in the 1970s and &lt;a href=&#34;http://en.wikipedia.org/wiki/Haskell_(programming_language)&#34;&gt;Haskell&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Erlang_(programming_language)&#34;&gt;Erlang&lt;/a&gt; in the 1980s.&lt;/p&gt;

&lt;p&gt;But better late than never.&lt;/p&gt;

&lt;h3 id=&#34;my-example-apache-http-components:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;My example: Apache HTTP Components&lt;/h3&gt;

&lt;p&gt;I have observed that APIs in such languages as Java and Ruby have more and more gravitated toward the use of immutable objects. A very good pattern I have seen is to use a builder (which has internal mutable state) to finally build an instance of an immutable object. Just recently, I was using the &lt;a href=&#34;http://hc.apache.org/httpcomponents-client-ga/&#34;&gt;Java Apache HTTP Components library&lt;/a&gt; and moved from the stable version (4.2.5) to the &lt;a href=&#34;http://hc.apache.org/httpcomponents-client-dev/&#34;&gt;beta version&lt;/a&gt; (4.3-beta2) (because of bugs in the stable version), and happened to notice that a whole slew of methods I was calling were deprecated in favor of a &lt;a href=&#34;http://www.apache.org/dist/httpcomponents/httpclient/RELEASE_NOTES.txt&#34;&gt;new builder-based API&lt;/a&gt;. Excerpts from the release notes of the beta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Java 7 try-with-resources&lt;/li&gt;
&lt;li&gt;Added fluent Builder classes&lt;/li&gt;
&lt;li&gt;Deprecation of preference and configuration API based on HttpParams interface in favor of constructor injection and plain configuration objects&lt;/li&gt;
&lt;li&gt;Reliance on object immutability instead of access synchronization for thread safety&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was very good to see that decades-old lessons about good design are finally making it into important Java libraries!&lt;/p&gt;

&lt;h2 id=&#34;types:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Types&lt;/h2&gt;

&lt;p&gt;A lot of what Eric talked about had to do with types: type safety as well as the ramifications of types when evolving an API.&lt;/p&gt;

&lt;h3 id=&#34;null:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Several of his examples (see his slides) involved the problem of &lt;code&gt;null&lt;/code&gt;, &lt;a href=&#34;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&#34;&gt;Hoare&amp;rsquo;s billion-dollar mistake&lt;/a&gt;, which I gave a little &lt;a href=&#34;http://franklinchen.com/blog/2012/09/06/my-pittsburgh-ruby-talk-nil/&#34;&gt;talk about last year&lt;/a&gt;. Basically, &lt;code&gt;null&lt;/code&gt; is a hole in a type system, and as a result, in Java one has to compensate by documenting in comments (but not having type checked) when and where something could be null or could not be, so that API clients know what to pass into methods and what to expect in return.&lt;/p&gt;

&lt;p&gt;Java is not hopelessly behind: Java 8 has the &lt;a href=&#34;http://download.java.net/jdk8/docs/api/java/util/Optional.html&#34;&gt;&lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; class&lt;/a&gt; to help programmers transition away from using &lt;code&gt;null&lt;/code&gt;. C++14 has a &lt;a href=&#34;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3527.html&#34;&gt;proposal to add to the standard library &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Admittedly, these are late patches that do not actually prevent continued use of &lt;code&gt;null&lt;/code&gt; (ideally, a programming language should simply not even have it; languages such as ML and Haskell from the 1970s and 1980s happily did without this terrible construct), but these are definitely steps forward. New languages being designed and implemented today from a clean slate have no excuse to perpetuate this billion-dollar error: for example, &lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; does not have &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;strings:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Strings&lt;/h3&gt;

&lt;p&gt;Eric noted that use a string is throwing away type safety.&lt;/p&gt;

&lt;p&gt;I think the use of strings everywhere is a disaster second to that of using &lt;code&gt;null&lt;/code&gt;. The problem is that strings have to be parsed for information. And many people do not actually correctly do such parsing and validation, hence the prevalence of &lt;a href=&#34;http://en.wikipedia.org/wiki/SQL_injection&#34;&gt;injection attacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even apart from security, the manipulation of strings that actually are supposed to have an intended structure is a major cause of late-caught runtime errors, and of programmer confusion. For example, &lt;a href=&#34;http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding&#34;&gt;this report on URLs&lt;/a&gt; has been recirculating lately, because of errors in both libraries and client code when dealing with URLs as strings rather than as strongly typed data.&lt;/p&gt;

&lt;h3 id=&#34;booleans:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Booleans&lt;/h3&gt;

&lt;p&gt;Eric observed that even booleans are an API design smell: booleans are a special case of an enumeration of possible states. What happens if you want to add a new state but your old API used booleans?&lt;/p&gt;

&lt;h3 id=&#34;exceptions:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;Eric recommended &lt;em&gt;unchecked&lt;/em&gt; over Java&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Exception_handling#Checked_exceptions&#34;&gt;&lt;em&gt;checked&lt;/em&gt; exceptions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, in my Java programming in the past decade, I&amp;rsquo;ve had to deal with the fact that Java made a big mistake by introducing checked exceptions in the first place; the ramifications were not thought out then. Note that C++11 has finally deprecated exception specifiers, and exceptions in ML have always been unchecked since the introduction in the 1970s, while Java ignored two decades of experience and went ahead and bolted on checked exceptions.&lt;/p&gt;

&lt;h4 id=&#34;not-strings:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Not strings!&lt;/h4&gt;

&lt;p&gt;Eric advised that all failure data should be included in a thrown exception. Too often, we see exception throwing code that just throws a string message. Then the catcher has to try to parse this message for important data (which may not even be present in the string). If you&amp;rsquo;re going to throw an exception, write a class and stash away important information, not a string message.&lt;/p&gt;

&lt;h2 id=&#34;a-short-note-on-primitive-obsession:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;A short note on primitive obsession&lt;/h2&gt;

&lt;p&gt;My friend Adam who also attended the PittJUG meeting noted that what we&amp;rsquo;re basically talking about is &lt;a href=&#34;http://c2.com/cgi/wiki?PrimitiveObsession&#34;&gt;primitive obsession&lt;/a&gt;. The larger lesson here is that when designing robust, clear, and safe APIs, using primitives is often a mistake. Everything in the problem domain should really be modeled as its own type, not as a primitive.&lt;/p&gt;

&lt;h2 id=&#34;evolution-of-an-api:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Evolution of an API&lt;/h2&gt;

&lt;p&gt;The trickiest thing to get right is making an API so that it can evolve in the future without breaking backwards &lt;em&gt;compatibility&lt;/em&gt;. This compatibility can be of different forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;behavioral&lt;/li&gt;
&lt;li&gt;binary&lt;/li&gt;
&lt;li&gt;source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eric talked a lot about weakening or strengthening contracts. There is a lot of hairy stuff involved, including knowledge of Java compiler internals. I think this is a space where more research is needed for the future in order to get the formal semantics of API evolution done right.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/japi-checker/&#34;&gt;japi-checker&lt;/a&gt; was mentioned as one tool that one can use for Java.&lt;/p&gt;

&lt;h2 id=&#34;resources:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;In the context of software development in Java, it is impossible to avoid mentioning &lt;a href=&#34;http://en.wikipedia.org/wiki/Joshua_Bloch&#34;&gt;Joshua Bloch&lt;/a&gt;&amp;rsquo;s early book (subsequently revised for a second edition), &amp;ldquo;Effective Java&amp;rdquo;. It is a daunting book, over 300 pages long, but it is an indispensable reference for anyone caring about good programming in Java. Eric called it the &amp;ldquo;gold standard&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Check out his links to other resources on his slides.&lt;/p&gt;

&lt;h2 id=&#34;package-design:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Package design&lt;/h2&gt;

&lt;p&gt;A question came up about Eric&amp;rsquo;s recommendation of using package-private visibility and his observation that a lot of people don&amp;rsquo;t know about package-private, and don&amp;rsquo;t design packages.&lt;/p&gt;

&lt;h3 id=&#34;modules:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Modules&lt;/h3&gt;

&lt;p&gt;My observation is that people don&amp;rsquo;t design packages because they&amp;rsquo;re not actually modules. &lt;em&gt;Java was invented without a module system&lt;/em&gt;, although Java 8 originally was slated to finally include a module system in the form of Jigsaw, which was, however, &lt;a href=&#34;http://www.infoworld.com/d/application-development/project-jigsaw-delayed-until-java-9-198007&#34;&gt;delayed to Java 9&lt;/a&gt;. Meanwhile, there is &lt;a href=&#34;http://en.wikipedia.org/wiki/OSGi&#34;&gt;OSGi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t like sounding like a broken record, but &lt;a href=&#34;http://en.wikipedia.org/wiki/Standard_ML&#34;&gt;Standard ML came with a module system in the 1980s&lt;/a&gt;, and there has been further work in the area of module systems, including first-class module systems that go beyond stratified module systems. The reality is that Java was born in the 1990s an &amp;ldquo;old&amp;rdquo; language, with no positive technical innovations, that feels more like a language from the 1960s.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Eric Stein gave an excellent talk about API design, both from the broadest perspective, focused on human beings and clients, and down and dirty with Java language features to avoid or use carefully.&lt;/p&gt;

&lt;h2 id=&#34;addendum-my-involvement-with-java:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;Addendum: my involvement with Java&lt;/h2&gt;

&lt;p&gt;I had a chance to review some of my feelings I have had about programming in Java myself. I&amp;rsquo;ve been a member of PittJUG for well over a decade now. I first signed up on the PittJUG mailing list in June 1999. I have not always been a regular attendee of the meetings: after some initial years of interest, I stopped attending for some years, and became regular again in 2009. So I&amp;rsquo;ve been around Java since it was a very young language, and all the while knowing of all the problems with the language. So why did I chose it as my main programming language a decade ago, and why have I stuck with it for so long, until last last year, when &lt;a href=&#34;http://franklinchen.com/blog/2013/01/11/2013-is-my-year-of-scala/&#34;&gt;I decided to write no &lt;em&gt;new&lt;/em&gt; Java code, and move on to Scala&lt;/a&gt;? I will explain my decision-making in a forthcoming blog post.&lt;/p&gt;

&lt;h2 id=&#34;update-of-2013-07-05:f22ea5ebd3bdd3bf49b63c00fa7f17d0&#34;&gt;(Update of 2013-07-05)&lt;/h2&gt;

&lt;p&gt;An interesting &lt;a href=&#34;http://www.infoq.com/presentations/enterprise-api&#34;&gt;presentation on APIs in the enterprise&lt;/a&gt; came my way.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>