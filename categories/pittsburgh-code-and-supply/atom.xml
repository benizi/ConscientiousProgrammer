<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pittsburgh Code And Supply on The Conscientious Programmer</title>
    <link>http://ConscientiousProgrammer.com/categories/pittsburgh-code-and-supply/</link>
    <description>Recent content in Pittsburgh Code And Supply on The Conscientious Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Dec 2015 17:05:23 -0500</lastBuildDate>
    <atom:link href="http://ConscientiousProgrammer.com/categories/pittsburgh-code-and-supply/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>24 days of Hackage, 2015: day 4: wreq: Web client programming; with notes on lens and operator syntax</title>
      <link>http://conscientiousprogrammer.com/blog/2015/12/04/24-days-of-hackage-2015-day-4-wreq-web-client-programming-with-notes-on-lens-and-operator-syntax/</link>
      <pubDate>Fri, 04 Dec 2015 17:05:23 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/12/04/24-days-of-hackage-2015-day-4-wreq-web-client-programming-with-notes-on-lens-and-operator-syntax/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents-for-the-whole-series:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Table of contents for the whole series&lt;/h2&gt;

&lt;p&gt;A table of contents is at the top of the article for &lt;a href=&#34;../../blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;day 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;day-4:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Day 4&lt;/h2&gt;

&lt;p&gt;In the late 1990s, I eagerly bought the book
&lt;a href=&#34;http://www.oreilly.com/openbook/webclient/&#34;&gt;&amp;ldquo;Web Client Programming with Perl&amp;rdquo;&lt;/a&gt;
and used the &lt;a href=&#34;http://search.cpan.org/dist/libwww-perl/lib/LWP.pm&#34;&gt;LWP&lt;/a&gt;
library to scrape the Web in automated fashion. I continued doing that
into the 2000s. I am happy that nowadays, I can just use Haskell to do
this kind of programming, in a succinct way also.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s topic is &lt;a href=&#34;http://www.serpentine.com/wreq/&#34;&gt;&lt;code&gt;wreq&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;http://www.serpentine.com/blog/&#34;&gt;Bryan O&amp;rsquo;Sullivan&lt;/a&gt;&amp;rsquo;s high-level
library for doing Web client programming designed specifically for
usability.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wreq&lt;/code&gt; makes use of the
&lt;a href=&#34;https://hackage.haskell.org/package/aeson&#34;&gt;&lt;code&gt;aeson&lt;/code&gt;&lt;/a&gt; ecosystem for JSON
and &lt;a href=&#34;https://hackage.haskell.org/package/lens&#34;&gt;&lt;code&gt;lens&lt;/code&gt;&lt;/a&gt; and ecosystem,
including
&lt;a href=&#34;https://hackage.haskell.org/package/lens-aeson&#34;&gt;&lt;code&gt;lens-aeson&lt;/code&gt;&lt;/a&gt;, so you
may want to check out Ollie&amp;rsquo;s 2012 Days of Hackage posts on
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-07-24-days-of-hackage-aeson.html&#34;&gt;aeson&lt;/a&gt;
and &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-09-24-days-of-hackage-lens.html&#34;&gt;lens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;wreq&lt;/code&gt; already has an extensive
&lt;a href=&#34;http://www.serpentine.com/wreq/&#34;&gt;tutorial and reference documentation&lt;/a&gt;,
I&amp;rsquo;m not going to repeat its explanations. Instead, I&amp;rsquo;m going to give an
example of use that should be simple enough to be understood from
context, then discuss the issue of using operator syntax in Haskell.&lt;/p&gt;

&lt;h2 id=&#34;the-task:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;The task&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m a member of many groups on &lt;a href=&#34;http://www.meetup.com/&#34;&gt;Meetup&lt;/a&gt;. It&amp;rsquo;s
often useful for me to get information using the official
&lt;a href=&#34;http://www.meetup.com/meetup_api/&#34;&gt;Meetup API&lt;/a&gt; rather than go around
clicking on a Web site on or a mobile app. Why do by hand what I can
do much more efficiently and correctly with code?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a very simplified example of something I might want to do with
Meetup. I&amp;rsquo;ve been active in the
&lt;a href=&#34;http://www.codeandsupply.co/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; community,
which has a
&lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/&#34;&gt;Meetup site&lt;/a&gt; with a
packed calendar of events (it&amp;rsquo;s on hiatus now in December for the
holidays, but is otherwise very active). Maybe I want to find out what
upcoming events they are, and search for events of interest according
to some criteria. For our toy example here, let&amp;rsquo;s say I want to find
the ten upcoming events and get their names and venue names, and make
sure there&amp;rsquo;s at least one event that has a name and venue name already
set up (sometimes, an event is proposed but no venue has been found
yet).&lt;/p&gt;

&lt;h2 id=&#34;a-test:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;A test&lt;/h2&gt;

&lt;p&gt;Yesterday,
&lt;a href=&#34;../../blog/2015/12/03/24-days-of-hackage-2015-day-3-hspec-the-importance-of-testing/&#34;&gt;day 3&lt;/a&gt;
of this article series, I mentioned liking using HSpec, so let&amp;rsquo;s use
HSpec.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;WreqExample&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;eventName&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;venueName&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;getMeetupEventInfos&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Test.Hspec&lt;/span&gt; ( &lt;span style=&#34;color: #B00040&#34;&gt;Spec&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;hspec&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;describe&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;it&lt;/span&gt;
                  , &lt;span style=&#34;color: #0000FF&#34;&gt;shouldSatisfy&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;shouldNotSatisfy&lt;/span&gt;
                  )
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;qualified&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data.Text&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; Text
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are using the &lt;a href=&#34;https://hackage.haskell.org/package/text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt;
packed Unicode string type, because that&amp;rsquo;s what &lt;code&gt;wreq&lt;/code&gt;
uses. &lt;code&gt;OverloadedStrings&lt;/code&gt; is a convenient GHC extension that allows
string literals in code to be treated as &lt;code&gt;Text&lt;/code&gt; values rather than
&lt;code&gt;String&lt;/code&gt;. Ollie discusses this extension in his &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2014-12-17-overloaded-strings.html&#34;&gt;2014 Days of GHC Extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, since I&amp;rsquo;m operating in test-driven development style, I wrote
this test first, before writing the &lt;code&gt;WreqExample&lt;/code&gt; module: I only wrote
the imports for what I need for the test.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;spec&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Spec&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;spec&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  describe &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;wreq&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
    it &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;there are named, located Pittsburgh Code and Supply events coming up&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- Warning! This is a stateful test going out to the Web.&lt;/span&gt;
      events &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt; getMeetupEventInfos pittsburghCodeAndSupplyId
      events `shouldNotSatisfy` null
      events `shouldSatisfy` any
        (&lt;span style=&#34;color: #0000FF&#34;&gt;\&lt;/span&gt;event &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; (not &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;null &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; eventName) event
                   &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (not &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;null &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; venueName) event)

&lt;span style=&#34;color: #0000FF&#34;&gt;pittsburghCodeAndSupplyId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;pittsburghCodeAndSupplyId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;13452572&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;module-signatures:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Module signatures&lt;/h2&gt;

&lt;p&gt;If Haskell had
&lt;a href=&#34;http://jozefg.bitbucket.org/posts/2015-01-08-modules.html&#34;&gt;module signatures, like Standard ML and OCaml do&lt;/a&gt;,
I would write an explicit module signature for the module I intend to
implement that will conform to that signature, but Haskell doesn&amp;rsquo;t, so
the best we can do is operate in &amp;ldquo;duck typing&amp;rdquo; manner at the module
level, relying implicitly on compilation to fail on import of a
conforming module implementation rather than on matching against an
explicit signature without the need for an implementation.&lt;/p&gt;

&lt;p&gt;Here are the types we need (in a pseudo-syntax as though Haskell had
module signatures):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- abstract&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- abstract&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- abstract type accessors&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;eventName&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;venueName&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;

&lt;span style=&#34;color: #0000FF&#34;&gt;getMeetupEventInfos&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;IO&lt;/span&gt; [&lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;implementation:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Implementation&lt;/h2&gt;

&lt;h3 id=&#34;imports:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Imports&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Network.Wreq&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Options&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;defaults&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;param&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;getWith&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;asValue&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;responseBody&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data.Text&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data.Aeson&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Value&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Control.Lens&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;view&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;toListOf&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data.Aeson.Lens&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;_Array&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;_String&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;types:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Types&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | Information that we care about from a Meetup event.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt; { eventName &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;
            , venueName &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;
            }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;deriving&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Show&lt;/span&gt;)

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | A valid Meetup group ID.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;the-web-client-part:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;The Web client part&lt;/h3&gt;

&lt;p&gt;Since we&amp;rsquo;re only making one request, and are not doing any error
handling, but letting &lt;code&gt;wreq&lt;/code&gt; throw exceptions instead, the Web client
part is very brief. The Meetup API allows returning information as
JSON.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;meetupEventsUrl&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;meetupEventsUrl&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;https://api.meetup.com/2/events&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We perform a &lt;code&gt;GET&lt;/code&gt; with query parameters. &lt;code&gt;wreq&lt;/code&gt; uses lens as its
domain-specific language for creating options for &lt;code&gt;GET&lt;/code&gt;, so let&amp;rsquo;s
create a &lt;code&gt;wreq&lt;/code&gt; &lt;code&gt;Options&lt;/code&gt; value, by setting the parameters one after
another using a builder pattern starting with the &lt;code&gt;wreq&lt;/code&gt; &lt;code&gt;defaults&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptions&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt;
              &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Options&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptions&lt;/span&gt; groupId &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;) [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;] (
    set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;order&amp;quot;&lt;/span&gt;) [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;] (
      set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;) [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;upcoming&amp;quot;&lt;/span&gt;] (
        set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;group_id&amp;quot;&lt;/span&gt;) [groupId] (
          set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;format&amp;quot;&lt;/span&gt;) [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;] defaults))))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We begin by going out to the Web to get back a response, which is a
&lt;a href=&#34;https://hackage.haskell.org/package/bytestring-0.10.6.0/docs/Data-ByteString-Lazy.html&#34;&gt;lazy &lt;code&gt;ByteString&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;getMeetupEventInfos&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;IO&lt;/span&gt; [&lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt;]
&lt;span style=&#34;color: #0000FF&#34;&gt;getMeetupEventInfos&lt;/span&gt; groupId &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
  response &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt; getWith (eventsOptions groupId) meetupEventsUrl
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;the-json-part:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;The JSON part&lt;/h3&gt;

&lt;p&gt;Then we parse the lazy &lt;code&gt;ByteString&lt;/code&gt; response, including the headers
and the body, into an untyped JSON object, an &lt;code&gt;aeson&lt;/code&gt;
&lt;a href=&#34;https://hackage.haskell.org/package/aeson-0.10.0.0/docs/Data-Aeson.html#t:Value&#34;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/a&gt;:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  jsonResponse &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt; asValue response
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;More precisely, &lt;a href=&#34;https://hackage.haskell.org/package/aeson-0.10.0.0/docs/src/Data-Aeson-Types-Internal.html#Value&#34;&gt;&lt;code&gt;Value&lt;/code&gt; is unityped&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;HashMap&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Value&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Array&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Value&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Object&lt;/span&gt;
           &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Array&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Array&lt;/span&gt;
           &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;
           &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Number&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Scientific&lt;/span&gt;
           &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Bool&lt;/span&gt;
           &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;the-lens-part:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;The lens part&lt;/h3&gt;

&lt;p&gt;It was annoying figuring out from the official
Meetup API site what fields I needed from the response and what their
types were supposed to be. In practice I just saved off JSON from a
representative query and looked at some events to see what I wanted. I
was told where to find the
&lt;a href=&#34;meetup.json&#34;&gt;automatically generated documentation of all the API methods&lt;/a&gt;
but it was not ideal. A later Day of Hackage will discuss what I did
about this problem.&lt;/p&gt;

&lt;p&gt;We extract the list of events, using a traversal to get the whole
list, which is encoded as a JSON array in the top level JSON object&amp;rsquo;s
&lt;code&gt;results&lt;/code&gt; field:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;let&lt;/span&gt; events &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; toListOf (responseBody
                         &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; key &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;
                         &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; _Array &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; traverse
                        ) jsonResponse
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here we use &lt;code&gt;toListOf&lt;/code&gt; from lens with a traversal and a JSON object to
pull out everything from that traversal.&lt;/p&gt;

&lt;p&gt;Finally, since we only want, for each event, its name and
its venue&amp;rsquo;s name (the venue&amp;rsquo;s name is actually a field in a venue
object):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  return (map jsonToEventInfo events)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We again use lens, at the level of an individual event object, to
extract what we want from it:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | Extract our typed data model from an untyped JSON object.&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;jsonToEventInfo&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;jsonToEventInfo&lt;/span&gt; json &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;EventInfo&lt;/span&gt; { eventName &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; view (key &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; _String) json
            , venueName &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; view (key &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;venue&amp;quot;&lt;/span&gt;
                                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; key &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; _String) json
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here we use the &lt;code&gt;view&lt;/code&gt; function of &lt;code&gt;lens&lt;/code&gt;, to apply a lens to the JSON
object to pull a field out of it.&lt;/p&gt;

&lt;p&gt;And we&amp;rsquo;re done! We&amp;rsquo;ve written a script that looks pretty much like
what you&amp;rsquo;d write in Perl or Python. It will also &amp;ldquo;fail&amp;rdquo; in similar
ways, because we&amp;rsquo;re basically not using any types at all; even the
final result just has strings, which may or may not be empty, whatever
that&amp;rsquo;s supposed to mean. For example, if you try to find a field by a
string key that doesn&amp;rsquo;t exist, the particular code here will just
silently give back an empty string. Can we do better? Yes, there are
various ways to do better. Stay tuned for a later Day of Hackage.&lt;/p&gt;

&lt;h2 id=&#34;lens-operator-syntax:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Lens operator syntax&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve already used &lt;code&gt;wreq&lt;/code&gt; or &lt;code&gt;lens&lt;/code&gt;, you may have noticed
something strange above: I didn&amp;rsquo;t use any &lt;code&gt;lens&lt;/code&gt; operator syntax. This
was deliberate. Although the &lt;code&gt;wreq&lt;/code&gt; tutorial gives a
&lt;a href=&#34;http://www.serpentine.com/wreq/tutorial.html#a-quick-lens-backgrounder&#34;&gt;little bit of background on &lt;code&gt;lens&lt;/code&gt;&lt;/a&gt;,
the reality is that when some friends who were not experienced lensers
or Haskellers asked me how I do Web client programming in Haskell, and
I pointed to &lt;code&gt;wreq&lt;/code&gt; as being pretty cool, they got immediately stuck
on the lens stuff. Looking back at the tutorial, I do see that it
jumps straight into operator soup. This is unfortunate. You can
immediately use libraries like &lt;code&gt;wreq&lt;/code&gt; without having the lens
operators memorized already. You have to understand some facts (such
as the use of the function composition operator to compose lenses) and
have an idea of how the types work out, but one thing you don&amp;rsquo;t need
is the funny operators. I think it&amp;rsquo;s best to understand how to do
things without operators before starting to use them as a convenient
shortcut.&lt;/p&gt;

&lt;p&gt;For example, an idiomatic way to set the options object, as presented
in the &amp;ldquo;whirlwind tour&amp;rdquo; section of the &lt;code&gt;wreq&lt;/code&gt; tutorial, is:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Control.Lens&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;), (&lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt;))

&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptions&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt;
              &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Options&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptions&lt;/span&gt; groupId &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; defaults
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;format&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;group_id&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [groupId]
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;status&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;upcoming&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;order&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;page&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t like the idea of newcomers to this library just copying and
pasting stuff without understanding what it does, or getting the
impression that these operators are somehow built into the Haskell
language or required for using the library. People really do get these
impressions.&lt;/p&gt;

&lt;p&gt;I happen to like the reverse function operator &lt;code&gt;&amp;amp;&lt;/code&gt; a lot, although
it&amp;rsquo;s not as suggestive as the exact same reverse function operator in
many other languages (such as F#, OCaml, Elm, Elixir) in the form of a pipe
instead
&lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/3.0.0/Basics#|%3E&#34;&gt;&lt;code&gt;|&amp;gt;&lt;/code&gt;&lt;/a&gt;,
so I feel OK about using it.&lt;/p&gt;

&lt;p&gt;But the &lt;code&gt;.~&lt;/code&gt; is I think not very suggestive to newcomers to
&lt;code&gt;lens&lt;/code&gt;. Is &lt;code&gt;set lens newValue object&lt;/code&gt; so much worse to write or read than
&lt;code&gt;object &amp;amp; lens .~ newValue&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-12-12-thinking-compositionally:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;(Update of 2014-12-12) Thinking compositionally&lt;/h2&gt;

&lt;p&gt;One thing that is unfortunately lost if you use pipeline application
operators such as &lt;code&gt;&amp;amp;&lt;/code&gt; is the &lt;em&gt;compositionality&lt;/em&gt; that underlies the
power of lenses. So here is a refactoring of &lt;code&gt;eventsOptions&lt;/code&gt; that
shows how to best think of what we are doing, which is creating a
&amp;ldquo;builder&amp;rdquo; and applying it:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptionsRefactored&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Options&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptionsRefactored&lt;/span&gt; groupId &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; builder defaults
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;where&lt;/span&gt; builder &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; eventsOptionsBuilder groupId

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | Recall: type is sugar for GroupId -&amp;gt; (Options -&amp;gt; Options)&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptionsBuilder&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Options&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Options&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptionsBuilder&lt;/span&gt; groupId &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;) [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;order&amp;quot;&lt;/span&gt;) [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;) [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;upcoming&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;group_id&amp;quot;&lt;/span&gt;) [groupId]
  &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; set (param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;format&amp;quot;&lt;/span&gt;) [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Note the separation of concerns here: instead of thinking of building
an &lt;code&gt;Options&lt;/code&gt; object as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;starting with a default&lt;/li&gt;
&lt;li&gt;successively applying an extra setting to it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;we think of&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creating an options builder through composition&lt;/li&gt;
&lt;li&gt;applying the builder to the default&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Partial application in functional programming is used here to
implement the builder pattern: &lt;code&gt;eventsOptionsBuilder&lt;/code&gt; takes one
argument, and returns an &lt;code&gt;Options&lt;/code&gt; transformer of type &lt;code&gt;Options -&amp;gt;
Options&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;code-golf:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Code golf?&lt;/h2&gt;

&lt;p&gt;To illustrate both the up sides and down sides of using operators (but
in this case mostly down sides, I think), here is a code golf version
of the entire code:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Network.Wreq&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Options&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;defaults&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;param&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;getWith&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;asValue&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;responseBody&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data.Text&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Control.Lens&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;), (&lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt;), (&lt;span style=&#34;color: #666666&#34;&gt;^.&lt;/span&gt;), (&lt;span style=&#34;color: #666666&#34;&gt;^..&lt;/span&gt;))
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data.Aeson.Lens&lt;/span&gt; (&lt;span style=&#34;color: #0000FF&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;_Array&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;_String&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Control.Arrow&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;), (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt;))

&lt;span style=&#34;color: #0000FF&#34;&gt;meetupEventsUrl&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;meetupEventsUrl&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;https://api.meetup.com/2/events&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | A valid Meetup group ID.&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | For searching for events in a Meetup group.&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptions&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt;
              &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Options&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;eventsOptions&lt;/span&gt; groupId &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt; defaults
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;format&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;group_id&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [groupId]
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;status&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;upcoming&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;order&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;]
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; param &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;page&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.~&lt;/span&gt; [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;]

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;-- | Code golf version. Don&amp;#39;t do this?&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;getMeetupNameAndVenues&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;GroupId&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;IO&lt;/span&gt; [(&lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;Text&lt;/span&gt;)]
&lt;span style=&#34;color: #0000FF&#34;&gt;getMeetupNameAndVenues&lt;/span&gt; groupId &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;=&lt;/span&gt;
  getWith (eventsOptions groupId) meetupEventsUrl
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; asValue
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;^..&lt;/span&gt; responseBody
        &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; key &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; _Array &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; traverse)
       &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; map ((&lt;span style=&#34;color: #666666&#34;&gt;^.&lt;/span&gt; key &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; _String)
                 &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;^.&lt;/span&gt; key &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;venue&amp;quot;&lt;/span&gt;
                      &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; key &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt; _String)
                 )
       &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; return
      )
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In a way, this looks cool because the piping left to right reads well
and naturally, if you know all the operators and are happy with
operator sectioning syntax and point-free combinators. But when I
showed this to friends who are not so fluent in Haskell, they didn&amp;rsquo;t
like this. Also, note that I made concessions in order to arrange this
pipeline. I lost the comments, the intermediate named sub-computations
(very useful for finer-grained testing), and even my custom result
type (resorting to just tupling). I feel something has been lost by
writing in this style even though part of me secretly likes it.&lt;/p&gt;

&lt;h2 id=&#34;an-interview-with-bryan-o-sullivan:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;An interview with Bryan O&amp;rsquo;Sullivan&lt;/h2&gt;

&lt;p&gt;Recently (September 2015), &lt;a href=&#34;http://www.haskellcast.com/&#34;&gt;The Haskell Cast&lt;/a&gt; interviewed Bryan
O&amp;rsquo;Sullivan. I highly recommend listening to &lt;a href=&#34;http://www.haskellcast.com/episode/010-bryan-osullivan-on-performance-and-efficiency/&#34;&gt;the whole thing&lt;/a&gt;. He
had stories to tell about how he got into Haskell, how he ended up
writing all these libraries, and how he goes about designing them and
what his goals are when implementing them. Note that &lt;code&gt;aeson&lt;/code&gt; and
&lt;code&gt;text&lt;/code&gt;, which everyone uses, are his creations. Thank you, Bryan, for
all you&amp;rsquo;ve done for the Haskell community!&lt;/p&gt;

&lt;h2 id=&#34;lens-resources:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Lens resources&lt;/h2&gt;

&lt;p&gt;Gabriel Gonzalez wrote a
&lt;a href=&#34;https://hackage.haskell.org/package/lens-tutorial&#34;&gt;lens tutorial&lt;/a&gt;
that is useful. Thank you, Gabriel, for writing tutorials not only on
your own libraries, but for others as well!&lt;/p&gt;

&lt;h2 id=&#34;conclusion:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For day 4, I presented a tiny example of use of &lt;code&gt;wreq&lt;/code&gt; with &lt;code&gt;aeson&lt;/code&gt;
and &lt;code&gt;lens&lt;/code&gt; to perform a simple task of getting information from the
Web, and tried to make &lt;code&gt;wreq&lt;/code&gt; more accessible by not requiring use of
&lt;code&gt;lens&lt;/code&gt; operators up front.&lt;/p&gt;

&lt;h2 id=&#34;all-the-code:de6d56fd6945d7d59fdd3a84148a0b85&#34;&gt;All the code&lt;/h2&gt;

&lt;p&gt;All my code for my article series are at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Code and Supply: Making music with Overtone in Clojure; Conveying information through sound</title>
      <link>http://conscientiousprogrammer.com/blog/2014/10/07/pittsburgh-code-and-supply-making-music-with-overtone-in-clojure-conveying-information-through-sound/</link>
      <pubDate>Tue, 07 Oct 2014 21:10:18 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/10/07/pittsburgh-code-and-supply-making-music-with-overtone-in-clojure-conveying-information-through-sound/</guid>
      <description>

&lt;p&gt;I attended &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/202086812&#34;&gt;a fine meeting&lt;/a&gt; of &lt;a href=&#34;http://www.codeandsupply.co/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; dedicated to two related topics: &lt;em&gt;music&lt;/em&gt; and &lt;em&gt;sonification&lt;/em&gt;. I thought it was a great idea to have presentations on both topics in the same session, thereby giving a broad view of what can be done with &lt;em&gt;sound&lt;/em&gt; through computation.&lt;/p&gt;

&lt;h2 id=&#34;erik-swanson-on-overtone-in-clojure:eae2c8db91585e112346d13d734d08c3&#34;&gt;Erik Swanson on Overtone in Clojure&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://overtone.github.io/&#34;&gt;Overtone&lt;/a&gt; is a very interesting environment for programmable music written in Clojure that I&amp;rsquo;d heard of years ago but never gotten around to playing with, simply because my primary interest in music is &lt;a href=&#34;http://franklinchen.com/categories/music/&#34;&gt;playing music on traditional physical instruments with my own hands, the old-fashioned way&lt;/a&gt;. However, I am definitely open to the idea of doing interesting new things with computer aid; it just has not been a priority to explore.&lt;/p&gt;

&lt;p&gt;As preparation for the presentation (I don&amp;rsquo;t like feeling completely lost during live demos; I usually do!), I actually finally set up an Overtone project with Leiningen and walked through a tutorial that simply used the Clojure CIDER mode in Emacs to operate in a REPL. I didn&amp;rsquo;t do any real live-coding, however. I just wanted to get a taste.&lt;/p&gt;

&lt;p&gt;Erik Swanson gave a great presentation in which he described what he was doing as he live-coded some music with Emacs, incrementally creating instruments and generating pitches. Because of his presentation, I feel more comfortable about the prospect of really digging into Overtone if I ever want to.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a video of his presentation:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/w7ARayiKBrE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;keith-callenberg-https-twitter-com-keithcallenberg-on-conveying-information-through-sound:eae2c8db91585e112346d13d734d08c3&#34;&gt;&lt;a href=&#34;https://twitter.com/keithcallenberg&#34;&gt;Keith Callenberg&lt;/a&gt; on conveying information through sound&lt;/h2&gt;

&lt;p&gt;I learned a new word today: &lt;a href=&#34;http://en.wikipedia.org/wiki/Sonification&#34;&gt;&amp;ldquo;sonification&amp;rdquo;&lt;/a&gt;, the use of non-speech audio to convey information.&lt;/p&gt;

&lt;p&gt;I may have vaguely encountered sonification before, but never while fully attentive to it. That changed when Keith Callenberg, a computational scientist, gave a fine presentation in which he gave numerous striking examples of sonification. He made the important distinction between music and sonification: music is sound for an aesthetic purpose, but sonification is for information transfer.&lt;/p&gt;

&lt;p&gt;He convincingly showed why sonification is useful for data analysis, and also noted that our culture is strangely dominated by the &lt;em&gt;visual&lt;/em&gt;, so there remain many opportunities to use sound to understand data. (Also, sonification is used to help the visually impaired.)&lt;/p&gt;

&lt;p&gt;One local example he gave was a particulate monitoring study done at CMU.&lt;/p&gt;

&lt;h2 id=&#34;david-souther-on-web-audio-in-javascript:eae2c8db91585e112346d13d734d08c3&#34;&gt;David Souther on Web Audio in JavaScript&lt;/h2&gt;

&lt;p&gt;I thought we were done for the evening, but David Souther hopped up with an unscheduled lightning talk on using Web Audio in JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:eae2c8db91585e112346d13d734d08c3&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I enjoyed the presentations on music and sound, and got some ideas for stuff I might want to do myself. Another excellent session for Pittsburgh Code and Supply!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Code and Supply: Programming in journalism</title>
      <link>http://conscientiousprogrammer.com/blog/2014/07/17/pittsburgh-code-and-supply-programming-in-journalism/</link>
      <pubDate>Thu, 17 Jul 2014 21:21:19 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/07/17/pittsburgh-code-and-supply-programming-in-journalism/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://static.squarespace.com/static/538f3cc8e4b00f52172b5560/t/53a4ec76e4b0488fb14c5a29/1403317372203/sign.png?format=500w&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I finally attended my first ever &lt;a href=&#34;http://www.codeandsupply.co/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; meeting! The group, which posts its &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/&#34;&gt;events on Meetup&lt;/a&gt;, was created by local Pittsburgh software developer &lt;a href=&#34;https://twitter.com/justinxreese&#34;&gt;Justin Reese&lt;/a&gt; just a few months ago, in March 2014. His vision is to create a local community that, unlike conventional specific language/technology-based meetups, is much more universal and broad. If you haven&amp;rsquo;t do so already, read more about the &lt;a href=&#34;http://www.codeandsupply.co/about&#34;&gt;goals of Pittsburgh Code and Supply&lt;/a&gt;. I&amp;rsquo;m very excited about this new group!&lt;/p&gt;

&lt;p&gt;The Code and Supply meetup I just attended was about &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/186766512/&#34;&gt;&amp;ldquo;Programming in journalism&amp;rdquo;&lt;/a&gt;. This is a topic of huge importance, and I was excited to attend to hear more about what some local journalist/programmers are doing.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-about-sponsors:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;A bit about sponsors&lt;/h2&gt;

&lt;p&gt;Justin opened by briefly saying a few words about the goals of Pittsburgh Code and Supply. He then noted that this month, the group did not have sponsors, unfortunately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pittsburgh Code and Supply needs sponsors!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you like what Code and Supply is doing, please consider seeing if your employer would be willing to step up as a sponsor for the group.&lt;/p&gt;

&lt;h2 id=&#34;contribute:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Contribute!&lt;/h2&gt;

&lt;p&gt;Also, in any case, spread the word about the group.&lt;/p&gt;

&lt;p&gt;This is my first meeting, and next Monday, I am actually going to give my first presentation for the group, on &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/&#34;&gt;&amp;ldquo;Type-Directed TDD in Rust&amp;rdquo;&lt;/a&gt;. The group is always looking for people to speak about something or facilitate other formats of meetings, so &lt;a href=&#34;http://www.codeandsupply.co/speak/&#34;&gt;sign up&lt;/a&gt; if you have an idea! I personally have some ideas I&amp;rsquo;d like to propose for future meetings, such as discussions about technology-related topics such as philosophy, history, and education.&lt;/p&gt;

&lt;h2 id=&#34;amyjo-brown:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;AmyJo Brown&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/DaOxhNkHvvw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://amyjobrown.com/&#34;&gt;AmyJo Brown&lt;/a&gt;, an independent journalist, gave a great talk about the kind of work that she does, and why it is important. She gave an overview of how journalism has changed because of the availability of data and because of the complexity of the world, both of which lead to the necessity of telling stories differently, as evidenced by what &lt;a href=&#34;http://www.propublica.org/&#34;&gt;ProPublica&lt;/a&gt;, the &lt;a href=&#34;http://www.nytimes.com/&#34;&gt;New York Times&lt;/a&gt;, and the &lt;a href=&#34;http://www.latimes.com/&#34;&gt;Los Angeles Times&lt;/a&gt; have been doing.&lt;/p&gt;

&lt;p&gt;Her own work involves tracking political donations (&amp;ldquo;follow the money&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;She gave examples of software tools she uses to get data, clean it, analyze it, and archive the whole process. On the programming end, she programs in Python, for example (Django for Web development), and uses &lt;a href=&#34;http://www.documentcloud.org/&#34;&gt;DocumentCloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;She talked about many things to keep in mind while doing this kind of data journalism. First of all, you have to know the limitations of the data you&amp;rsquo;re getting. She has to deal with handwritten documents, and data in different formats. Data that is clearly incomplete or entered wrong (whether accidentally or maliciously). It is necessary to know the domain, know the context in which data was collected or required or submitted, to not fall into the trap of just blindly treating data as a record of the full truth and just get into programmatically processing it. There&amp;rsquo;s a lot that involves human judgment calls. And this is why it is so important to save all the original information and document each step of data &amp;ldquo;cleaning&amp;rdquo; and interpretation.&lt;/p&gt;

&lt;p&gt;Near the end of her talk, AmyJo had her colleague Katrina speak a bit also. Katrina was not originally trained as a programmer, but was always interested in politics. She ended up getting into programming later.&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;m always very excited and impressed to hear of people with domain knowledge and passion who take up computer programming as a useful skill to apply to their domain. Sometimes I hear people saying &amp;ldquo;please don&amp;rsquo;t code&amp;rdquo;; I totally disagree with this sentiment and believe that &lt;a href=&#34;http://franklinchen.com/blog/2011/12/09/why-everyone-should-learn-computer-science/&#34;&gt;everyone can benefit from learning the fundamentals of computer science and programming&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;andrew-mcgill:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Andrew McGill&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/0iT9rhwRXVs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://www.andrewrmcgill.com/&#34;&gt;Andrew McGill&lt;/a&gt; bills himself as &amp;ldquo;your friendly neighborhood journalist&amp;rdquo;, and works for the &lt;a href=&#34;http://www.post-gazette.com/&#34;&gt;Pittsburgh Post-Gazette&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He started by talking about his interesting career path, which involved being into computers before college, but then going to college and then finding other interests and abandoning programming, and then only later taking it back up, in the service of journalism, to enable him to find data and tell stories through visualization.&lt;/p&gt;

&lt;p&gt;He showed us specific Web sites and articles he has created to provide better visualizations of data than what is available in raw form. For example, on the funny side, there is &lt;a href=&#34;http://newsinteractive.post-gazette.com/wheresbill/&#34;&gt;&amp;ldquo;Where&amp;rsquo;s Bill?&amp;rdquo;&lt;/a&gt;, which he created because he was not happy with the &amp;ldquo;official&amp;rdquo; boring text news feed of Mayor Bill Peduto&amp;rsquo;s calendar. He scraped the official site with PHP. He also created a Bill Peduto Twitter bot using Python.&lt;/p&gt;

&lt;p&gt;He also showed a D3-based visualization of &lt;a href=&#34;http://newsinteractive.post-gazette.com/plugged-wells/&#34;&gt;&amp;ldquo;The Mystery of the Plugged Wells&amp;rdquo;&lt;/a&gt;. Again, the point was to take already available data but to tell a story better with it than just giving raw tables or a purely text-based narrative.&lt;/p&gt;

&lt;p&gt;He showed some other projects, such as a visualization of school comparisons based on &lt;a href=&#34;http://en.wikipedia.org/wiki/Pennsylvania_System_of_School_Assessment&#34;&gt;PSSA&lt;/a&gt; data.&lt;/p&gt;

&lt;h2 id=&#34;questions-and-answers:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Questions and answers&lt;/h2&gt;

&lt;p&gt;There were quite a lot of questions posed to the presenters throughout the evening, on the technologies used, on work with graphic designers, on the process of obtaining data, and political implications of the work. Great discussions.&lt;/p&gt;

&lt;h2 id=&#34;technologies-used:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Technologies used&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s something resembling a summary of technologies mentioned that the presenters use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;DocumentCloud&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;OpenRefine&lt;/li&gt;
&lt;li&gt;D3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interesting-articles:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Interesting articles&lt;/h2&gt;

&lt;p&gt;Before the meetup, I posted to the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/186766512/&#34;&gt;event page&lt;/a&gt; a link to a provocative (perhaps too harsh and ranty) article warning about dangers in data journalism, &lt;a href=&#34;http://www.niemanlab.org/2014/07/alberto-cairo-data-journalism-needs-to-up-its-own-standards/&#34;&gt;by visualization expert Alberto Cairo&lt;/a&gt;. It got no response.&lt;/p&gt;

&lt;p&gt;Later, I also posted a link to a thoughtful examination of the question of &lt;a href=&#34;http://source.opennews.org/en-US/learning/true-facts-maybe/&#34;&gt;epistemology in data journalism&lt;/a&gt;. I totally recommend reading that article.&lt;/p&gt;

&lt;p&gt;AmyJo after the meetup posted some more links on the event page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jeremybowers/why-im-a-newsroom-coder-860d9d49f684&#34;&gt;&amp;ldquo;Why I&amp;rsquo;m a newsroom coder&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://source.opennews.org/en-US/articles/planting-next-crop-newsroom-coders/&#34;&gt;&amp;ldquo;Planting the next crop of newsroom coders&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nytimes.com/2014/07/17/opinion/the-fec-lags-on-campaign-finance-disclosures.html&#34;&gt;&amp;ldquo;Data delayed is democracy denied&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:5ceb897fd4e46960a338a7fd3d6cf4e6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I was very excited to attend my first Pittsburgh Code and Supply meetup, on the fascinating topic of programming in journalism. I felt I learned a lot about what is at stake and how programming is being used in journalism to better inform people of what is going on in the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Scala Meetup: Exploring type-directed, test-driven development using FizzBuzz (my practice talk)</title>
      <link>http://conscientiousprogrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed/</link>
      <pubDate>Thu, 15 May 2014 22:49:48 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/05/15/pittsburgh-scala-meetup-exploring-type-directed/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt; met, with me presenting a &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/146581402/&#34;&gt;practice talk&lt;/a&gt; for &amp;ldquo;Exploring type-directed, test-driven development using FizzBuzz&amp;rdquo;, which I am presenting at the upcoming local &lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh TechFest&lt;/a&gt; conference.&lt;/p&gt;

&lt;h2 id=&#34;presentation:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;Presentation&lt;/h2&gt;

&lt;p&gt;I have only recently completed the slides and code for my talk, and had not actually given the talk yet, so this was a practice talk that did not go so well, unfortunately.&lt;/p&gt;

&lt;p&gt;I spoke too quickly and had too much material to cover, and also got lost in some of my own slides. Oops. I think reaction to my talk was mixed. Some enjoyed it, while others seemed lost at places.&lt;/p&gt;

&lt;p&gt;After going home, I frankly felt that I had &lt;em&gt;failed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But I believe I can do much better. I have plenty of time to do a thorough revision before Pittsburgh TechFest in three weeks. I need to cut out material that is not needed for the core of what I am trying to achieve and make some things clearer (especially for the intended Pittsburgh TechFest audience, which I do not expect to even know Scala).&lt;/p&gt;

&lt;h2 id=&#34;supporting-material:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;Supporting material&lt;/h2&gt;

&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t recommend looking at them, but for historical purposes, here are slides of the presentation &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/meetup/doc/presentation.pdf&#34;&gt;as it was given in the first draft&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-05-16:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-05-16)&lt;/h2&gt;

&lt;p&gt;One day makes a difference in my confidence and determination! I noticed that the new &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/&#34;&gt;Pittsburgh Code and Supply&lt;/a&gt; group (which I have not yet attended) is soon having its inaugural &lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/181773312/&#34;&gt;soon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I decided to offer to do a version of my talk for Pittsburgh Code and Supply using Rust as the programming language (rather than Scala). I want to spread the news about how to effectively use a sufficiently typed programming language, whether it&amp;rsquo;s Scala or Rust or anything else sufficiently derived from the ML family of type systems.&lt;/p&gt;

&lt;p&gt;Justin will schedule it for some time in July. That should give me enough time, after Pittsburgh TechFest in early June, to learn enough Rust to convert my Scala code over properly!&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-06-07:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-06-07)&lt;/h2&gt;

&lt;p&gt;I much improved the presentation for Pittsburgh TechFest, which I &lt;a href=&#34;../../blog/2014/06/07/report-on-the-2014-pittsburgh-techfest-my-third-year/&#34;&gt;attended for the third year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recommend reading the &lt;a href=&#34;https://github.com/FranklinChen/talk-on-type-directed-tdd-using-fizzbuzz/blob/master/doc/article.pdf&#34;&gt;article version of the presentation&lt;/a&gt;, rather than the slides. This is the first time I&amp;rsquo;ve created both an article version of a presentation and slides for use during the live presentation. I will do this in the future as well. Slides are not meant to stand alone or even be read alone, but in case you really want to see them, they are here:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/37257104&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/FranklinChen/presentation-37257104&#34; title=&#34;Exploring type-directed, test-driven development: a case study using FizzBuzz&#34; target=&#34;_blank&#34;&gt;Exploring type-directed, test-driven development: a case study using FizzBuzz&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/FranklinChen&#34; target=&#34;_blank&#34;&gt;Franklin Chen&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-07-17:0ca97438327f3bcfe743d5a186e4af3e&#34;&gt;(Update of 2014-07-17)&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s crunch time. My Rust version of the talk, &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Code-Supply/events/183483622/&#34;&gt;&amp;ldquo;Type-Directed TDD in Rust&amp;rdquo;&lt;/a&gt; is coming next week.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>