<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl on The Conscientious Programmer</title>
    <link>http://ConscientiousProgrammer.com/categories/perl/</link>
    <description>Recent content in Perl on The Conscientious Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Dec 2015 07:55:59 -0500</lastBuildDate>
    <atom:link href="http://ConscientiousProgrammer.com/categories/perl/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>24 days of Hackage, 2015: day 3: HSpec; the importance of testing</title>
      <link>http://conscientiousprogrammer.com/blog/2015/12/03/24-days-of-hackage-2015-day-3-hspec-the-importance-of-testing/</link>
      <pubDate>Thu, 03 Dec 2015 07:55:59 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/12/03/24-days-of-hackage-2015-day-3-hspec-the-importance-of-testing/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents-for-the-whole-series:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Table of contents for the whole series&lt;/h2&gt;

&lt;p&gt;A table of contents is at the top of the article for &lt;a href=&#34;../../blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;day 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;day-3:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Day 3&lt;/h2&gt;

&lt;p&gt;I spent my formative years writing software before &amp;ldquo;testing framework&amp;rdquo;
was in my vocabulary, before
&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;&amp;ldquo;test-driven development&amp;rdquo;&lt;/a&gt;
was a thing. I shudder to think of those years, because now I&amp;rsquo;m a
believer in tests and even in test-driven development (TDD), according to my
interpretation of what that means (since everyone has a different
definition).&lt;/p&gt;

&lt;p&gt;There are a bunch of testing tools that have been available in the
Haskell ecosystem for some time. In fact, Ollie in his &amp;ldquo;24 Days of
Hackage&amp;rdquo; covered&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;&lt;code&gt;QuickCheck&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-08-24-days-of-hackage.html&#34;&gt;in 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/doctest&#34;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2013-12-18-doctest.html&#34;&gt;in 2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://documentup.com/feuerbach/tasty&#34;&gt;&lt;code&gt;tasty&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://ocharles.org.uk/blog/posts/2013-12-03-24-days-of-hackage-tasty.html&#34;&gt;in 2013&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and I heartily recommend looking those up.&lt;/p&gt;

&lt;p&gt;But today I&amp;rsquo;m going to show use of &lt;a href=&#34;http://hspec.github.io/&#34;&gt;&lt;code&gt;HSpec&lt;/code&gt;&lt;/a&gt;
(noting that a framework like &lt;code&gt;tasty&lt;/code&gt; or
&lt;a href=&#34;`https://batterseapower.github.io/test-framework/&#34;&gt;&lt;code&gt;test-framework&lt;/code&gt;&lt;/a&gt;
are a lot fancier).&lt;/p&gt;

&lt;h2 id=&#34;why-tests:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Why tests?&lt;/h2&gt;

&lt;p&gt;I first got into writing tests for two reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using languages like Perl, it was essentially impossible to
be productive without writing tests.&lt;/li&gt;
&lt;li&gt;Such languages spawned the tooling to ease the pain of writing,
running, and getting feedback from tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But after getting started, I didn&amp;rsquo;t look back, even when using other
languages such as Scala and Haskell. Today, no matter what language
I&amp;rsquo;m using, I expect there to be a decent testing framework I can
immediately start using. I even did the experiment of
&lt;a href=&#34;http://conscientiousprogrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing/&#34;&gt;learning a brand new language, Elixir, through writing tests&lt;/a&gt;. I
cannot take a language ecosystem seriously if there is not at least
some reasonable default standard testing framework that is part of it.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a myth (or joke) about using languages like Haskell that have
a decent type system: that you don&amp;rsquo;t need tests because you have
types. Hence the unfortunate phrase &amp;ldquo;tests versus types&amp;rdquo;. I completely
disagree with this. I want my types and I want my tests too: I want to
use every possible tool to help me design, verify, and troubleshoot my
code! At &lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh TechFest&lt;/a&gt; 2014, I gave a
talk
&lt;a href=&#34;http://www.slideshare.net/FranklinChen/presentation-37257104&#34;&gt;&amp;ldquo;Exploring type-directed, test-driven development&amp;rdquo;&lt;/a&gt;
giving my personal view of making the best use of both types and tests
as part of an iterative process of refining understanding and
expression of a solution for a task
(this was before the term &amp;ldquo;type-directed development&amp;rdquo; became the title
of a coming book on using Idris,
&lt;a href=&#34;https://www.manning.com/books/type-driven-development-with-idris&#34;&gt;&amp;ldquo;Type-directed development with Idris&amp;rdquo;&lt;/a&gt;,
whose completion I look forward to!).&lt;/p&gt;

&lt;p&gt;The general topic of how best to combine types and tests is well
outside the scope of this article, but I just want to make one claim:
the primary benefits of tests come from their role as &lt;em&gt;explicit
documentation of intent during a design process&lt;/em&gt;. Ideally, we prefer to
write down expressive types to fully encode intent, and dependently
typed languages such as Idris enable transforming a lot of what used
to be runtime tests into compile-time tests encoded as type checking,
and you can do a bunch of this with Haskell already if you work hard
enough (and
&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell&#34;&gt;Dependent Haskell&lt;/a&gt;
is in progress), but there is nothing wrong with writing tests today
that someday you might turn into types.&lt;/p&gt;

&lt;p&gt;By sheer coincidence, a
&lt;a href=&#34;https://blogs.janestreet.com/testing-with-expectations/&#34;&gt;new testing framework was just announced for OCaml&lt;/a&gt;. It&amp;rsquo;s
great that testing is being taken more seriously everywhere and by
everyone.&lt;/p&gt;

&lt;h2 id=&#34;why-hspec:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Why HSpec?&lt;/h2&gt;

&lt;p&gt;Why do I use HSpec, and not one of the fancier testing frameworks? I&amp;rsquo;m
not ruling out migrating to one of those in the future, but for now,
HSpec just feels really easy and comfortable to use, and is good
enough for me. I am so freaking lazy that I might not write tests if I
get intimidated by any possible sources of friction. And I&amp;rsquo;ll admit
that its &lt;a href=&#34;http://hspec.github.io/&#34;&gt;Web site&lt;/a&gt; is pretty good! Marketing
matters, I guess.&lt;/p&gt;

&lt;p&gt;Also, when I was using Ruby, I got accustomed to using
&lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt;, which of course was the inspiration for
HSpec.&lt;/p&gt;

&lt;h2 id=&#34;it-s-all-about-auto-discovery:740606311d3fcf0ba2f14607a358bd73&#34;&gt;It&amp;rsquo;s all about auto-discovery&lt;/h2&gt;

&lt;p&gt;Before even saying anything more about HSpec, I want to say that one
selling point of HSpec for me was auto-discovery. Check out the
&lt;a href=&#34;http://hspec.github.io/hspec-discover.html&#34;&gt;manual&lt;/a&gt; for full details.&lt;/p&gt;

&lt;p&gt;Auto-discovery means that given a simple boilerplate setup, you can
use &amp;ldquo;convention over configuration&amp;rdquo; and just give test module file
names matching &lt;code&gt;*Spec.hs&lt;/code&gt; and sticking them anywhere embedded inside
your &lt;code&gt;test/&lt;/code&gt; directory and they will all be picked up when you run
&lt;code&gt;stack test&lt;/code&gt;. This means being able to write test modules at will,
rename, delete, add, refactor them and not have to worry about
manually writing a boilerplate driver module that tediously imports
all the test modules and wires them up into a single project test
suite.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the setup I have for all my projects that use HSpec. I provide
it from my sample project template described on
&lt;a href=&#34;../../blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;day 1&lt;/a&gt;,
so you can now generate a starter project with HSpec all ready to go
by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack new my-new-project franklinchen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a &lt;code&gt;test/&lt;/code&gt; directory with a single file in it, the
auto-discovery file named &lt;code&gt;test/Spec.hs&lt;/code&gt;, which has a single line of
code, actually a comment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# OPTIONS_GHC -F -pgmF hspec-discover #-}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because when you have HSpec installed, a program
&lt;code&gt;hspec-discover&lt;/code&gt; also gets installed, and it&amp;rsquo;s called by GHC to do the
work of auto-discovery. Each test module should export &lt;code&gt;spec&lt;/code&gt;, because
that&amp;rsquo;s what the auto-discovery program will collect to call.&lt;/p&gt;

&lt;h2 id=&#34;writing-and-refactoring-tests:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Writing and refactoring tests&lt;/h2&gt;

&lt;p&gt;I didn&amp;rsquo;t mention it in
&lt;a href=&#34;../../blog/2015/12/02/24-days-of-hackage-2015-day-2-regexes-with-pcre-heavy-standalone-haskell-scripts-using-stack/&#34;&gt;yesterday&amp;rsquo;s post about using a regex&lt;/a&gt;
to solve a problem, but when I wrote out examples of strings that are
supposed to match a regex and examples of strings that are not
supposed to match it, I simply copied and pasted those examples from
tests I had written.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s walk through writing &lt;code&gt;PCREHeavyExampleSpec.hs&lt;/code&gt;, step by
step.&lt;/p&gt;

&lt;h3 id=&#34;initial-version-of-test-code:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Initial version of test code&lt;/h3&gt;

&lt;p&gt;First, I&amp;rsquo;ll present code that I never actually wrote initially, because I
skipped this step and immediately refactored it in my mind. But I
decided that to showcase Haskell&amp;rsquo;s strength as a language for
embedding a domain-specific language (DSL), I retroactively wrote the
most obvious code that shows how HSpec works without introducing
non-HSpec considerations. (The code is on branch &lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage/tree/boilerplated-hspec&#34;&gt;&lt;code&gt;boilerplated-hspec&lt;/code&gt;&lt;/a&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module PCREHeavyExampleSpec where

import PCREHeavyExample (mediaRegex)

import Test.Hspec (Spec, describe, it, shouldSatisfy)
import Text.Regex.PCRE.Heavy ((=~))

-- | Required for auto-discovery.
spec :: Spec
spec =
  describe &amp;quot;pcre-heavy&amp;quot; $ do
    describe &amp;quot;match&amp;quot; $ do
      it &amp;quot;has audio&amp;quot; $ do
        &amp;quot;@Media:\thas-audio,   audio&amp;quot; `shouldSatisfy` (=~ mediaRegex)
      it &amp;quot;has video&amp;quot; $ do
        &amp;quot;@Media:\thas-video,video&amp;quot; `shouldSatisfy` (=~ mediaRegex)
      it &amp;quot;has audio but missing&amp;quot; $ do
        &amp;quot;@Media:\thas-audio-but-missing, audio, missing&amp;quot; `shouldSatisfy` (=~ mediaRegex)
      it &amp;quot;has video but unlinked&amp;quot; $ do
        &amp;quot;@Media:\thas-video-but-unlinked  , video,      unlinked&amp;quot; `shouldSatisfy` (=~ mediaRegex)
    describe &amp;quot;no match&amp;quot; $ do
      it &amp;quot;no audio or video&amp;quot; $ do
        &amp;quot;@Media:\tno-audio-or-video&amp;quot; `shouldSatisfy` (not . (=~ mediaRegex))
      it &amp;quot;missing media field&amp;quot; $ do
        &amp;quot;@Media:\tmissing-media-field, unlinked&amp;quot; `shouldSatisfy` (not . (=~ mediaRegex))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main thing to understand is that for simplest use (without
fixtures, effects, etc.), a basic description-labeled spec item is
introduced with &lt;code&gt;it&lt;/code&gt;, and a labeled &lt;code&gt;describe&lt;/code&gt; can contain many of
those as well as sub-&lt;code&gt;describe&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Here, we have two sub-&lt;code&gt;Spec&lt;/code&gt;s, one for examples that &lt;em&gt;should match&lt;/em&gt; the regex
and one for examples that &lt;em&gt;should not&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note that we imported and used &lt;code&gt;mediaRegex&lt;/code&gt; from module
&lt;code&gt;PCREHeavyExample&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike in our example program yesterday, which used &lt;code&gt;scan&lt;/code&gt; from
&lt;code&gt;pcre-heavy&lt;/code&gt; to collect match bindings, we only care whether something
matched, so we use its &lt;code&gt;=~&lt;/code&gt; operator instead that takes an input
string and a regex, and returns a &lt;code&gt;Bool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The test code is concise enough, and the problem domain well
understood enough, that even if the syntax looks strange, I hope it is
clear &lt;em&gt;what&lt;/em&gt; is going on, even if not clear &lt;em&gt;how&lt;/em&gt; it&amp;rsquo;s being done.&lt;/p&gt;

&lt;h3 id=&#34;a-note-on-syntax-in-haskell-code:740606311d3fcf0ba2f14607a358bd73&#34;&gt;A note on syntax in Haskell code&lt;/h3&gt;

&lt;p&gt;Now is a good time to talk about the issue of syntax in Haskell code,
because I&amp;rsquo;m expecting that if you are reading this, you might not
already be familiar with HSpec, and I also cannot assume that you are
already a seasoned Haskell developer, because I&amp;rsquo;m writing this article
series not for advanced Haskellers but for those starting to dip into
the library ecosystem and even friends with limited experience with
Haskell.&lt;/p&gt;

&lt;p&gt;It is convenient to use
&lt;a href=&#34;https://wiki.haskell.org/Section_of_an_infix_operator&#34;&gt;operator sectioning syntax&lt;/a&gt;
above, but I could have written&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;text `shouldSatisfy` (\inputString -&amp;gt; inputString =~ mediaRegex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Furthermore, it is also convenient to use
&lt;a href=&#34;https://wiki.haskell.org/Infix_operator&#34;&gt;infix syntax for named functions&lt;/a&gt;
when sensible, but it is not required. I could have written in
bare-bones style&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;shouldSatisfy text (\inputString -&amp;gt; inputString =~ mediaRegex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the cute &lt;code&gt;(not . (=~ mediaRegex))&lt;/code&gt; can be written as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;\inputString -&amp;gt; not (inputString =~ mediaRegex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I mention these facts about syntax because I have often been told by
people looking into Haskell that it&amp;rsquo;s confusing because of all the
operator syntax. But you don&amp;rsquo;t have to use this syntax if you don&amp;rsquo;t
want to: much that looks weird in Haskell is not something about the
language itself, but just about optional syntax for which there is
&amp;ldquo;normal&amp;rdquo; syntax if you prefer that. It&amp;rsquo;s not just about operators, but
about a lot of other optional syntax as well; if you are still
relatively new to Haskell syntax, Gabriel Gonzalez wrote a nice
&amp;ldquo;syntax decoding&amp;rdquo; tutorial covering some of that
&lt;a href=&#34;http://www.haskellforall.com/2014/10/how-to-desugar-haskell-code.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But saying &amp;ldquo;you don&amp;rsquo;t have to write it&amp;rdquo; is no use if &amp;ldquo;everyone is doing
it&amp;rdquo; and you have to &lt;em&gt;read&lt;/em&gt; it anyway. So it is the community as a whole
that sets the tone for what gets written and what gets read.&lt;/p&gt;

&lt;p&gt;One reason I like HSpec is that it does not go overboard with
syntax. &lt;a href=&#34;https://hackage.haskell.org/package/HUnit&#34;&gt;HUnit&lt;/a&gt;, an older
testing framework, provided funny operators that really turned me off,
such as
&lt;a href=&#34;https://hackage.haskell.org/package/HUnit-1.3.0.0/docs/Test-HUnit-Base.html&#34;&gt;&lt;code&gt;~=?&lt;/code&gt;&lt;/a&gt;. I
like Gabriel Gonzalez&amp;rsquo;s article
&lt;a href=&#34;http://www.haskellforall.com/2015/09/how-to-make-your-haskell-code-more.html&#34;&gt;&amp;ldquo;How to make your Haskell code more readable to non-Haskell programmers&amp;rdquo;&lt;/a&gt;. It
applies also to making the code more readable to experienced Haskell
programmers!&lt;/p&gt;

&lt;p&gt;I admit to having been guilty of some practices he calls out. I have
mixed feelings about giving them all up, all the time. For example, it
seems idiomatic to use the infix function operator &lt;code&gt;$&lt;/code&gt; for embedded
DSLs such HSpec, rather than parenthesize everything. I&amp;rsquo;m curious what
you think. Would you prefer to read the following, which is what the
&lt;code&gt;$&lt;/code&gt; operator avoids requiring?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;spec :: Spec
spec =
  describe &amp;quot;pcre-heavy&amp;quot; (do
    describe &amp;quot;match&amp;quot; (do
      it &amp;quot;has audio&amp;quot; (do
        &amp;quot;@Media:\thas-audio,   audio&amp;quot; `shouldSatisfy` (=~ mediaRegex)
        )
      -- ...
      )
    describe &amp;quot;no match&amp;quot; (do
      -- ...
      )
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I personally think that languages with a &lt;code&gt;begin&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; kind of block
(such as Pascal, Ruby) instead of braces or parentheses have an
advantage because that is more readable (to me), and recent research
&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2534973&#34;&gt;&amp;ldquo;An empirical investigation into programming language syntax&amp;rdquo;&lt;/a&gt;
claims to have evidence of this.&lt;/p&gt;

&lt;p&gt;Meanwhile, we make do with the language we have, and learn and teach
its quirks and features. It&amp;rsquo;s regrettable that English and Chinese are
really hard languages to use too, but we make do if we want to be part
of the community in the United States or in China. It goes both ways:
if we want to be part of the community, we have to invest in
understanding how it operates, and if the community wants to grow, it
has to reach out to newcomers rather than just say &amp;ldquo;you&amp;rsquo;re on your
own, deal with it&amp;rdquo;. Think of the immense amount of effort that goes
into promoting universal literacy.&lt;/p&gt;

&lt;h3 id=&#34;a-one-minute-review-of-test-driven-development:740606311d3fcf0ba2f14607a358bd73&#34;&gt;A one-minute review of test-driven development&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s continue with the test writing process.&lt;/p&gt;

&lt;p&gt;When doing test-driven development, we write an HSpec spec first,
&lt;em&gt;before even writing any implementation code&lt;/em&gt;. Test-driven development is
where you show how something is supposed to work before you actually
write that something. In a typed setting, this means we get a
compile-time error when first trying to run the test, which we fix by
creating &lt;code&gt;PCREHeavyExample&lt;/code&gt; as a new module with a stub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module PCREHeavyExample (mediaRegex) where

mediaRegex = undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, every test fails (in the terminal, the failures are
highlighted in red):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack test
PCREHeavyExample
  pcre-heavy
    match
      has audio FAILED [1]
      has video FAILED [2]
      has audio but missing FAILED [3]
      has video but unlinked FAILED [4]
    no match
      no audio or video FAILED [5]
      missing media field FAILED [6]

Failures:

  test/PCREHeavyExampleSpec.hs:13:
  1) PCREHeavyExample.pcre-heavy.match has audio
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:15:
  2) PCREHeavyExample.pcre-heavy.match has video
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:17:
  3) PCREHeavyExample.pcre-heavy.match has audio but missing
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:19:
  4) PCREHeavyExample.pcre-heavy.match has video but unlinked
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:22:
  5) PCREHeavyExample.pcre-heavy, no match, no audio or video
       uncaught exception: ErrorCall (Prelude.undefined)

  test/PCREHeavyExampleSpec.hs:24:
  6) PCREHeavyExample.pcre-heavy, no match, missing media field
       uncaught exception: ErrorCall (Prelude.undefined)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-tangent-on-ghc-s-error-reporting:740606311d3fcf0ba2f14607a358bd73&#34;&gt;A tangent on GHC&amp;rsquo;s error reporting&lt;/h4&gt;

&lt;p&gt;A super-annoying thing, and a long-standing embarrassment for GHC, is
that using &lt;code&gt;undefined&lt;/code&gt; doesn&amp;rsquo;t trigger useful error reporting. I
look forward to
&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-8.0.1&#34;&gt;GHC 8.0&lt;/a&gt;&amp;rsquo;s
new feature of
&lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/ExplicitCallStack/ImplicitLocations&#34;&gt;implicit parameters providing callstacks/source locations&lt;/a&gt;. This
stuff is important! It&amp;rsquo;s time we got line numbers and call stacks for
errors without having to jump through hoops.&lt;/p&gt;

&lt;h3 id=&#34;skipping-to-the-end-assume-we-finished-the-implementation:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Skipping to the end, assume we finished the implementation&lt;/h3&gt;

&lt;p&gt;OK, let&amp;rsquo;s assume we finished the implementation, which is simply
writing the regex for &lt;code&gt;mediaRegex&lt;/code&gt;. Then the tests pass (and in the
terminal they display in green):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;PCREHeavyExample
  pcre-heavy
    match
      has audio
      has video
      has audio but missing
      has video but unlinked
    no match
      no audio or video
      missing media field

Finished in 0.0010 seconds
6 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tests-are-code-too:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Tests are code too!&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s easy to not take test code seriously and not hold it up to the
same standards as &amp;ldquo;regular&amp;rdquo; code. That is a mistake: test code should
actually be cleaner and tighter than main implementation code because
it is our &lt;em&gt;executable documentation&lt;/em&gt; and what we need to make as easy
to read, write, and modify as requirements change.&lt;/p&gt;

&lt;h3 id=&#34;refactoring-part-1:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Refactoring, part 1&lt;/h3&gt;

&lt;p&gt;Notice the tremendous amount of code duplication in the tests. We can
do better than this item-by-item copy-and-paste job. We can write code
to generate all the matching examples, by refactoring the relevant
data into a table and a function that maps over the table to get a
composite &lt;code&gt;Spec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a table that pairs a test description with each example input
string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;matchExamples :: [(String, String)]
matchExamples =
  [ ( &amp;quot;has audio&amp;quot;
    , &amp;quot;@Media:\thas-audio,   audio&amp;quot;
    )
  , ( &amp;quot;has video&amp;quot;
    , &amp;quot;@Media:\thas-video,video&amp;quot;
    )
  , ( &amp;quot;has audio but missing&amp;quot;
    , &amp;quot;@Media:\thas-audio-but-missing, audio, missing&amp;quot;
    )
  , ( &amp;quot;has video but unlinked&amp;quot;
    , &amp;quot;@Media:\thas-video-but-unlinked  , video,      unlinked&amp;quot;
    )
  ]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a function that generates a spec item given a description/input pair.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;matchSpec :: (String, String) -&amp;gt; Spec
matchSpec (description, text) =
  it description $ do
    text `shouldSatisfy` (=~ mediaRegex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly for the non-matching examples.&lt;/p&gt;

&lt;p&gt;And the refactored &lt;code&gt;Spec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;spec :: Spec
spec =
  describe &amp;quot;pcre-heavy&amp;quot; $ do
    describe &amp;quot;match&amp;quot; $ do
      mapM_ matchSpec matchExamples
    describe &amp;quot;no match&amp;quot; $ do
      mapM_ nonMatchSpec nonMatchExamples
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;refactoring-part-2:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Refactoring, part 2&lt;/h3&gt;

&lt;p&gt;Uh oh, I said &amp;ldquo;similarly&amp;rdquo;. Usually when something is &amp;ldquo;similar&amp;rdquo;,
there&amp;rsquo;s more refactoring that might be doable.&lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;Haskell makes refactoring joyful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Haskell is a expressive language, where &amp;ldquo;might&amp;rdquo; usually means &amp;ldquo;can&amp;rdquo;,
and &amp;ldquo;can&amp;rdquo; often means &amp;ldquo;should&amp;rdquo;. In my experience, Haskell&amp;rsquo;s &lt;em&gt;single
best quality&lt;/em&gt; in terms of user experience is its support for
refactoring at will and with confidence that everything will still
mean exactly the same thing after as before the refactoring.&lt;/p&gt;

&lt;p&gt;I particularly look forward to the
ongoing development of a
&lt;a href=&#34;https://github.com/haskell/haskell-ide-engine&#34;&gt;universal Haskell IDE engine&lt;/a&gt;
refactoring even easier, e.g., folding in
&lt;a href=&#34;http://www.cs.kent.ac.uk/projects/refactor-fp/&#34;&gt;&lt;code&gt;HaRe&lt;/code&gt;&lt;/a&gt; support.&lt;/p&gt;

&lt;p&gt;We see a pattern of positive examples and negative examples using
a predicate and its negation. Let&amp;rsquo;s abstract this pattern out. Let&amp;rsquo;s
collect the positive and negative examples in one place. For
simplicity, let&amp;rsquo;s tuple them.&lt;/p&gt;

&lt;p&gt;And now that we&amp;rsquo;re dealing with arbitrary predicates, we no longer
have to hardcode &lt;code&gt;(=~ mediaRegex)&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; everywhere. We can &lt;em&gt;go
polymorphic&lt;/em&gt; in the predicate type, replacing &lt;code&gt;matchSpec&lt;/code&gt; and
&lt;code&gt;nonMatchSpec&lt;/code&gt; with a single &lt;code&gt;predSpec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The final result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;spec :: Spec
spec =
  describePredicate &amp;quot;pcre-heavy&amp;quot;
    (&amp;quot;match&amp;quot;, (=~ mediaRegex))
    (matchExamples, nonMatchExamples)

describePredicate :: Show a =&amp;gt;
     String                           -- ^ description
  -&amp;gt; (String, a -&amp;gt; Bool)              -- ^ (base description, predicate)
  -&amp;gt; ( [(String, a)], [(String, a)] ) -- ^ positive and negative examples
  -&amp;gt; Spec
describePredicate description
                  (baseDescription, predicate)
                  (positiveExamples, negativeExamples) =
  describe description $ do
    describe baseDescription $ do
      mapM_ (predSpec predicate) positiveExamples
    describe (&amp;quot;not &amp;quot; ++ baseDescription) $ do
      mapM_ (predSpec (not . predicate)) negativeExamples

predSpec :: Show a =&amp;gt; (a -&amp;gt; Bool) -&amp;gt; (String, a) -&amp;gt; Spec
predSpec predicate (description, a) =
  it description $ do
    a `shouldSatisfy` predicate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;describePredicate&lt;/code&gt; and &lt;code&gt;predSpec&lt;/code&gt; can then be pulled out
into a test utilities module for use by other specs using the same
pattern.&lt;/p&gt;

&lt;p&gt;Unfortunately, this refactoring, although good in some ways, came with
a cost. It doesn&amp;rsquo;t look so great to me. Does it to you?&lt;/p&gt;

&lt;h3 id=&#34;refactoring-part-3:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Refactoring, part 3?&lt;/h3&gt;

&lt;p&gt;One reason the refactored code doesn&amp;rsquo;t actually look so great now is
that our refactoring led to many nested primitive types
(&lt;a href=&#34;http://c2.com/cgi/wiki?PrimitiveObsession&#34;&gt;&amp;ldquo;primitive obsession&amp;rdquo;&lt;/a&gt;)
and an explosion in number of positional arguments to our new
&lt;code&gt;describePredicate&lt;/code&gt;. Let&amp;rsquo;s face it, calling &lt;code&gt;describePredicate&lt;/code&gt; is
cryptic, calling out for &amp;ldquo;keyword arguments&amp;rdquo; (in a language that
supports them).&lt;/p&gt;

&lt;p&gt;In Haskell, &amp;ldquo;keyword arguments&amp;rdquo; means there&amp;rsquo;s a configuration data
type crying to be defined. A related code smell is that documenting
the parameters to &lt;code&gt;describePredicate&lt;/code&gt; is now super-awkward. Each of
those parameters should be a thing in itself, not just parenthesized,
bracketed, tupled glop.&lt;/p&gt;

&lt;p&gt;If we are really serious about refactoring, we should wrap these
things into new data types that are an explicit model of what we want
to do when classifying and testing examples.  We might even turn the
whole thing into its own embedded sub-DSL of HSpec.&lt;/p&gt;

&lt;p&gt;This illustrates how refactoring can sometimes lead to new complexity
that didn&amp;rsquo;t exist before. There are tradeoffs constantly. Abstraction
for its own sake does not always make things clearer. For this reason,
I did not actually go this far initially for the example code
yesterday: I did not feel it was worth the trouble. I&amp;rsquo;ve left it in
the &lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage/tree/refactoring-2&#34;&gt;&lt;code&gt;refactoring-2&lt;/code&gt;&lt;/a&gt; branch of the GitHub repo.&lt;/p&gt;

&lt;h2 id=&#34;combining-testing-frameworks:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Combining testing frameworks&lt;/h2&gt;

&lt;p&gt;One last thing about HSpec: you can use it within a larger testing
framework, or you can embed another testing framework into it as
well. For example, I like to use
&lt;a href=&#34;http://hspec.github.io/quickcheck.html&#34;&gt;QuickCheck through HSpec&lt;/a&gt; as
part of &amp;ldquo;type-directed development&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:740606311d3fcf0ba2f14607a358bd73&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Testing is important, but few love to do it. Making it easy to write
and use tests goes a long way toward actually doing it. I like HSpec
because it&amp;rsquo;s easy to write, and because of auto-discovery. I hope you
consider using it for your own projects if you don&amp;rsquo;t already use it or
some other testing framework.&lt;/p&gt;

&lt;h2 id=&#34;all-the-code:740606311d3fcf0ba2f14607a358bd73&#34;&gt;All the code&lt;/h2&gt;

&lt;p&gt;All my code for my article series are at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>24 days of Hackage, 2015: day 2: Regexes with pcre-heavy; standalone Haskell scripts using Stack</title>
      <link>http://conscientiousprogrammer.com/blog/2015/12/02/24-days-of-hackage-2015-day-2-regexes-with-pcre-heavy-standalone-haskell-scripts-using-stack/</link>
      <pubDate>Wed, 02 Dec 2015 07:50:12 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/12/02/24-days-of-hackage-2015-day-2-regexes-with-pcre-heavy-standalone-haskell-scripts-using-stack/</guid>
      <description>

&lt;h2 id=&#34;table-of-contents-for-the-whole-series:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Table of contents for the whole series&lt;/h2&gt;

&lt;p&gt;A table of contents is at the top of the article for &lt;a href=&#34;../../blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/&#34;&gt;day 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;day-2:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Day 2&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t laugh, but once upon a time, I made Perl my main programming
language of choice (between around 1999 and 2010). There were many
reasons for this, but one reason was that Perl made it very easy to do
text processing using regexes.&lt;/p&gt;

&lt;p&gt;If you are a seasoned Haskeller, you might be thinking, &amp;ldquo;Why not use a
real parser instead?&amp;ldquo;, such as the venerable
&lt;a href=&#34;https://hackage.haskell.org/package/parsec&#34;&gt;parsec&lt;/a&gt;, which was covered in a
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-10-24-days-of-hackage-parsec.html&#34;&gt;2012 day of Hackage&lt;/a&gt;?
(Or, today, one could consider one of several other newer alternative libraries
for parsing. A later day of Hackage will say more about this!)&lt;/p&gt;

&lt;p&gt;After all, Jamie Zawinski famously once wrote, &lt;em&gt;&amp;ldquo;Some people, when
confronted with a problem, think &amp;lsquo;I know, I&amp;rsquo;ll use regular
expressions.&amp;rsquo;  Now they have two problems.&amp;rdquo;&lt;/em&gt; I even gave a talk at
&lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh Tech Fest&lt;/a&gt; in 2013,
&lt;a href=&#34;http://www.slideshare.net/FranklinChen/handout-22302440&#34;&gt;&amp;ldquo;Stop overusing regular expressions!&amp;rdquo;&lt;/a&gt;,
in which I promoted writing parsers rather than writing regexes.&lt;/p&gt;

&lt;p&gt;But, sometimes I do want to use a regex. In that case, I have been
using an obscure but useful package, &lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy&#34;&gt;&lt;code&gt;pcre-heavy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today I&amp;rsquo;ll show how to use &lt;code&gt;pcre-heavy&lt;/code&gt;, and while at it, also show
how to ship &lt;em&gt;one-file standalone Haskell scripts&lt;/em&gt; that only require
Stack.&lt;/p&gt;

&lt;h2 id=&#34;why-use-regexes-at-all:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Why use regexes at all?&lt;/h2&gt;

&lt;p&gt;Before going into &lt;code&gt;pcre-heavy&lt;/code&gt;, I thought I should explain when I use
regexes.&lt;/p&gt;

&lt;p&gt;Back when I was doing a lot of text extraction, cleaning, including
&lt;em&gt;correction&lt;/em&gt;, restructuring of messy data, regexes seemed the only
choice really. I had to not lose any &amp;ldquo;intended&amp;rdquo; information even if it
was obscured by garbage or misspellings or the like. I therefore could
not use some kind of approximate statistical technique, but had to
iteratively do do a lot exploratory work with some interactive
prompting in order to gradually clean up the data. Super-powerful
regex constructs of the Perl variety seemed perfect for this task.&lt;/p&gt;

&lt;p&gt;But even outside of such use cases, there&amp;rsquo;s no hiding from the fact
that regexes can be very convenient for simple tasks. Also,
because regexes are used so much in our programming world in general,
if we are migrating to Haskell some already-working regexes from
already-written code in some other language, it&amp;rsquo;s convenient to just
stick with regexes.&lt;/p&gt;

&lt;h2 id=&#34;which-haskell-regex-library-to-use:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Which Haskell regex library to use?!&lt;/h2&gt;

&lt;p&gt;A newcomer to Haskell must be overwhelmed by the lack of a single
standard library and syntax for regexes. I mean, take a look at this
&lt;a href=&#34;https://wiki.haskell.org/Regular_expressions&#34;&gt;wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, I&amp;rsquo;m presenting
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy&#34;&gt;&lt;code&gt;pcre-heavy&lt;/code&gt;&lt;/a&gt;, a
regex library that I&amp;rsquo;ve been using when I want regexes at all (I try
not to want them). It&amp;rsquo;s pretty new and not even mentioned on that wiki
page.&lt;/p&gt;

&lt;p&gt;Some of my criteria for choosing a regex library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want Perl-style regexes. That&amp;rsquo;s what I&amp;rsquo;m used to and are a kind of
standard across regex support in many programming languages.&lt;/li&gt;
&lt;li&gt;Nice syntax is a plus. One of the selling points of using regexes is
that the conciseness of writing patterns, binding matches,
etc. Without such conciseness, I just think &amp;ldquo;Why not just write a
real parser? It only takes a couple of lines in Haskell anyway.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;High performance is a perfectly legitimate reason to use regexes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given these criteria, using a &lt;a href=&#34;http://www.pcre.org/&#34;&gt;PCRE&lt;/a&gt;-based
library seemed the way to go. OK, the wiki page lists a bunch of
PCRE-based libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/pcre-light&#34;&gt;&lt;code&gt;pcre-light&lt;/code&gt;&lt;/a&gt; is a
good way to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It does require installation of the C library for
PCRE.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m mainly on Mac OS X, so I have PCRE installed through
Homebrew with &lt;code&gt;$ brew install pcre&lt;/code&gt;. I have PCRE working on
Linux. Unfortunately, I don&amp;rsquo;t use Windows, so if someone can verify
that &lt;code&gt;pcre-light&lt;/code&gt; installs OK on Windows, that would be great. I would
feel sad if I picked a library that is problematic for Windows users.&lt;/p&gt;

&lt;p&gt;Recently, out came
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy&#34;&gt;&lt;code&gt;pcre-heavy&lt;/code&gt;&lt;/a&gt;, a
wrapper around &lt;code&gt;pcre-light&lt;/code&gt; that uses
&lt;a href=&#34;https://wiki.haskell.org/Template_Haskell&#34;&gt;Template Haskell&lt;/a&gt;, and I
liked it, so I use it.&lt;/p&gt;

&lt;h2 id=&#34;example-program-using-pcre-heavy:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Example program using &lt;code&gt;pcre-heavy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pcre-heavy&lt;/code&gt; has decent documentation on
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy&#34;&gt;its Hackage page&lt;/a&gt;, so
I recommend reading that for the full details on how to use it. I&amp;rsquo;ll
give just a simple example here in the context of a complete program
that does something.&lt;/p&gt;

&lt;h3 id=&#34;specification-and-some-test-cases:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Specification and some test cases&lt;/h3&gt;

&lt;p&gt;Say we have a file of lines of text that are supposed to have a
comma-separated format of&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a fixed header&lt;/li&gt;
&lt;li&gt;a text transcript&amp;rsquo;s file path&lt;/li&gt;
&lt;li&gt;an &amp;ldquo;audio&amp;rdquo; or &amp;ldquo;video&amp;rdquo; field indicating the type of associated media&lt;/li&gt;
&lt;li&gt;an optional annotation about whether the associated media is missing
or not yet linked into the transcript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I made up this example based on the structured text specification
called CHAT that happens to include a single line of this format,
e.g. &lt;a href=&#34;http://talkbank.org/data-orig/Meeting/SCOTUS/2008/08-205.cha&#34;&gt;this coded Supreme Court oral argument transcript for &amp;ldquo;Citizens United v. Federal Election Commission&amp;rdquo;&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Examples that should match:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@Media:	has-audio,   audio
@Media:	has-video,video
@Media:	has-audio-but-missing, audio, missing
@Media:	has-video-but-unlinked  , video,      unlinked
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples that should fail to match:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@Media:	no-audio-or-video
@Media:	missing-media-field, unlinked
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-regex:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Creating a regex&lt;/h3&gt;

&lt;p&gt;Here is a &lt;code&gt;pcre-heavy&lt;/code&gt; regex, using the
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy-1.0.0.1/docs/Text-Regex-PCRE-Heavy.html#v:re&#34;&gt;&lt;code&gt;re&lt;/code&gt;&lt;/a&gt;
Template Haskell
&lt;a href=&#34;https://wiki.haskell.org/Template_Haskell#QuasiQuoters&#34;&gt;quasiquoter&lt;/a&gt;
that builds a PCRE-compiled
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy-1.0.0.1/docs/Text-Regex-PCRE-Heavy.html#t:Regex&#34;&gt;&lt;code&gt;Regex&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;mediaRegex :: Regex
mediaRegex = [re|^@Media:\t([^ ,]+)\ *,\ *(audio|video)(\ *,\ *(?:missing|unlinked))?|]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;regex-string-validated-at-haskell-compile-time:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Regex string validated at Haskell compile-time&lt;/h2&gt;

&lt;p&gt;One selling point of &lt;code&gt;pcre-heavy&lt;/code&gt; for me is that because it uses
Template Haskell, a bad regex string results in a Haskell-level
compile-time error rather than a runtime error.&lt;/p&gt;

&lt;p&gt;Example of a compile-time error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- This Haskell code fails to compile!
mediaRegex :: Regex
mediaRegex = [re|^@Media:\t([^ ,]+)\ *,\ *(audio|video)(\ *,\ *(?:missing|unlinked)?|]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loading this in GHCi or compiling with GHC results in&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    Exception when trying to run compile-time code:
      Text.Regex.PCRE.Light: Error in regex: missing )
    Code: template-haskell-2.10.0.0:Language.Haskell.TH.Quote.quoteExp
            re
            &amp;quot;^@Media:\\t([^ ,]+)\\ *,\\ *(audio|video)(\\ *,\\ *(?:missing|unlinked)?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-the-regex:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Using the regex&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll use
&lt;a href=&#34;https://hackage.haskell.org/package/pcre-heavy-1.0.0.1/docs/Text-Regex-PCRE-Heavy.html#v:scan&#34;&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/a&gt;
to extract the matches (if any) against our regex on a string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scan&lt;/code&gt; returns a lazy list of all possible matches:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- Simplified type signature for our purposes.
scan :: Regex -&amp;gt; String -&amp;gt; [(String, [String])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each match is a pair &lt;code&gt;(String, [String])&lt;/code&gt;, where the first component
is the whole string that matched, and the second is an ordered list of
parenthesized groupings in the regex. In our regex, we had three
parenthesized groupings, so a match could result in a three-element
grouping list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;*Main&amp;gt; scan mediaRegex &amp;quot;@Media:\tfoo, audio, unlinked&amp;quot;
[(&amp;quot;@Media:\tfoo, audio, unlinked&amp;quot;,[&amp;quot;foo&amp;quot;,&amp;quot;audio&amp;quot;,&amp;quot;, unlinked&amp;quot;])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we only want
the first match (if any), we can just compose it with
&lt;a href=&#34;https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-Maybe.html#v:listToMaybe&#34;&gt;&lt;code&gt;listToMaybe&lt;/code&gt; from &lt;code&gt;Data.Maybe&lt;/code&gt;&lt;/a&gt;,
which has type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;listToMaybe :: [a] -&amp;gt; Maybe a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so &lt;code&gt;listToMaybe . scan mediaRegex&lt;/code&gt; has type &lt;code&gt;String -&amp;gt; Maybe (String, [String])&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;*Main&amp;gt; (listToMaybe . scan mediaRegex) &amp;quot;@Media:\tfoo, audio, unlinked&amp;quot;
Just (&amp;quot;@Media:\tfoo, audio, unlinked&amp;quot;,[&amp;quot;foo&amp;quot;,&amp;quot;audio&amp;quot;,&amp;quot;, unlinked&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;extracting-useful-information:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Extracting useful information&lt;/h2&gt;

&lt;p&gt;Finally, what we really wanted to do after matching is apply
additional business logic and get stuff into a real type as soon as
possible, rather than engage in &amp;ldquo;stringly-typed&amp;rdquo; programming and
context-dependent list lengths.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say that for our task, we only care about matched lines that are
&lt;em&gt;not&lt;/em&gt; missing or unlinked, and skip those that are missing or
unlinked. We define a data type and use pattern matching to get out of
the untyped world into the typed world of our data model.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Info =
    Skip
  | Audio FilePath
  | Video FilePath
    deriving (Eq, Show)

-- | Extract information about a media file if it is present.
extractIfPresent :: (String, [String]) -&amp;gt; Info
extractIfPresent (_, [name, &amp;quot;audio&amp;quot;]) = Audio name
extractIfPresent (_, [name, &amp;quot;video&amp;quot;]) = Video name
extractIfPresent (_, _) = Skip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;presentation-as-a-report:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Presentation as a report&lt;/h2&gt;

&lt;p&gt;Finally, now that we are done with the regex world, and have a data
model, all that is left is a driver to complete an example
command-line program.&lt;/p&gt;

&lt;p&gt;We have all the information needed to print out a report for each line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | Output a report.
reportOnInfo :: Maybe Info -&amp;gt; IO ()
reportOnInfo Nothing = putStrLn &amp;quot;no match&amp;quot;
reportOnInfo (Just Skip) = putStrLn &amp;quot;match, but missing or unlinked&amp;quot;
reportOnInfo (Just (Audio path)) = printf &amp;quot;audio at %s\n&amp;quot; path
reportOnInfo (Just (Video path)) = printf &amp;quot;video at %s\n&amp;quot; path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the final driver, piping everything through from standard input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;main :: IO ()
main = do
  s &amp;lt;- getContents
  mapM_ (reportOnInfo
        . fmap extractIfPresent
        . listToMaybe
        . scan mediaRegex
       ) (lines s)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-stack-to-ship-standalone-scripts:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Using Stack to ship standalone scripts&lt;/h2&gt;

&lt;p&gt;We can try our program from within the GHCi REPL by just typing &lt;code&gt;main&lt;/code&gt;
or &lt;code&gt;:main&lt;/code&gt; at the REPL prompt and typing in lines of text. We can also
do &lt;code&gt;stack build&lt;/code&gt; to native-compile into a shippable binary.&lt;/p&gt;

&lt;p&gt;But another option is to ship the source code as a standalone one-file
script. This can be very convenient in some circumstances, when you
can rely on the recipient simply installing Stack.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how we can turn our program into such a standalone script: just
add the following two lines and make the file executable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;#!/usr/bin/env stack
-- stack --resolver lts-3.16 --install-ghc runghc --package pcre-heavy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stack will read the embedded command in order to install GHC, if
 needed, and first download and install the packages listed (here
 &lt;code&gt;pcre-heavy&lt;/code&gt;), if needed. We have pinned down the exact version of
 LTS in order to guarantee what versions of everything will be used by
 Stack. (Note: in this case, because of FFI with a
 C library, the recipient has to install PCRE first.)&lt;/p&gt;

&lt;p&gt;So if you have short programs that don&amp;rsquo;t need to be organized into
full-scale Cabal projects, you can treat Haskell as a &amp;ldquo;scripting
language&amp;rdquo; with full access to the libraries of Hackage!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ app/PCREHeavyExampleMain.hs &amp;lt; input.txt &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-warning:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;A warning&lt;/h3&gt;

&lt;p&gt;Although this Stack-as-Haskell-interpreter feature is kind of cool, I
prefer to write modular, separately testable libraries, while having
the &lt;code&gt;main&lt;/code&gt; driver of the &lt;code&gt;Main&lt;/code&gt; module of a program just use library
modules that do most of the real work. Furthermore, I prefer to build
and use native-compiled libraries and binaries because they&amp;rsquo;re just
much faster to start up and also run: &lt;code&gt;runghc&lt;/code&gt; is a Haskell
interpreter rather than a native optimizing compiler. But the beauty
of the GHC Haskell world is you can run in either mode, and flip from
one to the other seamlessly.&lt;/p&gt;

&lt;h3 id=&#34;here-s-our-complete-example-standalone-program:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Here&amp;rsquo;s our complete example standalone program&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;#!/usr/bin/env stack
-- stack --install-ghc runghc --package pcre-heavy

{-# LANGUAGE QuasiQuotes #-}

module Main where

import Text.Regex.PCRE.Heavy (Regex, re, scan)
import Data.Maybe (listToMaybe)
import Text.Printf (printf)

-- | Match a media name, audio/video, and optional missing/unlinked.
mediaRegex :: Regex
mediaRegex = [re|^@Media:\t([^ ,]+)\ *,\ *(audio|video)(\ *,\ *(?:missing|unlinked))?|]

data Info =
    Skip
  | Audio FilePath
  | Video FilePath
    deriving (Eq, Show)

-- | Extract information about a media file if it is present.
extractIfPresent :: (String, [String]) -&amp;gt; Info
extractIfPresent (_, [name, &amp;quot;audio&amp;quot;]) = Audio name
extractIfPresent (_, [name, &amp;quot;video&amp;quot;]) = Video name
extractIfPresent (_, _) = Skip

-- | Output a report.
reportOnInfo :: Maybe Info -&amp;gt; IO ()
reportOnInfo Nothing = putStrLn &amp;quot;no match&amp;quot;
reportOnInfo (Just Skip) = putStrLn &amp;quot;match, but missing or unlinked&amp;quot;
reportOnInfo (Just (Audio path)) = printf &amp;quot;audio at %s\n&amp;quot; path
reportOnInfo (Just (Video path)) = printf &amp;quot;video at %s\n&amp;quot; path

-- | Driver, in traditional right-to-left syntax.
main :: IO ()
main = do
  s &amp;lt;- getContents
  mapM_ (reportOnInfo
        . fmap extractIfPresent
        . listToMaybe
        . scan mediaRegex
       ) (lines s)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;some-additional-notes:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Some additional notes&lt;/h2&gt;

&lt;p&gt;One limitation faced by a short expository article with example code
is that we don&amp;rsquo;t like to waste space and attention, and therefore tend
to present quick-and-dirty code, rather than production-level code
(which is efficient, has sensible error recovery, well-commented). I&amp;rsquo;ve
been thinking about the dilemma of &lt;em&gt;how not to give the
wrong impression and set a bad example by showing simplistic example
code&lt;/em&gt;. There&amp;rsquo;s no easy answer, but I felt it might be useful to
provide optional &amp;ldquo;advanced&amp;rdquo; notes sometimes, on how to write real code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pcre-heavy&lt;/code&gt; allows matching not only of &lt;code&gt;String&lt;/code&gt;, but also of
&lt;code&gt;ByteString&lt;/code&gt; and &lt;code&gt;Text&lt;/code&gt; types. In practice, for efficiency, we
want to use
&lt;a href=&#34;http://hackage.haskell.org/package/bytestring&#34;&gt;&lt;code&gt;bytestring&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&#34;http://hackage.haskell.org/package/text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; as much as possible,
rather than the inefficient &lt;code&gt;String&lt;/code&gt; type. (&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-12-24-days-of-hackage-text.html&#34;&gt;A 2012 day of hackage
article talks about &lt;code&gt;text&lt;/code&gt;&lt;/a&gt;.)
Since the underlying PCRE C library uses bytes, I generally hand
bytestrings to &lt;code&gt;pcre-heavy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The sample driver code uses lazy I/O to get the lines from input. This
is superficially elegant and concise for pedagogical purposes, but in
real life is a source of resource leaks and other problems and even
causes people to think &amp;ldquo;Haskell is inefficient&amp;rdquo;. For real work, I like
to use &lt;a href=&#34;http://hackage.haskell.org/package/pipes&#34;&gt;&lt;code&gt;pipes&lt;/code&gt;&lt;/a&gt;, which was
covered in another
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-16-24-days-of-hackage-pipes.html&#34;&gt;2012 day of Hackage&lt;/a&gt;
and also has an
&lt;a href=&#34;https://hackage.haskell.org/package/pipes-4.1.7/docs/Pipes-Tutorial.html&#34;&gt;extensive, beautiful tutorial&lt;/a&gt;
by its author, Gabriel Gonzalez, who also has a fantastic,
long-running, active blog
&lt;a href=&#34;http://www.haskellforall.com/&#34;&gt;&amp;ldquo;Haskell for all&amp;rdquo;&lt;/a&gt; that every
Haskeller should follow.&lt;/p&gt;

&lt;p&gt;Finally, was a regex the right choice here? It was simple enough for
this problem, but you can see from the ad hoc pattern matching and
hardcoded strings and fragile positional ordering and number of groups
that things could get error-prone really quickly if the regex got any
more complex or we wanted to do proper error handling in case of a
failed match.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Regex support is not a strong point of the Haskell ecosystem, which is
geared to more structured parsing, but there are options if you really
want to use regexes, and I like the Perl-style &lt;code&gt;pcre-light&lt;/code&gt; family of
libraries that now includes &lt;code&gt;pcre-heavy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, I showed how to add two lines to the top of a Haskell program to
turn it into a Stack script.&lt;/p&gt;

&lt;h2 id=&#34;all-the-code:73f9e85177be1c4a1d48f4dbe8d8b6bf&#34;&gt;All the code&lt;/h2&gt;

&lt;p&gt;All my code for my article series are at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I switched from Octopress 2 to Hugo</title>
      <link>http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/</link>
      <pubDate>Sun, 31 May 2015 12:26:32 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/</guid>
      <description>

&lt;p&gt;Until now, I haven&amp;rsquo;t been publishing anything on any of my three blogs
for half a year now. There are many reasons, but one of them was that
I wanted to migrate away from
&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; 2. Octopress 2 is ancient and slow
and unmaintained, and I&amp;rsquo;d been waiting for
&lt;a href=&#34;https://github.com/octopress/octopress&#34;&gt;Octopress 3&lt;/a&gt; for over three
years
&lt;a href=&#34;http://octopress.org/2015/01/15/octopress-3.0-is-coming/&#34;&gt;to arrive&lt;/a&gt;,
so when I heard that Octopress 3 was finally going to be officially
announced at &lt;a href=&#34;http://jekyllconf.com/&#34;&gt;JekyllConf&lt;/a&gt;, I decided it was
time to migrate my blogs, to Octopress 3 or
&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, or something else entirely.&lt;/p&gt;

&lt;h2 id=&#34;factors-to-consider-when-choosing-a-static-site-generator:26b28caf414f77ef05fac6550ae96388&#34;&gt;Factors to consider when choosing a static site generator&lt;/h2&gt;

&lt;p&gt;Some factors I kept in mind while evaluating a new static site
generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed of full generation&lt;/li&gt;
&lt;li&gt;Speed of incremental generation&lt;/li&gt;
&lt;li&gt;Active progress in bug fixes, improvements, new features&lt;/li&gt;
&lt;li&gt;Availability of themes&lt;/li&gt;
&lt;li&gt;Community sharing, support&lt;/li&gt;
&lt;li&gt;Languages used for using and writing own templates and plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;speed-is-critical-for-me:26b28caf414f77ef05fac6550ae96388&#34;&gt;Speed is critical for me&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; was a huge consideration for me when I evaluated alternative
static site generators, so I was particularly interested in evaluating&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; (written in Go)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jaspervdj.be/hakyll/&#34;&gt;Hakyll&lt;/a&gt; (written in Haskell)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The advantages of these two are that they are implemented in
statically typed languages that compile to native
executables.&lt;/p&gt;

&lt;p&gt;Furthermore, Hakyll is a library, such that your configuration is
actually merely a Haskell program using the library, without the
indirection of configuration languages and interpreters of the
languages, and you can compile your site into a specialized native
executable. (For example, Hakyll uses Pandoc as a library for Markdown processing.)&lt;/p&gt;

&lt;h2 id=&#34;advantages-of-going-to-jekyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;Advantages of going to Jekyll?&lt;/h2&gt;

&lt;p&gt;Jekyll is the most popular static site generator, so I had to evaluate
it despite knowing up front that it was not going to be a speed
winner. It might well be fast &lt;em&gt;enough&lt;/em&gt;. The benefits of using a
platform with a large and passionate community are &lt;em&gt;tremendous&lt;/em&gt;: bugs
get fixed, cool features get added, people step in to help you out if
you have questions, incremental improvements keep happening, themes
abound that you can just take and use. I never evaluate using a
technology based only on one consideration (such as speed).&lt;/p&gt;

&lt;p&gt;Note that Octopress 3 is basically a really cool interface over an
underlying Jekyll setup, so I will only refer to Jekyll below, with
the understanding that all performance matters that apply to Jekyll
apply to Octopress 3 as well.&lt;/p&gt;

&lt;h2 id=&#34;speed-comparisons-octopress-2-jekyll-hugo-hakyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;Speed comparisons: Octopress 2, Jekyll, Hugo, Hakyll&lt;/h2&gt;

&lt;h3 id=&#34;full-generation-from-scratch:26b28caf414f77ef05fac6550ae96388&#34;&gt;Full generation from scratch&lt;/h3&gt;

&lt;p&gt;My &lt;a href=&#34;http://franklinchen.com/&#34;&gt;personal blog&lt;/a&gt; has 585 posts. Here are
the from-scratch full generation times, based on migrations away from
Octopress 2 that I performed using a bunch of Perl scripts. Note that
the sites are not completely equivalent, because I only wanted to get
a rough idea, not compare total equivalence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Octopress 2: 5:39.28&lt;/li&gt;
&lt;li&gt;Jekyll: 15.90&lt;/li&gt;
&lt;li&gt;Hakyll: 14.51&lt;/li&gt;
&lt;li&gt;Hugo: 4.90&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jekyll and Hakyll don&amp;rsquo;t do too badly, but Hugo was by far the fastest.&lt;/p&gt;

&lt;p&gt;Although I suspect that as more features
get added to Hugo, it may slow down some, I also trust that since the
author and the Go community in general are &lt;em&gt;obsessed&lt;/em&gt; with speed, Hugo
is a safe bet for anyone concerned about speed.&lt;/p&gt;

&lt;h3 id=&#34;full-generation-but-not-from-scratch:26b28caf414f77ef05fac6550ae96388&#34;&gt;Full generation but not from scratch&lt;/h3&gt;

&lt;p&gt;Hakyll stores a lot of information in a cache directory. If you&amp;rsquo;ve
done a full generation and change nothing and do a full generation
again (&lt;code&gt;my-compiled-site-builder build&lt;/code&gt;), it comes back almost
instantaneously. If you&amp;rsquo;ve modified a file (as in the incremental,
server mode generation), my result was slightly slower than in server
mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hakyll: 2.23&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;incremental-generation:26b28caf414f77ef05fac6550ae96388&#34;&gt;Incremental generation&lt;/h3&gt;

&lt;p&gt;I brought each generator up in &amp;ldquo;server&amp;rdquo; &amp;ldquo;watching&amp;rdquo; mode, to see what
would happen if I changed a single file, resulting in regeneration of
everything affected. For example, I changed the most recent blog post,
which affects its generation as well as potentially the main
page, RSS, sitemap, archive, tags and categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll: 9.95&lt;/li&gt;
&lt;li&gt;Hugo: 4.11&lt;/li&gt;
&lt;li&gt;Hakyll: 1.50&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s interesting that Hugo&amp;rsquo;s live &amp;ldquo;watch&amp;rdquo; functionality does not really
improve over regenerating the site from scratch.&lt;/p&gt;

&lt;p&gt;For Hakyll, there is tremendous improvement. I believe this may be
because of the use of a cache directory but also because a
Hakyll-compiled generator incurs no &lt;em&gt;interpreter&lt;/em&gt; overhead once you
have it running in server mode watching for changes.&lt;/p&gt;

&lt;p&gt;9.95 seconds is still kind of slow for me, for making a quick change
to a file in progress and wanting to see how it displays in the
browser, so Jekyll is not optimal for me. But Hugo&amp;rsquo;s 4.11 seconds is acceptable.&lt;/p&gt;

&lt;h2 id=&#34;so-why-not-hakyll:26b28caf414f77ef05fac6550ae96388&#34;&gt;So why not Hakyll?&lt;/h2&gt;

&lt;p&gt;So, given that Hakyll looks so promising, and I would far prefer
writing and debugging Haskell code, to hacking in some mixture of Go
templating and other configuration languages, why did I not migrate to
Hakyll?&lt;/p&gt;

&lt;p&gt;There are many considerations that go into what I choose as a
technology to solve a specific problem. For example, there&amp;rsquo;s a reason
I wrote all my one-shot little blog migration scripts in Perl, even
though I no longer write Perl for any other purpose (although Perl was
one of my main languages I used for nontrivial programs from
1999-2010).&lt;/p&gt;

&lt;p&gt;Hakyll has a small community. I&amp;rsquo;m not sure I would even call it a
community. It&amp;rsquo;s basically one guy&amp;rsquo;s project. It is completely
unopinionated, such that to create any reasonable site you have to
write your own code or copy and paste from someone else&amp;rsquo;s. There is no
formal concept of &amp;ldquo;theme&amp;rdquo; or an official theme sharing site.&lt;/p&gt;

&lt;p&gt;Hakyll is pretty confusing to build if you don&amp;rsquo;t use a Cabal sandbox,
and even then, there have perpetually been build problems of some kind
or another, for years. Last year, &lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/302&#34;&gt;I could not get it to build at all&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Meanwhile, the &lt;a href=&#34;https://travis-ci.org/jaspervdj/hakyll&#34;&gt;Travis build&lt;/a&gt;
is perpetually broken and doesn&amp;rsquo;t even test multiple versions of GHC
and Cabal. A call to
&lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/299&#34;&gt;get Hakyll into Stackage&lt;/a&gt;
is still open.&lt;/p&gt;

&lt;p&gt;I ran into a
&lt;a href=&#34;https://github.com/jaspervdj/hakyll/issues/225&#34;&gt;serious YAML-handling bug that still has not been addressed after over a year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In other words, just because Hakyll seems to perform well on a
simplistic toy migration of my personal blog (after all the
workarounds for the bugs mentioned above) doesn&amp;rsquo;t mean that I can
trust it to work if I do more complicated things, or that bug reports
will get addressed.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m writing this not to criticize the author of Hakyll, who by the way
writes a lot of quite high-quality
&lt;a href=&#34;http://jaspervdj.be/posts.html&#34;&gt;blog posts on Haskell&lt;/a&gt; and has a day
job developing in Haskell. Open source projects are labors of love
that just cannot be sustained by one person who has many things to do
in life.&lt;/p&gt;

&lt;h2 id=&#34;winner-hugo:26b28caf414f77ef05fac6550ae96388&#34;&gt;Winner: Hugo&lt;/h2&gt;

&lt;p&gt;It would be nice if there were a larger Hakyll community, but the
reality is that there isn&amp;rsquo;t, and therefore as someone who also has
many things to do and prefers to write for my blogs rather than
implement features for the blog engine, I chose Hugo as the clear
winner for my current needs.&lt;/p&gt;

&lt;p&gt;Hugo not only has an entire official
&lt;a href=&#34;http://discuss.gohugo.io/&#34;&gt;discussion site&lt;/a&gt; but also an active
&lt;a href=&#34;https://gitter.im/spf13/hugo&#34;&gt;Gitter room&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The official documentation is pretty good and continues to be updated.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:26b28caf414f77ef05fac6550ae96388&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Choosing a static site generator is like choosing any other software
to perform a task: you have to evaluate many different factors and
tradeoffs among the different choices available. For me, speed is very
important, but also a thriving, growing community of maintainers,
contributors, and users.&lt;/p&gt;

&lt;p&gt;In the end, I chose Hugo, because it is fast, actively maintained, and
has a sizable community revolving around it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why programming puzzlers make me sad</title>
      <link>http://conscientiousprogrammer.com/blog/2014/07/17/why-programming-puzzlers-make-me-sad/</link>
      <pubDate>Thu, 17 Jul 2014 23:01:52 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2014/07/17/why-programming-puzzlers-make-me-sad/</guid>
      <description>

&lt;p&gt;I recently saw a
&lt;a href=&#34;http://blog.plover.com/2014/07/17/&#34;&gt;&amp;ldquo;guess what this does&amp;rdquo; article&lt;/a&gt;
on a blog I follow, and this post presents mysterious Perl code for
which the reader is asked to guess what it does:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;perl -le &#39;print(two + two == five ? &amp;quot;true&amp;quot; : &amp;quot;false&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I looked at it briefly, got a headache, and didn&amp;rsquo;t even want to solve
it. This despite using Perl as one of my main programming languages
from 1993-2010 and considering myself fairly proficient at Perl.&lt;/p&gt;

&lt;p&gt;Programming puzzlers just in general make me sad.&lt;/p&gt;

&lt;h2 id=&#34;i-know-every-programming-language-has-quirks:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;I know every programming language has quirks&lt;/h2&gt;

&lt;p&gt;It is a human reality, given human imperfection, that the languages we
invent have quirks of some kind. You might expect that, unlike natural
languages like English and Chinese, which have the burden of no
centralized design and hundreds or thousands of year of history and
random evolution, computer languages would be designed up front to
avoid ambiguity and just plain confusion. But the human desire to make
some things &amp;ldquo;easy&amp;rdquo; through clever defaults or implicit assumptions
always results in an invented computer language that has
irregularities or unexpected behavior somewhere.&lt;/p&gt;

&lt;h2 id=&#34;the-strange-love-of-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;The strange love of puzzlers&lt;/h2&gt;

&lt;p&gt;Still, it makes me sad when I see &amp;ldquo;puzzlers&amp;rdquo;, and especially how they
are used. For some reason, in some circles, it is considered a sign of
intelligence or competence to be able to decode strange
puzzlers. Many academic homework assignments and exams tend to focus
on weird puzzlers as a way of supposedly testing proficiency in
programming. Java certification exams and job interview questions
often throw in puzzlers. I deplore this situation.&lt;/p&gt;

&lt;p&gt;I understand that in specialized circumstances, you would want to
value someone who was really good at puzzlers: someone who could write
a conforming compiler for a language, diagnose strange bugs, etc. But
that is not what most of us do or need to do. And too many puzzlers
makes non-programmers wince and stay away from a field they consider
to be pointlessly capricious.&lt;/p&gt;

&lt;h2 id=&#34;when-to-understand-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;When to understand puzzlers&lt;/h2&gt;

&lt;p&gt;The exception I make is when a &amp;ldquo;puzzler&amp;rdquo; is not actually rare code,
but typical code that has some kind of mistake. Some languages have
more of these puzzlers that are actually critical to understand in
order to be functional at working with code in them. For example,
almost all normally used features of C could be considered puzzlers!&lt;/p&gt;

&lt;h2 id=&#34;languages-with-puzzler-books:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;Languages with &amp;ldquo;puzzler&amp;rdquo; books&lt;/h2&gt;

&lt;p&gt;Many languages have spawned &amp;ldquo;puzzler&amp;rdquo; books or sites. You can look
them up for yourself if you are curious about puzzlers in your
favorite languages. I won&amp;rsquo;t list any here because I wouldn&amp;rsquo;t know
where to stop. I didn&amp;rsquo;t mean to pick on Perl, of course, when writing
this article.&lt;/p&gt;

&lt;h2 id=&#34;an-idea-how-about-learning-from-all-the-puzzlers:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;An idea: how about learning from all the puzzlers?&lt;/h2&gt;

&lt;p&gt;I have an idea: how about pooling together all the puzzlers in all the
languages that currently exist, classifying the language misfeatures
that resulted in those puzzlers, and coming up with a plan to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;teach the puzzlers in a systematic polyglot way&lt;/li&gt;
&lt;li&gt;fix as many of these puzzlers as possible in the languages (I expect
this to be very difficult because of compatibility needs)&lt;/li&gt;
&lt;li&gt;write up a guide to what &lt;em&gt;not&lt;/em&gt; to do in future &lt;em&gt;new&lt;/em&gt; languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you think there would be value in mining existing puzzlers for
  the purpose of a systematic resource for learning about programming
  language design?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:ead468025bb952e03fb2d2ce3057bf00&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t like programming puzzlers. They are supposed to be funny, and
maybe sometimes they are, but often they are abused for status and
mistaken as an accurate gauge of competence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you feel about puzzlers? Do you use them for assessing your
  own or others&amp;rsquo; knowledge? Do you solve them for entertainment? Do
  you think minimizing the existence of puzzlers should be a criterion
  for design of any new programming languages?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenHack Pittsburgh: learning Elixir test-driven and package-publishing</title>
      <link>http://conscientiousprogrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing/</link>
      <pubDate>Mon, 26 Aug 2013 22:09:00 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/08/26/openhack-pittsburgh-learning-elixir-test-driven-and-package-publishing/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a long time since I went to an &lt;a href=&#34;http://openhack.github.io/pittsburgh/&#34;&gt;OpenHack Pittsburgh&lt;/a&gt; meeting. The last time was &lt;a href=&#34;http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/&#34;&gt;five months ago&lt;/a&gt;. On June 24, there was an &lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/120200292/&#34;&gt;OpenHack Pittsburgh&lt;/a&gt; held at &lt;a href=&#34;http://www.4moms.com/&#34;&gt;4moms&lt;/a&gt;, but I really needed to stay home and take it easy that evening, because of my busy schedule later in the week, including attending a &lt;a href=&#34;../../blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/&#34;&gt;PittJUG meeting&lt;/a&gt; and preparing a &lt;a href=&#34;../../blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module/&#34;&gt;Pittsburgh Python talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/120201842/&#34;&gt;This August meeting of OpenHack Pittsburgh&lt;/a&gt; was held at &lt;a href=&#34;http://www.modcloth.com/&#34;&gt;ModCloth&lt;/a&gt;, which I had never been to. It&amp;rsquo;s in Crafton, which is a place I&amp;rsquo;ve never been before, nearly half an hour drive from Pittsburgh. Because of worries about driving there near rush hour after work, I probably would not have signed up to attend had it not been for &lt;a href=&#34;http://justinxreese.com/&#34;&gt;Justin&lt;/a&gt;, the organizer of OpenHack Pittsburgh.&lt;/p&gt;

&lt;p&gt;What happened was that he asked for feedback about who was planning to work on what, and said he planned to learn some &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;Elixir&lt;/a&gt;, a fairly new programming language built on top of the &lt;a href=&#34;http://www.erlang.org/&#34;&gt;Erlang&lt;/a&gt; runtime. Since this language had been on my list of things to look into, I decided that learning loves company, so I proposed to learn some Elixir in a test-driven way!&lt;/p&gt;

&lt;p&gt;What does that mean?&lt;/p&gt;

&lt;h2 id=&#34;how-to-learn-a-programming-language:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;How to learn a programming language&lt;/h2&gt;

&lt;p&gt;I have written code in probably around fifty (50) programming languages. I&amp;rsquo;m not kidding, and I&amp;rsquo;m not proud, but this is simply a fact of my having done programming since 1982, thirty-one (31!!) years ago. Let&amp;rsquo;s face it: languages come and go. I have personally sat at an IBM &lt;a href=&#34;http://en.wikipedia.org/wiki/Keypunch&#34;&gt;keypunch&lt;/a&gt; machine punching out cards for my COBOL and Fortran code.&lt;/p&gt;

&lt;p&gt;As with human languages, the fact is that to be truly productive in a language requires much more than learning some syntax and semantics. It requires actually writing and running and fixing code, and in the context of a realistic project.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve learned through trial and error that the most common ways of learning a programming language, like the most common ways of learning human languages (other than one&amp;rsquo;s first language), are terribly inefficient and misleading, resulting in minimal competence. I mean, reading through books, typing into a REPL, submitting a single file to a compiler or interpreter, etc.&lt;/p&gt;

&lt;p&gt;I feel that we should learn programming languages using a variety of approaches. Yes, the academic bottom-up semantics-based approach is critical in the long run, to avoid wasting a lot of time on pointless misunderstandings. Exploration in a REPL can be very rewarding. But I think what is often missing is the &lt;em&gt;biggest possible picture&lt;/em&gt;: immediately seeing how to write a program that is integrated with a test framework, uses libraries, is exportable and publishable publicly as a library, can be submitted to a continuous integration server, is editable in a decent editor or IDE, etc.&lt;/p&gt;

&lt;p&gt;Without seeing the biggest possible picture, one usually gets a horribly inaccurate picture of what it is like to program in a particular language ecosystem. (I will be writing more about this subject of pedagogy later.)&lt;/p&gt;

&lt;h2 id=&#34;my-proposal:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;My proposal&lt;/h2&gt;

&lt;p&gt;The last couple of languages I have learned in recent years, I slowly came to work with in a more efficient way than in the past, because I focused on matters such as testability. In particular, as I grew to wholly adopt TDD when writing any code at all in any language, it became clear to me that the best way to learn a new language must be in a test-driven way.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an analogy: I believe the best way to learn a human language is to dive into how to be able to converse in some coherent way right off the bat. &lt;a href=&#34;http://www.fluentin3months.com/4-hour/&#34;&gt;Tim Ferriss and others&lt;/a&gt; have exploited this idea to &lt;em&gt;drive&lt;/em&gt; the learning of what is most relevant in &lt;a href=&#34;http://www.fourhourworkweek.com/blog/2007/11/07/how-to-learn-but-not-master-any-language-in-1-hour-plus-a-favor/&#34;&gt;grammar&lt;/a&gt; and &lt;a href=&#34;http://www.fourhourworkweek.com/blog/2009/01/20/learning-language/&#34;&gt;vocabulary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the past, I learned human languages in a terrible way, taking lots of courses, but never actually getting fluent in everyday use. This is how we tend to learn &amp;ldquo;foreign&amp;rdquo; programming languages. My proposal is that learning a new programming language should involve getting as quickly as possible up to speed on a &lt;em&gt;minimum viable publishable library&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That the software artifact should be a &lt;em&gt;library&lt;/em&gt;, and not just some executable program, is vital, because it means having to adhere by whatever standards apply to real-world API design in the language ecosystem, producing something that client code can import and call.&lt;/p&gt;

&lt;p&gt;That it should be &lt;em&gt;publishable&lt;/em&gt; is vital because it means adhering to standards of testing, of discovery through metadata, and enabling easy use by a client.&lt;/p&gt;

&lt;h2 id=&#34;my-concrete-example-with-learning-elixir-tonight:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;My concrete example with learning Elixir tonight&lt;/h2&gt;

&lt;h3 id=&#34;prior-background-in-erlang-and-elixir:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Prior background in Erlang and Elixir&lt;/h3&gt;

&lt;p&gt;I went to OpenHack Pittsburgh &lt;em&gt;never&lt;/em&gt; having yet read any Elixir language material, never having written Elixir code, not even &amp;ldquo;hello, world&amp;rdquo;. The only things I had done before tonight:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I first heard of Erlang nearly two decades ago, and when I saw it, I was turned off by the Prolog-style syntax, and it didn&amp;rsquo;t seem relevant to anything I was doing at the time, so I ignored it.&lt;/li&gt;
&lt;li&gt;I intended to learn some Erlang earlier this year, but made little progress before putting it aside: I went to the free book &lt;a href=&#34;http://learnyousomeerlang.com/&#34;&gt;&amp;ldquo;Learn You Some Erlang for Great Good!&amp;rdquo;&lt;/a&gt; and downloaded the code and &lt;a href=&#34;https://github.com/FranklinChen/learn-you-some-erlang&#34;&gt;got it to compile&lt;/a&gt;, but did not proceed any further.&lt;/li&gt;
&lt;li&gt;I installed Elixir on my Mac &lt;a href=&#34;http://elixir-lang.org/getting_started/1.html&#34;&gt;using Homebrew&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I installed an &lt;a href=&#34;https://github.com/elixir-lang/emacs-elixir&#34;&gt;Emacs Elixir mode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I made a note of a free online book &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001642&#34;&gt;&amp;ldquo;Etudes for Elixir&amp;rdquo;&lt;/a&gt; and checked out the GitHub repository, but did not look at the book or code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;find-a-testing-framework:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Find a testing framework&lt;/h3&gt;

&lt;p&gt;Upon arrival at ModCloth, getting pizza to eat, and plugging in my MacBook and connecting to the guest WiFi, the first thing I did was search for a testing framework for Elixir.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s 2013, not 1993, so it is hard to convince me to invest any time at all in learning to operate in a language ecosystem that does not have at least a de facto standard testing framework. For every language that I currently actively use for writing serious programs, I operate with TDD. Some examples of languages and the test frameworks I currently use for them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C/C++: &lt;a href=&#34;https://code.google.com/p/googletest/&#34;&gt;googletest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clojure: &lt;a href=&#34;https://github.com/marick/Midje&#34;&gt;Midje&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haskell: &lt;a href=&#34;http://hspec.github.io/&#34;&gt;HSpec&lt;/a&gt; and &lt;a href=&#34;http://www.haskell.org/haskellwiki/Introduction_to_QuickCheck2&#34;&gt;QuickCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java or Scala: &lt;a href=&#34;http://specs2.org/&#34;&gt;Specs2&lt;/a&gt; and &lt;a href=&#34;http://www.scalacheck.org/&#34;&gt;ScalaCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript: &lt;a href=&#34;http://pivotal.github.io/jasmine/&#34;&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl: &lt;a href=&#34;http://search.cpan.org/~mschwern/Test-Simple-0.98/lib/Test/More.pm&#34;&gt;Test::More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python: &lt;a href=&#34;http://pytest.org/&#34;&gt;pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby: &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Racket: &lt;a href=&#34;http://docs.racket-lang.org/rackunit/&#34;&gt;RackUnit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, first Web search hit for Elixir and unit testing was &lt;a href=&#34;http://elixir-lang.org/getting_started/ex_unit/1.html&#34;&gt;ExUnit&lt;/a&gt;, so that was encouraging.&lt;/p&gt;

&lt;p&gt;Justin was still stuck installing Elixir, so we started exploring Elixir together off my laptop.&lt;/p&gt;

&lt;h3 id=&#34;one-test-file:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;One test file&lt;/h3&gt;

&lt;p&gt;The first thing I did after discovering ExUnit was to copy and paste the code for a sample test into Emacs and save it into a file &lt;code&gt;test_hello.exs&lt;/code&gt;, see that the Elixir mode was working (with syntax highlighting), and figure out how to run the test: &lt;code&gt;$ elixir test_hello.exs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;Then we explored adding more tests, changing some assertions, and learning as went, by looking up the Elixir documentation. For example, Elixir uses an interesting callback mechanism for cleanly passing &amp;ldquo;setup&amp;rdquo; state to tests inside a single test case. Also, &lt;code&gt;assert&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; are &lt;a href=&#34;http://en.wikipedia.org/wiki/Macro_%28computer_science%29#Syntactic_macros&#34;&gt;syntactic macros&lt;/a&gt;, enabling them to do magic to analyze expressions, hence the support of natural assertion syntax (which &lt;a href=&#34;../../blog/2013/07/11/pittsburgh-ruby-lightning-talk-night/&#34;&gt;I like a lot better than special syntax&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;After writing some failing tests involving arithmetic and making them pass, I wrote a division by zero test. I was intrigued that not only did it fail, as expected, but also the compiler warned ahead of time that an exception was going to be raised. Nice. In any case, I learned how to make an assertion of the raising of an exception. This is very important. We should always pay attention to &lt;a href=&#34;http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/&#34;&gt;testing the sad paths&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We saw in the documentation for ExUnit that there was a way to mark a test case as being OK to run concurrently with others. Great! These days there is no excuse not to be able to run tests concurrently. So I wrote another test case, which I put in the same source file (for the moment), and I wanted to see for myself that concurrency was happening. I wanted to call some kind of &amp;ldquo;sleep&amp;rdquo; function. To do that, I did a Web search, and found that Erlang comes with &lt;code&gt;sleep&lt;/code&gt; in the &lt;code&gt;timer&lt;/code&gt; module. I found out how to call Erlang from Elixir, and it worked!&lt;/p&gt;

&lt;h3 id=&#34;more-than-one-source-file:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;More than one source file&lt;/h3&gt;

&lt;p&gt;The next obvious step was to write a test for code that did not yet exist, but was to be written outside the test source file. For that, I had to figure out how to define a module and import it. OK, but then there&amp;rsquo;s the question of file organization. Hmm.&lt;/p&gt;

&lt;p&gt;At this point, the only reasonable thing to do (and which in retrospect should have been done first) was to find out what the &amp;ldquo;standard&amp;rdquo; way of organizing a project&amp;rsquo;s source files is supposed to be, and what the standard way to build everything is.&lt;/p&gt;

&lt;p&gt;A Web search quickly came up with &lt;a href=&#34;http://elixir-lang.org/getting_started/mix/1.html&#34;&gt;Mix&lt;/a&gt;. Awesome, the Elixir people are serious about real software development! Mix turns out to be inspired by Clojure&amp;rsquo;s &lt;a href=&#34;https://github.com/technomancy/leiningen&#34;&gt;Leiningen&lt;/a&gt;, which of course I use to start any new Clojure project. &lt;code&gt;$ mix new hello&lt;/code&gt; did the trick, creating the scaffolding for a new Elixir project.&lt;/p&gt;

&lt;p&gt;I refactored our existing &lt;code&gt;test_hello.exs&lt;/code&gt; file into two files (one for each test case) in the &lt;code&gt;test&lt;/code&gt; directory, then wrote a module &lt;code&gt;hello.ex&lt;/code&gt; into &lt;code&gt;lib&lt;/code&gt;. A failed test, then making it succeed, and finally I wrote my first non-test code in Elixir!&lt;/p&gt;

&lt;p&gt;Running tests is very easy once you are using Mix. Just &lt;code&gt;$ mix test&lt;/code&gt; does it.&lt;/p&gt;

&lt;h3 id=&#34;packaging-for-publshing:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Packaging for publshing&lt;/h3&gt;

&lt;p&gt;At this point, I decided I wanted to create an actual Elixir package to publish.&lt;/p&gt;

&lt;p&gt;So I did a Web search to find out whether there was a standard repository and how to publish to it.&lt;/p&gt;

&lt;p&gt;Here we go, &lt;a href=&#34;http://expm.co/&#34;&gt;Expm&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I installed the package manager, set up my user name and password, and went to work on a simple package to publish.&lt;/p&gt;

&lt;p&gt;I saw that nobody had yet contributed an implementation of &lt;a href=&#34;http://franklinchen.com/blog/2012/03/14/for-real-geeks-today-is-not-pi-day-but-half-tau-day/&#34;&gt;tau&lt;/a&gt;, so I quickly created a tau library with Mix, did &lt;code&gt;$ expm new&lt;/code&gt; to create a &lt;code&gt;package.exs&lt;/code&gt; template, filled it out, wrote an ExUnit test that passed, completed the &lt;code&gt;README.md&lt;/code&gt;, and just as OpenHack Pittsburgh was officially closing for the evening, I successfully published &lt;a href=&#34;http://expm.co/tau&#34;&gt;my tau package&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Actually, I accidentally screwed up the first time, forgetting to change all the fields of the template &lt;code&gt;package.exs&lt;/code&gt; and ending up published &lt;code&gt;yourlib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and I committed my project in Git and pushed &lt;a href=&#34;https://github.com/franklinchen/tau&#34;&gt;to GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;some-haskell-stuff:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Some Haskell stuff&lt;/h2&gt;

&lt;p&gt;Steve McCarthy of &lt;a href=&#34;http://www.spacefinity.com/&#34;&gt;Spacefinity&lt;/a&gt; had announced, in the introduction at the beginning of the evening when each of us stood up to say what we planned to work on, that he wanted to do more with the &lt;a href=&#34;http://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt; package manager for Haskell, so I spent a little bit of time getting him going by pointing him toward a sample Haskell code repository I initially &lt;a href=&#34;http://franklinchen.com/blog/2012/11/05/the-start-of-a-local-haskell-study-group.markdown/&#34;&gt;set up last year when some friends were interested in getting into Haskell&lt;/a&gt;; sadly, we&amp;rsquo;ve all been too busy for Haskell, so I&amp;rsquo;ve let the project rot, in the sense that my configuration file is not optimally organized and also there have been updates in the test framework world in Haskell since then.&lt;/p&gt;

&lt;p&gt;Anyway, here&amp;rsquo;s my &lt;a href=&#34;https://github.com/FranklinChen/project-euler-haskell&#34;&gt;&amp;ldquo;Project Euler in Haskell&amp;rdquo; repository&lt;/a&gt;. I plan to get around to improving it.&lt;/p&gt;

&lt;h2 id=&#34;thanks:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Thanks to ModCloth for providing the space, pizza, cookies, and WiFi!&lt;/p&gt;

&lt;p&gt;A big thank-you to Justin for providing the inspiration for me to try this experiment in learning!&lt;/p&gt;

&lt;p&gt;And thanks to Steve McCarthy for getting me to drag up an old Haskell project and making me think that I should soon update it to be a better example.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Tonight was the first time I ever started learning a new programming language, wrote unit tests right off the bat with proper project organization and also published a library immediately.&lt;/p&gt;

&lt;p&gt;Of course, there is much more to go in actually really learning and using Elixir, but as a first step in showing that Elixir has a viable ecosystem, I think the experiment was a success. My next steps in continuing to learn Elixir would include writing tests in conjunction with a deep dive into the actual semantics of the language. There is no substitute for the latter; the alternative is dangerously making assumptions based on superficial syntactic similarity with other languages (such as Ruby).&lt;/p&gt;

&lt;h3 id=&#34;update-of-2013-08-27:1ce2624ff25ef568d351a0712ca69fa2&#34;&gt;(Update of 2013-08-27)&lt;/h3&gt;

&lt;p&gt;One thing I didn&amp;rsquo;t get around to was setting up &lt;a href=&#34;http://travis-ci.org/&#34;&gt;Travis&lt;/a&gt; continuous integration. I believe this should also be part of the story in getting up and running in a new programming language environment.&lt;/p&gt;

&lt;p&gt;So I did a Web search and figured out how to create a suitable &lt;code&gt;.travis.yml&lt;/code&gt;. I committed and pushed to GitHub, flipped the switch in my Travis account, and you can see its &lt;a href=&#34;https://travis-ci.org/FranklinChen/tau&#34;&gt;passing status&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Ruby/Python social and some observations about our polyglot world</title>
      <link>http://conscientiousprogrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social/</link>
      <pubDate>Fri, 02 Aug 2013 22:17:42 -0400</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/08/02/pittsburgh-ruby-python-social/</guid>
      <description>

&lt;p&gt;Programming meetups aren&amp;rsquo;t just about presentations and coding. Abby and I joined others in meeting up for dinner for a &lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/120201652/&#34;&gt;joint Pittsburgh Ruby and Pittsburgh Python social&lt;/a&gt; and enjoyed relaxing and socializing outdoors in Bakery Square. Although it perpetually looked like it was going to rain, it turned out we weren&amp;rsquo;t really rained on.&lt;/p&gt;

&lt;iframe src=&#34;//instagram.com/p/ch8quus4Kb/embed/&#34; width=&#34;612&#34; height=&#34;710&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; allowtransparency=&#34;true&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Carol, Andre, and Abby:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/carolnichols/9425969330&#34; title=&#34;ttm! by Carol Nichols, on Flickr&#34;&gt;&lt;img src=&#34;https://farm4.staticflickr.com/3754/9425969330_d8ecdbf987.jpg&#34; width=&#34;500&#34; height=&#34;281&#34; alt=&#34;ttm!&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was fitting that there was a joint social for two language communities, because we live in a polyglot world.&lt;/p&gt;

&lt;p&gt;Despite my original intention not to engage into any tech-related conversation, I couldn&amp;rsquo;t help remarking on my current polyglot responsibilities at work at CMU on the METAL project!&lt;/p&gt;

&lt;h2 id=&#34;our-polyglot-world-ruby-python-perl:f96e1a748b79a0448958de0b51234d51&#34;&gt;Our polyglot world: Ruby, Python, Perl&lt;/h2&gt;

&lt;p&gt;I mentioned having to cobble together Ruby, Python, and Perl code recently in an NLP project to process Farsi text into corpora to analyze. We used a Ruby gem &lt;a href=&#34;https://github.com/aziz/virastar&#34;&gt;Virastar&lt;/a&gt; in our pipeline, a Perl script for a Farsi stemmer, &lt;a href=&#34;http://perstem.sourceforge.net/&#34;&gt;Perstem&lt;/a&gt;, and a &lt;a href=&#34;https://github.com/wfeely/farsiNLPTools&#34;&gt;Python script for normalization&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;update-of-2013-12-04-c-scala-mongodb:f96e1a748b79a0448958de0b51234d51&#34;&gt;(Update of 2013-12-04) C++, Scala, MongoDB&lt;/h3&gt;

&lt;p&gt;The work project ended up becoming even more polyglot than I expected.&lt;/p&gt;

&lt;p&gt;I also used a C++ tagger, TurboTagger from &lt;a href=&#34;http://www.ark.cs.cmu.edu/TurboParser/&#34;&gt;TurboParser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote Scala to execute and monitor the pipeline, because it turned out that component bugs and timeouts (from infinite loops sometimes) had to be dealt with: the original shell script pipelines did not handle any of that at all. Also, the vast amount of data meant that parallelizing was critical. The Scala ecosystem has  turned out great for me. I didn&amp;rsquo;t use Akka actors for this task, just futures and parallel collections.&lt;/p&gt;

&lt;p&gt;I also used MongoDB because it is quite a natural fit for document-oriented storage and querying as an intermediate stage I can inspect before the final stage of conversion to Sketch Engine format. And I happened to just &lt;a href=&#34;../../blog/2013/12/04/mongodb-free-online-course-a-review/&#34;&gt;finish a free online MongoDB course&lt;/a&gt; which has been useful. In my Scala code, I used the official Scala driver &lt;a href=&#34;https://github.com/mongodb/casbah&#34;&gt;Casbah&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why MongoDB? I needed to track the transformations, and experiment with different parameters while also fixing bugs and rerunning stuff. Because there is so much data and sometimes something crashes in the pipeline, I decided to save all intermediate results in a database in order to avoid repeating work.&lt;/p&gt;

&lt;p&gt;Finally, I used Scala to generate corpora for importing into &lt;a href=&#34;http://www.sketchengine.co.uk/&#34;&gt;The Sketch Engine&lt;/a&gt; for our Farsi linguistics experts to analyze. Scala&amp;rsquo;s parser combinator library came in very useful, and I represented each stage in the pipeline as a transformation of a custom AST designed to finally serialize well to the Sketch Engine &amp;ldquo;vert&amp;rdquo; file format.&lt;/p&gt;

&lt;p&gt;It was pretty important to work with ASTs, since we actually got text in a variety of formats, which I parsed to a common AST in order to push into the pipeline.&lt;/p&gt;

&lt;p&gt;Whew!&lt;/p&gt;

&lt;h3 id=&#34;update-of-2014-06-10:f96e1a748b79a0448958de0b51234d51&#34;&gt;(Update of 2014-06-10)&lt;/h3&gt;

&lt;p&gt;A description of some of this &lt;a href=&#34;http://springfield.metaphor.cs.cmu.edu:8080/MetaphorViz/About.html&#34;&gt;METAL project&lt;/a&gt; work is in the paper &lt;a href=&#34;http://www.lrec-conf.org/proceedings/lrec2014/pdf/596_Paper.pdf&#34;&gt;&amp;ldquo;The CMU METAL Farsi NLP Approach&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh JavaScript meetup: functional programming</title>
      <link>http://conscientiousprogrammer.com/blog/2013/07/10/pittsburgh-javascript-meetup-functional-programming/</link>
      <pubDate>Wed, 10 Jul 2013 22:37:00 +0000</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2013/07/10/pittsburgh-javascript-meetup-functional-programming/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://photos3.meetupstatic.com/photos/event/7/f/6/e/global_239372622.jpeg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Pittsburgh JavaScript&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Because the topic of the featured presentation by &lt;a href=&#34;http://idiotcoder.com/&#34;&gt;Richard Ashkettle&lt;/a&gt; was &lt;a href=&#34;http://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt;, I made sure to attend my first meeting of the newly revived &lt;a href=&#34;http://www.meetup.com/Pittsburgh-JavaScript/&#34;&gt;Pittsburgh JavaScript meetup&lt;/a&gt;. (This was actually the third meeting of the revived Pittsburgh JavaScript group, but I hadn&amp;rsquo;t been able to make it to the first two.)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d met Richard earlier, a month ago at &lt;a href=&#34;http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/&#34;&gt;Pittsburgh TechFest&lt;/a&gt;. He does not claim to be an expert at functional programming, but is enthusiastic about concepts and techniques that he can and does apply to improving software quality in many dimensions. Since I have been a functional programming enthusiast and practitioner for twenty years, I had these goals in attending his presentations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;evaluate what Richard and others have done with, and think is important about,  functional programming&lt;/li&gt;
&lt;li&gt;offer a few corrections, elaborations, suggestions as appropriate for the situation&lt;/li&gt;
&lt;li&gt;gather information on how I may be able to effectively explain functional programming to those who are new to it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;history-of-the-pittsbugh-javascript-meetup-group:4a05566a34ea27820d7f737863a690ea&#34;&gt;History of the Pittsbugh JavaScript meetup group&lt;/h2&gt;

&lt;p&gt;Two years ago, in 2011, I had attended the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-JavaScript-Developers&#34;&gt;first incarnation of the group&lt;/a&gt; faithfully, attending several months of meetings before it disbanded when the founder left Pittsburgh. I learned quite a bit from those meetings.&lt;/p&gt;

&lt;p&gt;Two years is a long time in the world of JavaScript. Looking back at &lt;a href=&#34;http://franklinchen.com/blog/2011/09/27/when-jquery-attacks/&#34;&gt;one of my blog posts reporting on the old JavaScript meetup group&lt;/a&gt;, I am amused by how anachronistic that feels to me today, as in my mention of &lt;a href=&#34;http://sproutcore.com/&#34;&gt;Sproutcore&lt;/a&gt;, which I never hear about any more.&lt;/p&gt;

&lt;h2 id=&#34;up-front-my-take-on-the-secret-of-javascript:4a05566a34ea27820d7f737863a690ea&#34;&gt;Up front: my take on the secret of JavaScript&lt;/h2&gt;

&lt;p&gt;Here are some observations (not novel) I have about JavaScript, to set the stage for further discussion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript is full of horrible, disgusting Bad Parts.&lt;/li&gt;
&lt;li&gt;JavaScript has only one shiny Good Part: it has first-class functions.&lt;/li&gt;
&lt;li&gt;People manage to get a lot of amazingly cool and important stuff done using JavaScript, so take it seriously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comments-on-richard-s-presentation:4a05566a34ea27820d7f737863a690ea&#34;&gt;Comments on Richard&amp;rsquo;s presentation&lt;/h2&gt;

&lt;h3 id=&#34;immutability-and-functional-languages:4a05566a34ea27820d7f737863a690ea&#34;&gt;Immutability and &amp;ldquo;functional languages&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;Richard talked about &lt;a href=&#34;http://en.wikipedia.org/wiki/Immutable_object&#34;&gt;immutability&lt;/a&gt; as being part of what &amp;ldquo;functional programming&amp;rdquo; is about.&lt;/p&gt;

&lt;p&gt;Yes, it is, and in addition, common best practices in many programming languages these days argue for favoring immutability. I want to emphasize that you don&amp;rsquo;t have to go full-blown into a specialized &amp;ldquo;functional language&amp;rdquo; in order to take advantage of immutability as desired: for example, this tip has long since been known as at least a &amp;ldquo;design pattern&amp;rdquo; in the &lt;a href=&#34;../../blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/&#34;&gt;Java world&lt;/a&gt;, in the &lt;a href=&#34;http://www.harukizaemon.com/blog/2010/03/01/functional-programming-in-object-oriented-languages/&#34;&gt;Ruby world&lt;/a&gt;, and basically everywhere else.&lt;/p&gt;

&lt;p&gt;Richard suggested that &amp;ldquo;functional languages&amp;rdquo; don&amp;rsquo;t allow mutation. By my definition, this is &lt;em&gt;not&lt;/em&gt; actually true.  I didn&amp;rsquo;t raise an objection during the talk because I didn&amp;rsquo;t want to sidetrack it, but here I have space to elaborate a little. I would argue (but that would have to be another blog post) that the cleanest, most intuitive and novice-accessible &amp;ldquo;functional languages&amp;rdquo;) are those in the &lt;a href=&#34;http://en.wikipedia.org/wiki/ML_%28programming_language%29&#34;&gt;ML&lt;/a&gt; family originally developed in the 1970s and lives on today&amp;rsquo;s popular, industrial-strength dialects of &lt;a href=&#34;http://en.wikipedia.org/wiki/Standard_ML&#34;&gt;Standard ML&lt;/a&gt;, &lt;a href=&#34;http://ocaml.org/&#34;&gt;OCaml&lt;/a&gt;, and &lt;a href=&#34;http://fsharp.org/&#34;&gt;F#&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ML fully supports mutation&lt;/em&gt;, through &lt;a href=&#34;http://en.wikibooks.org/wiki/Standard_ML_Programming/Types#References&#34;&gt;reference cells&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, because of notions like this, I&amp;rsquo;ve been thinking that maybe it would be best if we all stopped using the term &amp;ldquo;functional language&amp;rdquo;, because it has sadly become misleading and ambiguous. In particular, people instantly think &amp;ldquo;Haskell&amp;rdquo; when they use the word &amp;ldquo;functional language&amp;rdquo;, when in fact Haskell is a very unusual, unique language (and ecosystem) among languages that one could call &amp;ldquo;functional&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;expressions-functions-evaluation-and-values:4a05566a34ea27820d7f737863a690ea&#34;&gt;Expressions, functions, evaluation, and values&lt;/h3&gt;

&lt;p&gt;As Richard put it, &amp;ldquo;favor expressions evaluating to a value&amp;rdquo;. The focus of functional programming is on &lt;em&gt;returning&lt;/em&gt; a value, from an expression that includes function calls, rather than munging some mutable global state, or modifying state through a reference passed into a function as a parameter.&lt;/p&gt;

&lt;h3 id=&#34;recursion-vs-looping:4a05566a34ea27820d7f737863a690ea&#34;&gt;Recursion vs. looping?&lt;/h3&gt;

&lt;p&gt;Richard noted that one characteristic of functional programming is the use of recursion instead of looping. He gave examples of writing tail-recursive functions.&lt;/p&gt;

&lt;p&gt;One nitpick (which again, I did not bring up during the talk): recursion and looping (as in through &amp;ldquo;normal&amp;rdquo; constructs such as &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;) are &lt;em&gt;not&lt;/em&gt; actually opposed. I will write a blog post later about why conventional looping is best thought of as a derived construct built on top of recursion, and why it might be best to consider conventional looping to be a historical accident and mistake (but a very useful invention given the historical circumstances).&lt;/p&gt;

&lt;h4 id=&#34;efficiency-of-recursion:4a05566a34ea27820d7f737863a690ea&#34;&gt;Efficiency of recursion?&lt;/h4&gt;

&lt;p&gt;Also, people brought up the topic of efficiency. I have learned over the years that for many people, the word &amp;ldquo;recursion&amp;rdquo; seems to immediately trigger the word &amp;ldquo;efficiency&amp;rdquo;. Richard did a great job in mentioning that &lt;a href=&#34;http://wiki.ecmascript.org/doku.php?id=harmony:proper_tail_calls&#34;&gt;EMCAScript 6 is going to have proper tail calls (also called tail call optimization)&lt;/a&gt;, which will make tail recursion equivalent to ordinary looping in terms of space usage. This is &lt;em&gt;hugely important&lt;/em&gt; news, of course. This mandate shows how serious JavaScript is about embracing functional programming.&lt;/p&gt;

&lt;h4 id=&#34;recursion-for-parallelism:4a05566a34ea27820d7f737863a690ea&#34;&gt;Recursion for parallelism&lt;/h4&gt;

&lt;p&gt;But beyond the issue tail recursion, I felt I had to point out that recursive algorithms can offer actual &lt;em&gt;speedup&lt;/em&gt;. The classic examples, of course, are the &lt;a href=&#34;http://www.cs.cmu.edu/~scandal/nesl/alg-sequence.html#quicksort&#34;&gt;parallel speedups of divide-and-conquer algorithms such as quicksort that use recursion&lt;/a&gt;. If you expressed the algorithms by removing the recursion (with a hand-rolled stack as often taught in courses), you would destroy the inherent parallelism. So in the world of parallelism, you want your code to stay naturally recursive! As &lt;a href=&#34;http://adambom.github.io/parallel.js/&#34;&gt;parallel computing comes to JavaScript&lt;/a&gt;, keep this in mind!&lt;/p&gt;

&lt;h3 id=&#34;higher-order-functions-first-class-functions:4a05566a34ea27820d7f737863a690ea&#34;&gt;Higher-order functions, first-class functions&lt;/h3&gt;

&lt;p&gt;Richard: &amp;ldquo;A function is an object&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really as simple as that. Functions can be created, stored, passed around. Functions can return other functions.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s amazing, but I claim that this is JavaScript&amp;rsquo;s one Good Part, its killer feature that surprisingly many languages don&amp;rsquo;t have. And it&amp;rsquo;s the one feature that is used &lt;em&gt;all the time&lt;/em&gt;, not just in esoteric code. From the very beginning, JavaScript had first-class functions, to support callbacks for client code in Web browsers. and &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node&lt;/a&gt; server-side code is nothing if not a whole bunch of &lt;code&gt;function (...)&lt;/code&gt;. Without closures and first-class functions, JavaScript would have been completely useless. Thank goodness &lt;a href=&#34;http://brendaneich.com/2008/04/popularity/&#34;&gt;Brendan Eich was inspired by the Scheme functional language&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;no-methods:4a05566a34ea27820d7f737863a690ea&#34;&gt;No methods!&lt;/h4&gt;

&lt;p&gt;JavaScript not only provides full-fledged functions, but ironically, its weirdest feature, the prototype-based inheritance instead of class-based inheritance, inadvertently has prevented &amp;ldquo;interference&amp;rdquo; from the conventional class-based object-oriented world, which is mostly based not on functions, but on &lt;a href=&#34;https://en.wikipedia.org/wiki/Method_%28computer_programming%29&#34;&gt;methods&lt;/a&gt; that interference with functions because they are meant to &lt;em&gt;replace&lt;/em&gt; functions (since according to &amp;ldquo;pure&amp;rdquo; object-oriented thinking, functions are evil and computation should involve method calls on objects). &lt;em&gt;JavaScript does not (really) have methods&lt;/em&gt;; it only simulates them, by storing bona fide closures into fields of (map) objects. For example, if you use &lt;a href=&#34;http://emberjs.com&#34;&gt;Ember&lt;/a&gt;, the following code illustrates how the building blocks of typical JavaScript programming involve creating lots of &lt;code&gt;function&lt;/code&gt;s: &lt;code&gt;valueWillChange&lt;/code&gt; and &lt;code&gt;valudDidChange&lt;/code&gt; are just functions. They are not special things, &amp;ldquo;methods&amp;rdquo;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;App.PersonView &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Ember.View.extend({
  valueWillChange&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;function&lt;/span&gt; (obj, keyName, value) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;.changingFrom &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value;
  }.observesBefore(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;content.value&amp;#39;&lt;/span&gt;),
  valueDidChange&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;function&lt;/span&gt;(obj, keyName, value) {
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// only run if updating a value already in the DOM&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;.get(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;inDOM&amp;#39;&lt;/span&gt;) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; color &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;.changingFrom &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;;
          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// logic&lt;/span&gt;
      }
  }.observes(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;content.value&amp;#39;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;examples:4a05566a34ea27820d7f737863a690ea&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Richard gave some standard examples of using higher-order functions such as &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; as provided in various popular JavaScript libraries such as &lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a matter of style, he recommended against long, obscure one-liners that involve chaining. I agree. For readability and testability of pipelines, I have found that it is good to break things up into intermediate steps. (Just &lt;a href=&#34;../../blog/2013/06/26/pittsburgh-python-night-of-the-favorite-module/&#34;&gt;recently&lt;/a&gt;, Tim Lesher also recommended against stupidity masking as excessive cleverness in his Python lightning talk about functional programming with &lt;code&gt;itertools&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&#34;monads:4a05566a34ea27820d7f737863a690ea&#34;&gt;Monads?!&lt;/h3&gt;

&lt;p&gt;Regrettably, Richard brought up the term &lt;a href=&#34;http://en.wikipedia.org/wiki/Monad_%28functional_programming%29&#34;&gt;&amp;ldquo;monads&amp;rdquo;&lt;/a&gt;. I&amp;rsquo;m close to thinking that this word should be &lt;a href=&#34;http://fsharpforfunandprofit.com/posts/why-i-wont-be-writing-a-monad-tutorial/&#34;&gt;banned&lt;/a&gt;, because too many confusions about them have ruined the word. I have yet decided what the best alternative phrase might be. Maybe something like &amp;ldquo;computational context&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;Ironically, Richard admitted he was going to abuse the word, and for the sake of example, he said, he was going to say that &amp;ldquo;jQuery is a monad&amp;rdquo;. I didn&amp;rsquo;t want to derail his talk, and since he admitted the abuse, I decided there would be a better time to address this topic.&lt;/p&gt;

&lt;p&gt;It was interesting to me, however, that he gathered that the interesting thing about jQuery, and why he wanted to call it a monad, was the chaining of calls in jQuery. I need to think of a good way to deal with this intuition when I get around to explaining monads.&lt;/p&gt;

&lt;h3 id=&#34;partial-application-and-currying:4a05566a34ea27820d7f737863a690ea&#34;&gt;Partial application and currying&lt;/h3&gt;

&lt;p&gt;Richard explained both partial application and currying, then he wondered when one would in practice write a curried function.&lt;/p&gt;

&lt;p&gt;I said (but not very convincingly, I think) that you would write a curried function if you knew you would otherwise have to manually do a bunch of partial application. I have to confess that was a weak answer. I think the practical situation in JavaScript is that full-scale up-front currying is not useful.&lt;/p&gt;

&lt;h3 id=&#34;libraries:4a05566a34ea27820d7f737863a690ea&#34;&gt;Libraries&lt;/h3&gt;

&lt;p&gt;Richard recommended checking out the following libraries, especially Lo-Dash, which he judges to be faster than Underscore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lodash.com/&#34;&gt;Lo-Dash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://osteele.com/sources/javascript/functional/&#34;&gt;Functional JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;questions-and-answers:4a05566a34ea27820d7f737863a690ea&#34;&gt;Questions and answers&lt;/h2&gt;

&lt;p&gt;There were many interesting questions raised after the presentation.&lt;/p&gt;

&lt;h3 id=&#34;introducing-functional-programming-into-a-team-environment:4a05566a34ea27820d7f737863a690ea&#34;&gt;Introducing functional programming into a team environment&lt;/h3&gt;

&lt;p&gt;Someone asked Richard a good question about whether it&amp;rsquo;s appropriate to, say, start using Underscore at work and expecting other team members to learn how to use it. Is it fair to expect others to learn a new way of doing things that might seem weird?&lt;/p&gt;

&lt;p&gt;My point of view is that there&amp;rsquo;s nothing specific about functional programming when it comes to questions like this. The same question comes up when evaluating a particular programming language or a particular MVC framework or a particular version control system, and the answer involve considering all the different realities of who is comfortable with what, whether it is worth learning something new, what the advantages and disadvantages are, how much the decision will affect delivery of business value.&lt;/p&gt;

&lt;h3 id=&#34;growing-parameter-list-for-a-function-vs-passing-in-a-big-object:4a05566a34ea27820d7f737863a690ea&#34;&gt;Growing parameter list for a function vs. passing in a big object&lt;/h3&gt;

&lt;p&gt;One concern brought up is that if you&amp;rsquo;re programming in a functional style, you can end up being faced with ever-growing parameter lists for a function to pass in everything that it needs. One solution is to create a big object to stick everything into it that might be needed (for example, a configuration object instead of separate flag parameters). Is this overkill?&lt;/p&gt;

&lt;p&gt;Also, &lt;a href=&#34;http://tonylukasavage.com/&#34;&gt;Tony Lukasavage&lt;/a&gt; emphasized that his concern was in the context of the need to evolve an existing API without breaking customers&amp;rsquo; client code that uses it.&lt;/p&gt;

&lt;p&gt;My first note would be that API design is tricky and checking out &lt;a href=&#34;../../blog/2013/06/25/pittsburgh-java-user-group-building-and-evolving-a-java-api/&#34;&gt;some resources on API design&lt;/a&gt; is very helpful.&lt;/p&gt;

&lt;p&gt;Regarding parameter lists, Richard noted that you might have a design problem if you have a function that needs to know about so many things it depends on. You may want to refactor the function (of course, in the context of evolving a mature API that customers depend on, it may be too late, unfortunately) and the data structures passed in. For example, if you have a number of functions that all take as parameters a &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;, then maybe you want a single &lt;code&gt;name&lt;/code&gt; parameter instead.&lt;/p&gt;

&lt;p&gt;I suggested also that if certain flags are not always needed, then instead of a huge configuration object, how about simply having separate but related functions (in a language supporting overloading, you could provide overloaded functions, although the topic of overloading is another large one to discuss later), each of which takes only the flags the client cares about. Of course, as some people pointed out, then you might end up with annoyingly long and specific function names.&lt;/p&gt;

&lt;p&gt;Nobody said designing an API is easy.&lt;/p&gt;

&lt;h3 id=&#34;do-i-actually-do-functional-programming:4a05566a34ea27820d7f737863a690ea&#34;&gt;Do I actually do functional programming?&lt;/h3&gt;

&lt;p&gt;One question I got, since before the meetup, I had indicated having experience with functional programming, was basically, do I actually use it in JavaScript and elsewhere. The answer is, yes. As I&amp;rsquo;ve mentioned, you don&amp;rsquo;t have use a special language in order to program in this way, although it&amp;rsquo;s much easier and more efficient to use a language that is tailored to support it. Most of the code I&amp;rsquo;ve written in the past fifteen years has attempted to be primarily functional in style, whatever language I&amp;rsquo;m using for work (mostly Java, Perl, Python, and recently Scala). I don&amp;rsquo;t do this out of some kind of ideology, but because it works well in getting stuff done. Before adopting a primarily functional style of programming, I spent years working in traditional imperative and object-oriented styles, and empirically, that was less pleasant.&lt;/p&gt;

&lt;h4 id=&#34;do-i-do-functional-programming-in-javascript:4a05566a34ea27820d7f737863a690ea&#34;&gt;Do I do functional programming in JavaScript?&lt;/h4&gt;

&lt;p&gt;I have not actually done any JavaScript programming for work since doing some UI prototyping two years ago. I don&amp;rsquo;t know when I&amp;rsquo;ll return to doing front end work, but meanwhile, I am interested in doing some Web browser stuff for personal projects, so I try to keep up to date on developments in the JavaScript world.&lt;/p&gt;

&lt;p&gt;One thing that has been interesting that I need to check out is the rise of &lt;a href=&#34;http://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;functional reactive programming (FRP)&lt;/a&gt; libraries for JavaScript, such as &lt;a href=&#34;https://github.com/raimohanska/bacon.js&#34;&gt;Bacon.js&lt;/a&gt;. FRP was originally invented in the 1990s by Conal Elliott in the context of Haskell, but almost twenty years later, has finally spread well beyond that now to mainstream visibility and use. For example, Microsoft has thrown its weight behind &lt;a href=&#34;http://rx.codeplex.com/&#34;&gt;Reactive Extensions (Rx)&lt;/a&gt;, which started out in the .NET world, but Microsoft then ported it to JavaScript, C/C++, Python, and Ruby.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:4a05566a34ea27820d7f737863a690ea&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I was happy to see interest in functional programming in the local JavaScript community. Richard gave an introductory talk on it that I thought was very useful as a starting point for those who are new to it. I made note of some omissions or inaccuracies in order to improve my thinking about how I can contribute in the future to improving people&amp;rsquo;s understanding and application of functional programming principles.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>