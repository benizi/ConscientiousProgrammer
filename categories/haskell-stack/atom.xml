<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell Stack on The Conscientious Programmer</title>
    <link>http://ConscientiousProgrammer.com/categories/haskell-stack/</link>
    <description>Recent content in Haskell Stack on The Conscientious Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Nov 2015 16:20:11 -0500</lastBuildDate>
    <atom:link href="http://ConscientiousProgrammer.com/categories/haskell-stack/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Haskell tidbits: 24 days of Hackage, 2015: day 1: Introduction and Stack</title>
      <link>http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/</link>
      <pubDate>Mon, 30 Nov 2015 16:20:11 -0500</pubDate>
      
      <guid>http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/</guid>
      <description>

&lt;p&gt;I happened to see a
&lt;a href=&#34;https://twitter.com/acid2/status/669882628695281669&#34;&gt;tweet from Ollie Charles&lt;/a&gt;
that he didn&amp;rsquo;t have time to do his usual annual December &amp;ldquo;24 days of&amp;hellip;&amp;rdquo;
Haskell blog posts this year (2015) and felt sad because I&amp;rsquo;ve
learned a huge amount from
&lt;a href=&#34;https://ocharles.org.uk/blog/&#34;&gt;reading them&lt;/a&gt;. In both 2012 and 2013, he
wrote &amp;ldquo;24 days of Hackage&amp;rdquo;, daily short and sweet blog posts that
showed how to use selected Haskell packages you can get from the
community archive &lt;a href=&#34;http://hackage.haskell.org/&#34;&gt;Hackage&lt;/a&gt;, and in 2014
he covered GHC language extensions.&lt;/p&gt;

&lt;p&gt;With some trepidation, I decided that I would do a &amp;ldquo;24 days of
Hackage&amp;rdquo; series myself to cap off this year, to share a selection of
the huge number of Haskell packages I find useful. I thought it would
be particularly appropriate to do this given that 2015 was the year I
migrated to using Haskell as my main language for most new work and
personal projects, and therefore has been a year of considerable
discovery for me.&lt;/p&gt;

&lt;p&gt;All my code for my article series will be at
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is day 1.&lt;/p&gt;

&lt;h2 id=&#34;my-selection-criteria:c37cfe20acfff0cff8579f026185f721&#34;&gt;My selection criteria&lt;/h2&gt;

&lt;p&gt;How to choose what to cover? I like what Ollie wrote in his
&lt;a href=&#34;https://ocharles.org.uk/blog/posts/2012-12-01-24-days-of-hackage.html&#34;&gt;2012 inaugural post&lt;/a&gt;:
&amp;ldquo;This will be a whirlwind tour of some modules that I use on an almost
daily basis, including modules that have inspired me, modules that
have changed the way I think about code, and some modules that are so
amazing Iâ€™m not even smart enough to use them!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Some of what I&amp;rsquo;ll cover is already popular and well-known, some may be
just minor but useful utilities, some may be completely obscure, but
the underlying theme will be &amp;ldquo;stuff I use and can briefly say
something useful about&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;stack:c37cfe20acfff0cff8579f026185f721&#34;&gt;Stack&lt;/h2&gt;

&lt;p&gt;It was a no-brainer to choose the first day&amp;rsquo;s topic:
&lt;a href=&#34;http://haskellstack.org/&#34;&gt;Stack&lt;/a&gt;, the main new thing for Haskell in
2015 other than &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; 7.10.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack changed my (Haskell) life.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stack is a game changer for the Haskell community. It is an all-in-one
solution for creating Haskell projects, managing dependencies,
building, and more. Since Stack came out, I&amp;rsquo;ve been slowly migrating
old projects to use it, and I use Stack for all new projects,
including the
&lt;a href=&#34;https://github.com/FranklinChen/twenty-four-days2015-of-hackage&#34;&gt;repo for this article series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not giving a full-blown tutorial on Stack here today, and you can
read the &lt;a href=&#34;http://haskellstack.org/&#34;&gt;official documentation&lt;/a&gt; for
details, but what I want to emphasize is that Stack is useful not only
for experienced developers, but especially also for newcomers.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-get-started-with-haskell:c37cfe20acfff0cff8579f026185f721&#34;&gt;&amp;ldquo;How do I get started with Haskell&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;When I launched &lt;a href=&#34;http://pittsburghhaskell.org/&#34;&gt;Pittsburgh Haskell&lt;/a&gt;
in February this year (2015), I faced a huge hurdle: helping newcomers
to Haskell get started. I created an introductory workshop session,
but a huge number of people were discouraged by my best shot at
creating &lt;a href=&#34;https://github.com/pittsburgh-haskell/haskell-installation&#34;&gt;Haskell installation instructions&lt;/a&gt; that would work for Mac OS,
Windows, and Linux, and people had major problems installing a basic
tool chain, and versioning issues if they already had an old version
of GHC installed.&lt;/p&gt;

&lt;p&gt;Pittsburgh Haskell went on hiatus in April as I got busy with many
other things and there was no momentum to keep it going, but one huge
reason was clearly the confusions over tooling for newcomers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack solves this problem.&lt;/strong&gt; If I give an introductory workshop
  again, I would definitely use Stack.&lt;/p&gt;

&lt;h2 id=&#34;an-example-of-getting-started-with-stack-using-a-custom-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;An example of getting started with Stack using a custom template&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t already use Stack,
&lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Stack Web site already has documentation on how to get started
with Stack using a default template. Here, I want to promote the idea
of using and sharing custom templates. This is not documented so well,
but I think will become more and more important for newcomers, and is
also of course useful for any of us who end up creating the same
boilerplate project setups.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve created a custom template called &lt;code&gt;franklinchen&lt;/code&gt; that I&amp;rsquo;ve
contributed to the
&lt;a href=&#34;https://github.com/commercialhaskell/stack-templates&#34;&gt;&lt;code&gt;stack-templates&lt;/code&gt;&lt;/a&gt;
repo.&lt;/p&gt;

&lt;p&gt;If you run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack new stack-template-demo franklinchen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will be prompted for information to create a new project called &lt;code&gt;stack-template-demo&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-custom-template:c37cfe20acfff0cff8579f026185f721&#34;&gt;Creating a custom template&lt;/h2&gt;

&lt;h2 id=&#34;conclusion:c37cfe20acfff0cff8579f026185f721&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For day 1 of my &amp;ldquo;24 days of Hackage, 2015&amp;rdquo;, I introduced Stack, the
Haskell tool that I&amp;rsquo;m using to build and run all the sample code for
this article series.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>